
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009250  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031e4  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5c4  0800c5c4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5c4  0800c5c4  0001c5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5cc  0800c5cc  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800c5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000002e0  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000039c  2000039c  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017125  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f11  00000000  00000000  00037211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002726c  00000000  00000000  0003da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d804  00000000  00000000  00064c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df35a  00000000  00000000  00082498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001617f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000633c  00000000  00000000  00161844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093c8 	.word	0x080093c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	080093c8 	.word	0x080093c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eae:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000eb0:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <MX_ADC1_Init+0x10c>)
 8000eb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec0:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000edc:	4a33      	ldr	r2, [pc, #204]	; (8000fac <MX_ADC1_Init+0x110>)
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ee8:	2205      	movs	r2, #5
 8000eea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efa:	482a      	ldr	r0, [pc, #168]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000efc:	f003 f952 	bl	80041a4 <HAL_ADC_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f001 fe0e 	bl	8002b26 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4822      	ldr	r0, [pc, #136]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000f1c:	f003 f986 	bl	800422c <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f26:	f001 fdfe 	bl	8002b26 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000f38:	f003 f978 	bl	800422c <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f42:	f001 fdf0 	bl	8002b26 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f46:	230a      	movs	r3, #10
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000f54:	f003 f96a 	bl	800422c <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f5e:	f001 fde2 	bl	8002b26 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f62:	230b      	movs	r3, #11
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f66:	2304      	movs	r3, #4
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000f70:	f003 f95c 	bl	800422c <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f7a:	f001 fdd4 	bl	8002b26 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f82:	2305      	movs	r3, #5
 8000f84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000f8c:	f003 f94e 	bl	800422c <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f96:	f001 fdc6 	bl	8002b26 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000d8 	.word	0x200000d8
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	0f000001 	.word	0x0f000001

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <HAL_ADC_MspInit+0x110>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d171      	bne.n	80010b6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001026:	2307      	movs	r3, #7
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <HAL_ADC_MspInit+0x118>)
 800103a:	f003 ff11 	bl	8004e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800103e:	2303      	movs	r3, #3
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	481e      	ldr	r0, [pc, #120]	; (80010cc <HAL_ADC_MspInit+0x11c>)
 8001052:	f003 ff05 	bl	8004e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <HAL_ADC_MspInit+0x124>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800109c:	f003 fbf6 	bl	800488c <HAL_DMA_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010a6:	f001 fd3e 	bl	8002b26 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40012000 	.word	0x40012000
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020400 	.word	0x40020400
 80010d0:	20000120 	.word	0x20000120
 80010d4:	40026410 	.word	0x40026410

080010d8 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	at24c_Check();
 80010dc:	f000 f83c 	bl	8001158 <at24c_Check>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	230a      	movs	r3, #10
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 030f 	add.w	r3, r7, #15
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2310      	movs	r3, #16
 8001104:	21a0      	movs	r1, #160	; 0xa0
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <at24c_ReadOneByte+0x34>)
 8001108:	f004 fab6 	bl	8005678 <HAL_I2C_Mem_Read>
	return temp;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001ec 	.word	0x200001ec

0800111c <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af04      	add	r7, sp, #16
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	80fb      	strh	r3, [r7, #6]
 8001128:	4613      	mov	r3, r2
 800112a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	230a      	movs	r3, #10
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	1d7b      	adds	r3, r7, #5
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2310      	movs	r3, #16
 800113c:	21a0      	movs	r1, #160	; 0xa0
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <at24c_WriteOneByte+0x38>)
 8001140:	f004 f9a0 	bl	8005484 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001144:	2005      	movs	r0, #5
 8001146:	f003 f809 	bl	800415c <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001ec 	.word	0x200001ec

08001158 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800115e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001162:	f7ff ffbf 	bl	80010e4 <at24c_ReadOneByte>
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b55      	cmp	r3, #85	; 0x55
 800116e:	d101      	bne.n	8001174 <at24c_Check+0x1c>
 8001170:	2300      	movs	r3, #0
 8001172:	e010      	b.n	8001196 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001174:	2155      	movs	r1, #85	; 0x55
 8001176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800117a:	f7ff ffcf 	bl	800111c <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800117e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001182:	f7ff ffaf 	bl	80010e4 <at24c_ReadOneByte>
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b55      	cmp	r3, #85	; 0x55
 800118e:	d101      	bne.n	8001194 <at24c_Check+0x3c>
 8001190:	2300      	movs	r3, #0
 8001192:	e000      	b.n	8001196 <at24c_Check+0x3e>
	}
	return 1;
 8001194:	2301      	movs	r3, #1
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800119e:	b590      	push	{r4, r7, lr}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	6039      	str	r1, [r7, #0]
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	4613      	mov	r3, r2
 80011ac:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011ae:	e00d      	b.n	80011cc <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	80fa      	strh	r2, [r7, #6]
 80011b6:	683c      	ldr	r4, [r7, #0]
 80011b8:	1c62      	adds	r2, r4, #1
 80011ba:	603a      	str	r2, [r7, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff91 	bl	80010e4 <at24c_ReadOneByte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ee      	bne.n	80011b0 <at24c_Read+0x12>
	}
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}

080011dc <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011ec:	e00c      	b.n	8001208 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff90 	bl	800111c <at24c_WriteOneByte>
		WriteAddr++;
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	3301      	adds	r3, #1
 8001200:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	80ba      	strh	r2, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ed      	bne.n	80011ee <at24c_Write+0x12>
	}
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <button_init+0x14>)
 8001226:	f003 ffcf 	bl	80051c8 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020c00 	.word	0x40020c00

08001234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_DMA_Init+0x3c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <MX_DMA_Init+0x3c>)
 8001244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_DMA_Init+0x3c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2038      	movs	r0, #56	; 0x38
 800125c:	f003 fadf 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001260:	2038      	movs	r0, #56	; 0x38
 8001262:	f003 faf8 	bl	8004856 <HAL_NVIC_EnableIRQ>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <fsm>:
#include "fsm.h"

void fsm() {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af02      	add	r7, sp, #8
    switch (game_status) {
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <fsm+0x104>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d05b      	beq.n	800133a <fsm+0xc6>
 8001282:	2b02      	cmp	r3, #2
 8001284:	dc70      	bgt.n	8001368 <fsm+0xf4>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <fsm+0x1c>
 800128a:	2b01      	cmp	r3, #1
 800128c:	d00a      	beq.n	80012a4 <fsm+0x30>
            lcd_Clear(BLACK);
            game_status = INIT;
        }
        break;
    default:
        break;
 800128e:	e06b      	b.n	8001368 <fsm+0xf4>
        drawGameBoard();
 8001290:	f000 f9b2 	bl	80015f8 <drawGameBoard>
        drawControlPad();
 8001294:	f000 f9d4 	bl	8001640 <drawControlPad>
        generateFruit();
 8001298:	f000 f970 	bl	800157c <generateFruit>
        game_status = GAME_START;
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <fsm+0x104>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
        break;
 80012a2:	e066      	b.n	8001372 <fsm+0xfe>
        snake_movement();
 80012a4:	f000 fa90 	bl	80017c8 <snake_movement>
        drawGameBoard();
 80012a8:	f000 f9a6 	bl	80015f8 <drawGameBoard>
        if (snake_x_coord + 6 >= fruit_x_coord - 10 && snake_x_coord + 6 <= fruit_x_coord + 10 && snake_y_coord + 12  >= fruit_y_coord - 10 && snake_y_coord + 12 <= fruit_y_coord + 10) {
 80012ac:	4b33      	ldr	r3, [pc, #204]	; (800137c <fsm+0x108>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1d9a      	adds	r2, r3, #6
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <fsm+0x10c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3b0a      	subs	r3, #10
 80012b8:	429a      	cmp	r2, r3
 80012ba:	db2a      	blt.n	8001312 <fsm+0x9e>
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <fsm+0x10c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1d1a      	adds	r2, r3, #4
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <fsm+0x108>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	db23      	blt.n	8001312 <fsm+0x9e>
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <fsm+0x110>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f103 020c 	add.w	r2, r3, #12
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <fsm+0x114>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3b0a      	subs	r3, #10
 80012d8:	429a      	cmp	r2, r3
 80012da:	db1a      	blt.n	8001312 <fsm+0x9e>
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <fsm+0x110>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <fsm+0x114>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	da13      	bge.n	8001312 <fsm+0x9e>
            is_fruit_eaten = 1;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <fsm+0x118>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
            score += 10;
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <fsm+0x11c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	330a      	adds	r3, #10
 80012f6:	4a26      	ldr	r2, [pc, #152]	; (8001390 <fsm+0x11c>)
 80012f8:	6013      	str	r3, [r2, #0]
            lcd_DrawCircle(fruit_x_coord, fruit_y_coord, BLACK, 10, 1);
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <fsm+0x10c>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <fsm+0x114>)
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	230a      	movs	r3, #10
 8001308:	2200      	movs	r2, #0
 800130a:	f001 f96a 	bl	80025e2 <lcd_DrawCircle>
            generateFruit(); 
 800130e:	f000 f935 	bl	800157c <generateFruit>
        if (snake_x_coord >= 216 || snake_x_coord <= 10 || snake_y_coord >= 196 || snake_y_coord <= 10) {
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <fsm+0x108>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2bd7      	cmp	r3, #215	; 0xd7
 8001318:	dc0b      	bgt.n	8001332 <fsm+0xbe>
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <fsm+0x108>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b0a      	cmp	r3, #10
 8001320:	dd07      	ble.n	8001332 <fsm+0xbe>
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <fsm+0x110>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2bc3      	cmp	r3, #195	; 0xc3
 8001328:	dc03      	bgt.n	8001332 <fsm+0xbe>
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <fsm+0x110>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b0a      	cmp	r3, #10
 8001330:	dc1c      	bgt.n	800136c <fsm+0xf8>
            game_status = GAME_OVER;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <fsm+0x104>)
 8001334:	2202      	movs	r2, #2
 8001336:	601a      	str	r2, [r3, #0]
        break;
 8001338:	e018      	b.n	800136c <fsm+0xf8>
        printGameOver();
 800133a:	f000 fa01 	bl	8001740 <printGameOver>
        if (restartGame()) {
 800133e:	f000 f8f9 	bl	8001534 <restartGame>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <fsm+0xfc>
            snake_x_coord = 100;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <fsm+0x108>)
 800134a:	2264      	movs	r2, #100	; 0x64
 800134c:	601a      	str	r2, [r3, #0]
            snake_y_coord = 100;
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <fsm+0x110>)
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	601a      	str	r2, [r3, #0]
            score = 0;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <fsm+0x11c>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
            lcd_Clear(BLACK);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fc8e 	bl	8001c7c <lcd_Clear>
            game_status = INIT;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <fsm+0x104>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
        break;
 8001366:	e003      	b.n	8001370 <fsm+0xfc>
        break;
 8001368:	bf00      	nop
 800136a:	e002      	b.n	8001372 <fsm+0xfe>
        break;
 800136c:	bf00      	nop
 800136e:	e000      	b.n	8001372 <fsm+0xfe>
        break;
 8001370:	bf00      	nop
    }
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001d4 	.word	0x200001d4
 800137c:	20000000 	.word	0x20000000
 8001380:	200001d8 	.word	0x200001d8
 8001384:	20000004 	.word	0x20000004
 8001388:	200001dc 	.word	0x200001dc
 800138c:	200001e0 	.word	0x200001e0
 8001390:	200001e4 	.word	0x200001e4

08001394 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <MX_FSMC_Init+0xec>)
 80013c2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013c6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_FSMC_Init+0xec>)
 80013ca:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <MX_FSMC_Init+0xf0>)
 80013cc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_FSMC_Init+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_FSMC_Init+0xec>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_FSMC_Init+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_FSMC_Init+0xec>)
 80013e2:	2210      	movs	r2, #16
 80013e4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_FSMC_Init+0xec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_FSMC_Init+0xec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_FSMC_Init+0xec>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_FSMC_Init+0xec>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_FSMC_Init+0xec>)
 8001400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_FSMC_Init+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_FSMC_Init+0xec>)
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_FSMC_Init+0xec>)
 8001416:	2200      	movs	r2, #0
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_FSMC_Init+0xec>)
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_FSMC_Init+0xec>)
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001426:	230f      	movs	r3, #15
 8001428:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800142a:	230f      	movs	r3, #15
 800142c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800142e:	233c      	movs	r3, #60	; 0x3c
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001436:	2310      	movs	r3, #16
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800143a:	2311      	movs	r3, #17
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800143e:	2300      	movs	r3, #0
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001442:	2308      	movs	r3, #8
 8001444:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001446:	230f      	movs	r3, #15
 8001448:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800144a:	2309      	movs	r3, #9
 800144c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001452:	2310      	movs	r3, #16
 8001454:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001456:	2311      	movs	r3, #17
 8001458:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800145e:	463a      	mov	r2, r7
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_FSMC_Init+0xec>)
 8001468:	f005 fd9c 	bl	8006fa4 <HAL_SRAM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001472:	f001 fb58 	bl	8002b26 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001476:	bf00      	nop
 8001478:	3738      	adds	r7, #56	; 0x38
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000180 	.word	0x20000180
 8001484:	a0000104 	.word	0xa0000104

08001488 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_FSMC_MspInit+0x88>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d131      	bne.n	8001508 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_FSMC_MspInit+0x88>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_FSMC_MspInit+0x8c>)
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_FSMC_MspInit+0x8c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_FSMC_MspInit+0x8c>)
 80014bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014c6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014d8:	230c      	movs	r3, #12
 80014da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <HAL_FSMC_MspInit+0x90>)
 80014e2:	f003 fcbd 	bl	8004e60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014e6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014f8:	230c      	movs	r3, #12
 80014fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <HAL_FSMC_MspInit+0x94>)
 8001502:	f003 fcad 	bl	8004e60 <HAL_GPIO_Init>
 8001506:	e000      	b.n	800150a <HAL_FSMC_MspInit+0x82>
    return;
 8001508:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200001d0 	.word	0x200001d0
 8001514:	40023800 	.word	0x40023800
 8001518:	40021000 	.word	0x40021000
 800151c:	40020c00 	.word	0x40020c00

08001520 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001528:	f7ff ffae 	bl	8001488 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <restartGame>:
    if (touch_GetX() > 150 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 290) {
        return RIGHT;
    }
}

uint8_t restartGame() {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    if (touch_IsTouched()) return 0;
 8001538:	f002 fd4a 	bl	8003fd0 <touch_IsTouched>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <restartGame+0x12>
 8001542:	2300      	movs	r3, #0
 8001544:	e017      	b.n	8001576 <restartGame+0x42>
    return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 180 && touch_GetY() < 230;
 8001546:	f002 fd55 	bl	8003ff4 <touch_GetX>
 800154a:	4603      	mov	r3, r0
 800154c:	2b3c      	cmp	r3, #60	; 0x3c
 800154e:	d910      	bls.n	8001572 <restartGame+0x3e>
 8001550:	f002 fd50 	bl	8003ff4 <touch_GetX>
 8001554:	4603      	mov	r3, r0
 8001556:	2bb3      	cmp	r3, #179	; 0xb3
 8001558:	d80b      	bhi.n	8001572 <restartGame+0x3e>
 800155a:	f002 fd57 	bl	800400c <touch_GetY>
 800155e:	4603      	mov	r3, r0
 8001560:	2bb4      	cmp	r3, #180	; 0xb4
 8001562:	d906      	bls.n	8001572 <restartGame+0x3e>
 8001564:	f002 fd52 	bl	800400c <touch_GetY>
 8001568:	4603      	mov	r3, r0
 800156a:	2be5      	cmp	r3, #229	; 0xe5
 800156c:	d801      	bhi.n	8001572 <restartGame+0x3e>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <restartGame+0x40>
 8001572:	2300      	movs	r3, #0
 8001574:	b2db      	uxtb	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <generateFruit>:

void generateFruit() {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af02      	add	r7, sp, #8
    // rand()
    fruit_x_coord = (rand() % (230 - 15 + 1)) + 15; 
 8001582:	f006 fe0b 	bl	800819c <rand>
 8001586:	4602      	mov	r2, r0
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <generateFruit+0x68>)
 800158a:	fb83 1302 	smull	r1, r3, r3, r2
 800158e:	1199      	asrs	r1, r3, #6
 8001590:	17d3      	asrs	r3, r2, #31
 8001592:	1acb      	subs	r3, r1, r3
 8001594:	21d8      	movs	r1, #216	; 0xd8
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	330f      	adds	r3, #15
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <generateFruit+0x6c>)
 80015a0:	6013      	str	r3, [r2, #0]
    fruit_y_coord = (rand() % (210 - 15 + 1)) + 15;
 80015a2:	f006 fdfb 	bl	800819c <rand>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <generateFruit+0x70>)
 80015aa:	fb83 1302 	smull	r1, r3, r3, r2
 80015ae:	1199      	asrs	r1, r3, #6
 80015b0:	17d3      	asrs	r3, r2, #31
 80015b2:	1acb      	subs	r3, r1, r3
 80015b4:	21c4      	movs	r1, #196	; 0xc4
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	330f      	adds	r3, #15
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <generateFruit+0x74>)
 80015c0:	6013      	str	r3, [r2, #0]

    lcd_DrawCircle(fruit_x_coord, fruit_y_coord, RED, 6, 1);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <generateFruit+0x6c>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <generateFruit+0x74>)
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2306      	movs	r3, #6
 80015d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015d4:	f001 f805 	bl	80025e2 <lcd_DrawCircle>

    is_fruit_eaten = 0;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <generateFruit+0x78>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	4bda12f7 	.word	0x4bda12f7
 80015e8:	200001d8 	.word	0x200001d8
 80015ec:	5397829d 	.word	0x5397829d
 80015f0:	200001dc 	.word	0x200001dc
 80015f4:	200001e0 	.word	0x200001e0

080015f8 <drawGameBoard>:
		default:
			break;
	}
}

void drawGameBoard() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af04      	add	r7, sp, #16
    // lcd_Fill(0, 0, 240, 220, BLACK);
    lcd_DrawRectangle(10, 10, 230, 220, RED);
 80015fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	23dc      	movs	r3, #220	; 0xdc
 8001606:	22e6      	movs	r2, #230	; 0xe6
 8001608:	210a      	movs	r1, #10
 800160a:	200a      	movs	r0, #10
 800160c:	f000 fc39 	bl	8001e82 <lcd_DrawRectangle>

    lcd_ShowIntNum(snake_x_coord, snake_y_coord, 0, 1, GREEN, BLACK, 24);
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <drawGameBoard+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b298      	uxth	r0, r3
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <drawGameBoard+0x44>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b299      	uxth	r1, r3
 800161c:	2318      	movs	r3, #24
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	2300      	movs	r3, #0
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	2200      	movs	r2, #0
 800162e:	f000 fd4b 	bl	80020c8 <lcd_ShowIntNum>
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <drawControlPad>:

void drawControlPad() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af04      	add	r7, sp, #16
    char str[10];
    lcd_Fill(0, 220, 240, 320, BLACK);
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800164e:	22f0      	movs	r2, #240	; 0xf0
 8001650:	21dc      	movs	r1, #220	; 0xdc
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fb44 	bl	8001ce0 <lcd_Fill>

    lcd_Fill(50, 250, 90, 290, CYAN);
 8001658:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001662:	225a      	movs	r2, #90	; 0x5a
 8001664:	21fa      	movs	r1, #250	; 0xfa
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f000 fb3a 	bl	8001ce0 <lcd_Fill>
    strcpy(str, "L");
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	224c      	movs	r2, #76	; 0x4c
 8001670:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(64, 260, str, RED, CYAN, 24, 0);
 8001672:	1d3a      	adds	r2, r7, #4
 8001674:	2300      	movs	r3, #0
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2318      	movs	r3, #24
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001686:	f44f 7182 	mov.w	r1, #260	; 0x104
 800168a:	2040      	movs	r0, #64	; 0x40
 800168c:	f001 f816 	bl	80026bc <lcd_ShowStr>

    lcd_Fill(100, 230, 140, 270, CYAN);
 8001690:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800169a:	228c      	movs	r2, #140	; 0x8c
 800169c:	21e6      	movs	r1, #230	; 0xe6
 800169e:	2064      	movs	r0, #100	; 0x64
 80016a0:	f000 fb1e 	bl	8001ce0 <lcd_Fill>
    strcpy(str, "U");
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2255      	movs	r2, #85	; 0x55
 80016a8:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(114, 240, str, RED, CYAN, 24, 0);
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	2300      	movs	r3, #0
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2318      	movs	r3, #24
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016be:	21f0      	movs	r1, #240	; 0xf0
 80016c0:	2072      	movs	r0, #114	; 0x72
 80016c2:	f000 fffb 	bl	80026bc <lcd_ShowStr>

    lcd_Fill(100, 280, 140, 320, CYAN);
 80016c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016d0:	228c      	movs	r2, #140	; 0x8c
 80016d2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016d6:	2064      	movs	r0, #100	; 0x64
 80016d8:	f000 fb02 	bl	8001ce0 <lcd_Fill>
    strcpy(str, "D");
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2244      	movs	r2, #68	; 0x44
 80016e0:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(114, 290, str, RED, CYAN, 24, 0);
 80016e2:	1d3a      	adds	r2, r7, #4
 80016e4:	2300      	movs	r3, #0
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	2318      	movs	r3, #24
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016f6:	f44f 7191 	mov.w	r1, #290	; 0x122
 80016fa:	2072      	movs	r0, #114	; 0x72
 80016fc:	f000 ffde 	bl	80026bc <lcd_ShowStr>

    lcd_Fill(150, 250, 190, 290, CYAN);
 8001700:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	f44f 7391 	mov.w	r3, #290	; 0x122
 800170a:	22be      	movs	r2, #190	; 0xbe
 800170c:	21fa      	movs	r1, #250	; 0xfa
 800170e:	2096      	movs	r0, #150	; 0x96
 8001710:	f000 fae6 	bl	8001ce0 <lcd_Fill>
    strcpy(str, "R");
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2252      	movs	r2, #82	; 0x52
 8001718:	801a      	strh	r2, [r3, #0]
    lcd_ShowStr(164, 260, str, RED, CYAN, 24, 0);
 800171a:	1d3a      	adds	r2, r7, #4
 800171c:	2300      	movs	r3, #0
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	2318      	movs	r3, #24
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800172e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001732:	20a4      	movs	r0, #164	; 0xa4
 8001734:	f000 ffc2 	bl	80026bc <lcd_ShowStr>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <printGameOver>:

void printGameOver() {
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af04      	add	r7, sp, #16
    char str[10];

    lcd_Fill(0, 0, 240, 320, RED);
 8001746:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001750:	22f0      	movs	r2, #240	; 0xf0
 8001752:	2100      	movs	r1, #0
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fac3 	bl	8001ce0 <lcd_Fill>
    strcpy(str, "GAME OVER");
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <printGameOver+0x80>)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001760:	c303      	stmia	r3!, {r0, r1}
 8001762:	801a      	strh	r2, [r3, #0]
    lcd_StrCenter(0, 100, str, YELLOW, RED, 24, 0);
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	2300      	movs	r3, #0
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2318      	movs	r3, #24
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001778:	2164      	movs	r1, #100	; 0x64
 800177a:	2000      	movs	r0, #0
 800177c:	f001 f802 	bl	8002784 <lcd_StrCenter>

    lcd_Fill(60, 180, 180, 230, GBLUE);
 8001780:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	23e6      	movs	r3, #230	; 0xe6
 8001788:	22b4      	movs	r2, #180	; 0xb4
 800178a:	21b4      	movs	r1, #180	; 0xb4
 800178c:	203c      	movs	r0, #60	; 0x3c
 800178e:	f000 faa7 	bl	8001ce0 <lcd_Fill>
    strcpy(str, "RESTART");
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <printGameOver+0x84>)
 8001796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800179a:	e883 0003 	stmia.w	r3, {r0, r1}
    lcd_ShowStr(80, 190, str, RED, BLACK, 24, 1);
 800179e:	1d3a      	adds	r2, r7, #4
 80017a0:	2301      	movs	r3, #1
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2318      	movs	r3, #24
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017b0:	21be      	movs	r1, #190	; 0xbe
 80017b2:	2050      	movs	r0, #80	; 0x50
 80017b4:	f000 ff82 	bl	80026bc <lcd_ShowStr>
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	080093e8 	.word	0x080093e8
 80017c4:	080093f4 	.word	0x080093f4

080017c8 <snake_movement>:

void snake_movement() {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af04      	add	r7, sp, #16
    counter_game = (counter_game + 1) % 1;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <snake_movement+0x8c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

    if (counter_game == 0) {
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <snake_movement+0x8c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d138      	bne.n	800184e <snake_movement+0x86>
        switch (snake_direction) {
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <snake_movement+0x90>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d822      	bhi.n	800182c <snake_movement+0x64>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <snake_movement+0x24>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	08001815 	.word	0x08001815
 80017f0:	080017fd 	.word	0x080017fd
 80017f4:	08001821 	.word	0x08001821
 80017f8:	08001809 	.word	0x08001809
        case UP:
            snake_y_coord--;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <snake_movement+0x94>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <snake_movement+0x94>)
 8001804:	6013      	str	r3, [r2, #0]
            break;
 8001806:	e012      	b.n	800182e <snake_movement+0x66>
        case DOWN:
            snake_y_coord++;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <snake_movement+0x94>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <snake_movement+0x94>)
 8001810:	6013      	str	r3, [r2, #0]
            break;
 8001812:	e00c      	b.n	800182e <snake_movement+0x66>
        case LEFT:
            snake_x_coord--;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <snake_movement+0x98>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3b01      	subs	r3, #1
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <snake_movement+0x98>)
 800181c:	6013      	str	r3, [r2, #0]
            break;
 800181e:	e006      	b.n	800182e <snake_movement+0x66>
        case RIGHT:
            snake_x_coord++;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <snake_movement+0x98>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <snake_movement+0x98>)
 8001828:	6013      	str	r3, [r2, #0]
            break;
 800182a:	e000      	b.n	800182e <snake_movement+0x66>
        default:
            break;
 800182c:	bf00      	nop
        }  

        lcd_ShowIntNum(170, 300, score, 3, YELLOW, BLACK, 24);
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <snake_movement+0x9c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29a      	uxth	r2, r3
 8001834:	2318      	movs	r3, #24
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2303      	movs	r3, #3
 8001844:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001848:	20aa      	movs	r0, #170	; 0xaa
 800184a:	f000 fc3d 	bl	80020c8 <lcd_ShowIntNum>
        // lcd_ShowIntNum(150, 10, snake_x_coord, 3, GREEN, BLACK, 24);
        // lcd_ShowIntNum(200, 10, snake_y_coord, 3, GREEN, BLACK, 24);
    }
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200001e8 	.word	0x200001e8
 8001858:	20000008 	.word	0x20000008
 800185c:	20000004 	.word	0x20000004
 8001860:	20000000 	.word	0x20000000
 8001864:	200001e4 	.word	0x200001e4

08001868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	; 0x38
 800186c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a7d      	ldr	r2, [pc, #500]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a76      	ldr	r2, [pc, #472]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b74      	ldr	r3, [pc, #464]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a6f      	ldr	r2, [pc, #444]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a68      	ldr	r2, [pc, #416]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b62      	ldr	r3, [pc, #392]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a61      	ldr	r2, [pc, #388]	; (8001a7c <MX_GPIO_Init+0x214>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a5a      	ldr	r2, [pc, #360]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <MX_GPIO_Init+0x214>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <MX_GPIO_Init+0x214>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a53      	ldr	r2, [pc, #332]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <MX_GPIO_Init+0x214>)
 800194c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <MX_GPIO_Init+0x214>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2170      	movs	r1, #112	; 0x70
 8001962:	4847      	ldr	r0, [pc, #284]	; (8001a80 <MX_GPIO_Init+0x218>)
 8001964:	f003 fc30 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800196e:	4845      	ldr	r0, [pc, #276]	; (8001a84 <MX_GPIO_Init+0x21c>)
 8001970:	f003 fc2a 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800197a:	4843      	ldr	r0, [pc, #268]	; (8001a88 <MX_GPIO_Init+0x220>)
 800197c:	f003 fc24 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001986:	4841      	ldr	r0, [pc, #260]	; (8001a8c <MX_GPIO_Init+0x224>)
 8001988:	f003 fc1e 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2108      	movs	r1, #8
 8001990:	483f      	ldr	r0, [pc, #252]	; (8001a90 <MX_GPIO_Init+0x228>)
 8001992:	f003 fc19 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001996:	2370      	movs	r3, #112	; 0x70
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4834      	ldr	r0, [pc, #208]	; (8001a80 <MX_GPIO_Init+0x218>)
 80019ae:	f003 fa57 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80019b2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	482e      	ldr	r0, [pc, #184]	; (8001a84 <MX_GPIO_Init+0x21c>)
 80019cc:	f003 fa48 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80019d0:	23c0      	movs	r3, #192	; 0xc0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	4619      	mov	r1, r3
 80019e2:	482a      	ldr	r0, [pc, #168]	; (8001a8c <MX_GPIO_Init+0x224>)
 80019e4:	f003 fa3c 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80019e8:	2330      	movs	r3, #48	; 0x30
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4822      	ldr	r0, [pc, #136]	; (8001a84 <MX_GPIO_Init+0x21c>)
 80019fc:	f003 fa30 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001a00:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	481b      	ldr	r0, [pc, #108]	; (8001a88 <MX_GPIO_Init+0x220>)
 8001a1a:	f003 fa21 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001a1e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <MX_GPIO_Init+0x21c>)
 8001a34:	f003 fa14 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <MX_GPIO_Init+0x224>)
 8001a52:	f003 fa05 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001a56:	2308      	movs	r3, #8
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <MX_GPIO_Init+0x228>)
 8001a6e:	f003 f9f7 	bl	8004e60 <HAL_GPIO_Init>

}
 8001a72:	bf00      	nop
 8001a74:	3738      	adds	r7, #56	; 0x38
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40021800 	.word	0x40021800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020c00 	.word	0x40020c00

08001a94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <MX_I2C1_Init+0x54>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa0:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_I2C1_Init+0x58>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ad2:	f003 fb93 	bl	80051fc <HAL_I2C_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001adc:	f001 f823 	bl	8002b26 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200001ec 	.word	0x200001ec
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	000186a0 	.word	0x000186a0

08001af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_I2C_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_I2C_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_I2C_MspInit+0x88>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_I2C_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2e:	23c0      	movs	r3, #192	; 0xc0
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <HAL_I2C_MspInit+0x8c>)
 8001b4a:	f003 f989 	bl	8004e60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_I2C_MspInit+0x88>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_I2C_MspInit+0x88>)
 8001b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_I2C_MspInit+0x88>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40005400 	.word	0x40005400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020400 	.word	0x40020400

08001b80 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <LCD_WR_REG+0x1c>)
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	8013      	strh	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	600ffffe 	.word	0x600ffffe

08001ba0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <LCD_WR_DATA+0x1c>)
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	8053      	strh	r3, [r2, #2]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	600ffffe 	.word	0x600ffffe

08001bc0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <LCD_RD_DATA+0x20>)
 8001bc8:	885b      	ldrh	r3, [r3, #2]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	b29b      	uxth	r3, r3
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	600ffffe 	.word	0x600ffffe

08001be4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	80fb      	strh	r3, [r7, #6]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001c02:	202a      	movs	r0, #42	; 0x2a
 8001c04:	f7ff ffbc 	bl	8001b80 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffc6 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ffc0 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffba 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ffb4 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001c38:	202b      	movs	r0, #43	; 0x2b
 8001c3a:	f7ff ffa1 	bl	8001b80 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001c3e:	88bb      	ldrh	r3, [r7, #4]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ffab 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ffa5 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001c56:	883b      	ldrh	r3, [r7, #0]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff9f 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff99 	bl	8001ba0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001c6e:	202c      	movs	r0, #44	; 0x2c
 8001c70:	f7ff ff86 	bl	8001b80 <LCD_WR_REG>
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}

08001c7c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <lcd_Clear+0x60>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <lcd_Clear+0x60>)
 8001c90:	885b      	ldrh	r3, [r3, #2]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff ffa3 	bl	8001be4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	81fb      	strh	r3, [r7, #14]
 8001ca2:	e011      	b.n	8001cc8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	81bb      	strh	r3, [r7, #12]
 8001ca8:	e006      	b.n	8001cb8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff77 	bl	8001ba0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001cb2:	89bb      	ldrh	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	81bb      	strh	r3, [r7, #12]
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <lcd_Clear+0x60>)
 8001cba:	885b      	ldrh	r3, [r3, #2]
 8001cbc:	89ba      	ldrh	r2, [r7, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d3f3      	bcc.n	8001caa <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	81fb      	strh	r3, [r7, #14]
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <lcd_Clear+0x60>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	89fa      	ldrh	r2, [r7, #14]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3e8      	bcc.n	8001ca4 <lcd_Clear+0x28>
		}
	}
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000240 	.word	0x20000240

08001ce0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4623      	mov	r3, r4
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80bb      	strh	r3, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	883b      	ldrh	r3, [r7, #0]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	88b9      	ldrh	r1, [r7, #4]
 8001d0c:	88f8      	ldrh	r0, [r7, #6]
 8001d0e:	f7ff ff69 	bl	8001be4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	81fb      	strh	r3, [r7, #14]
 8001d16:	e010      	b.n	8001d3a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	81bb      	strh	r3, [r7, #12]
 8001d1c:	e006      	b.n	8001d2c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001d1e:	8c3b      	ldrh	r3, [r7, #32]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff3d 	bl	8001ba0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001d26:	89bb      	ldrh	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	81bb      	strh	r3, [r7, #12]
 8001d2c:	89ba      	ldrh	r2, [r7, #12]
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3f4      	bcc.n	8001d1e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001d34:	89fb      	ldrh	r3, [r7, #14]
 8001d36:	3301      	adds	r3, #1
 8001d38:	81fb      	strh	r3, [r7, #14]
 8001d3a:	89fa      	ldrh	r2, [r7, #14]
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3ea      	bcc.n	8001d18 <lcd_Fill+0x38>
		}
	}
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}

08001d4c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
 8001d56:	460b      	mov	r3, r1
 8001d58:	80bb      	strh	r3, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	88b9      	ldrh	r1, [r7, #4]
 8001d64:	88f8      	ldrh	r0, [r7, #6]
 8001d66:	f7ff ff3d 	bl	8001be4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff17 	bl	8001ba0 <LCD_WR_DATA>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001d7a:	b590      	push	{r4, r7, lr}
 8001d7c:	b08d      	sub	sp, #52	; 0x34
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4604      	mov	r4, r0
 8001d82:	4608      	mov	r0, r1
 8001d84:	4611      	mov	r1, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	80fb      	strh	r3, [r7, #6]
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	80bb      	strh	r3, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001da8:	883a      	ldrh	r2, [r7, #0]
 8001daa:	88bb      	ldrh	r3, [r7, #4]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	dd02      	ble.n	8001dc4 <lcd_DrawLine+0x4a>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e00b      	b.n	8001ddc <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <lcd_DrawLine+0x56>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e005      	b.n	8001ddc <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	425b      	negs	r3, r3
 8001dda:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dd02      	ble.n	8001de8 <lcd_DrawLine+0x6e>
 8001de2:	2301      	movs	r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e00b      	b.n	8001e00 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <lcd_DrawLine+0x7a>
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e005      	b.n	8001e00 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dd02      	ble.n	8001e0e <lcd_DrawLine+0x94>
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e001      	b.n	8001e12 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001e16:	e02b      	b.n	8001e70 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	b291      	uxth	r1, r2
 8001e20:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff91 	bl	8001d4c <lcd_DrawPoint>
		xerr+=delta_x;
 8001e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	4413      	add	r3, r2
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dd07      	ble.n	8001e52 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dd07      	ble.n	8001e6a <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001e70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dacf      	bge.n	8001e18 <lcd_DrawLine+0x9e>
		}
	}
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3734      	adds	r7, #52	; 0x34
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}

08001e82 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001e82:	b590      	push	{r4, r7, lr}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af02      	add	r7, sp, #8
 8001e88:	4604      	mov	r4, r0
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4623      	mov	r3, r4
 8001e92:	80fb      	strh	r3, [r7, #6]
 8001e94:	4603      	mov	r3, r0
 8001e96:	80bb      	strh	r3, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001ea0:	88bc      	ldrh	r4, [r7, #4]
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	88b9      	ldrh	r1, [r7, #4]
 8001ea6:	88f8      	ldrh	r0, [r7, #6]
 8001ea8:	8b3b      	ldrh	r3, [r7, #24]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	4623      	mov	r3, r4
 8001eae:	f7ff ff64 	bl	8001d7a <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001eb2:	883c      	ldrh	r4, [r7, #0]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	88b9      	ldrh	r1, [r7, #4]
 8001eb8:	88f8      	ldrh	r0, [r7, #6]
 8001eba:	8b3b      	ldrh	r3, [r7, #24]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	f7ff ff5b 	bl	8001d7a <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001ec4:	883c      	ldrh	r4, [r7, #0]
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	8839      	ldrh	r1, [r7, #0]
 8001eca:	88f8      	ldrh	r0, [r7, #6]
 8001ecc:	8b3b      	ldrh	r3, [r7, #24]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	f7ff ff52 	bl	8001d7a <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001ed6:	883c      	ldrh	r4, [r7, #0]
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	88b9      	ldrh	r1, [r7, #4]
 8001edc:	8878      	ldrh	r0, [r7, #2]
 8001ede:	8b3b      	ldrh	r3, [r7, #24]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	f7ff ff49 	bl	8001d7a <lcd_DrawLine>
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	4603      	mov	r3, r0
 8001f04:	80bb      	strh	r3, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	70fb      	strb	r3, [r7, #3]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001f16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	fb12 f303 	smulbb	r3, r2, r3
 8001f46:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	3b20      	subs	r3, #32
 8001f4c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4413      	add	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29c      	uxth	r4, r3
 8001f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	88bb      	ldrh	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	88b9      	ldrh	r1, [r7, #4]
 8001f6e:	88f8      	ldrh	r0, [r7, #6]
 8001f70:	4622      	mov	r2, r4
 8001f72:	f7ff fe37 	bl	8001be4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	827b      	strh	r3, [r7, #18]
 8001f7a:	e07a      	b.n	8002072 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d028      	beq.n	8001fd6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d108      	bne.n	8001f9e <lcd_ShowChar+0xae>
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	8a7b      	ldrh	r3, [r7, #18]
 8001f90:	493c      	ldr	r1, [pc, #240]	; (8002084 <lcd_ShowChar+0x194>)
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	440a      	add	r2, r1
 8001f96:	4413      	add	r3, r2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	75fb      	strb	r3, [r7, #23]
 8001f9c:	e01b      	b.n	8001fd6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fa2:	2b18      	cmp	r3, #24
 8001fa4:	d10b      	bne.n	8001fbe <lcd_ShowChar+0xce>
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	8a79      	ldrh	r1, [r7, #18]
 8001faa:	4837      	ldr	r0, [pc, #220]	; (8002088 <lcd_ShowChar+0x198>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4403      	add	r3, r0
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	75fb      	strb	r3, [r7, #23]
 8001fbc:	e00b      	b.n	8001fd6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001fbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d15a      	bne.n	800207c <lcd_ShowChar+0x18c>
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	4930      	ldr	r1, [pc, #192]	; (800208c <lcd_ShowChar+0x19c>)
 8001fcc:	0192      	lsls	r2, r2, #6
 8001fce:	440a      	add	r2, r1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75bb      	strb	r3, [r7, #22]
 8001fda:	e044      	b.n	8002066 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001fdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d120      	bne.n	8002026 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001fe4:	7dfa      	ldrb	r2, [r7, #23]
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	fa42 f303 	asr.w	r3, r2, r3
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <lcd_ShowChar+0x10e>
 8001ff4:	883b      	ldrh	r3, [r7, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fdd2 	bl	8001ba0 <LCD_WR_DATA>
 8001ffc:	e003      	b.n	8002006 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001ffe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fdcd 	bl	8001ba0 <LCD_WR_DATA>
				m++;
 8002006:	7d7b      	ldrb	r3, [r7, #21]
 8002008:	3301      	adds	r3, #1
 800200a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800200c:	7d7b      	ldrb	r3, [r7, #21]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	fbb3 f1f2 	udiv	r1, r3, r2
 8002014:	fb01 f202 	mul.w	r2, r1, r2
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11f      	bne.n	8002060 <lcd_ShowChar+0x170>
				{
					m=0;
 8002020:	2300      	movs	r3, #0
 8002022:	757b      	strb	r3, [r7, #21]
					break;
 8002024:	e022      	b.n	800206c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002026:	7dfa      	ldrb	r2, [r7, #23]
 8002028:	7dbb      	ldrb	r3, [r7, #22]
 800202a:	fa42 f303 	asr.w	r3, r2, r3
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <lcd_ShowChar+0x152>
 8002036:	883a      	ldrh	r2, [r7, #0]
 8002038:	88b9      	ldrh	r1, [r7, #4]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe85 	bl	8001d4c <lcd_DrawPoint>
				x++;
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	3301      	adds	r3, #1
 8002046:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	8a3b      	ldrh	r3, [r7, #16]
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	429a      	cmp	r2, r3
 8002052:	d105      	bne.n	8002060 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002054:	8a3b      	ldrh	r3, [r7, #16]
 8002056:	80fb      	strh	r3, [r7, #6]
					y++;
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	80bb      	strh	r3, [r7, #4]
					break;
 800205e:	e005      	b.n	800206c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002060:	7dbb      	ldrb	r3, [r7, #22]
 8002062:	3301      	adds	r3, #1
 8002064:	75bb      	strb	r3, [r7, #22]
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b07      	cmp	r3, #7
 800206a:	d9b7      	bls.n	8001fdc <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800206c:	8a7b      	ldrh	r3, [r7, #18]
 800206e:	3301      	adds	r3, #1
 8002070:	827b      	strh	r3, [r7, #18]
 8002072:	8a7a      	ldrh	r2, [r7, #18]
 8002074:	89bb      	ldrh	r3, [r7, #12]
 8002076:	429a      	cmp	r2, r3
 8002078:	d380      	bcc.n	8001f7c <lcd_ShowChar+0x8c>
 800207a:	e000      	b.n	800207e <lcd_ShowChar+0x18e>
		else return;
 800207c:	bf00      	nop
				}
			}
		}
	}
}
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	080094dc 	.word	0x080094dc
 8002088:	08009acc 	.word	0x08009acc
 800208c:	0800ac9c 	.word	0x0800ac9c

08002090 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80020a4:	e004      	b.n	80020b0 <mypow+0x20>
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	71ba      	strb	r2, [r7, #6]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f5      	bne.n	80020a6 <mypow+0x16>
	return result;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af04      	add	r7, sp, #16
 80020ce:	4604      	mov	r4, r0
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4623      	mov	r3, r4
 80020d8:	80fb      	strh	r3, [r7, #6]
 80020da:	4603      	mov	r3, r0
 80020dc:	80bb      	strh	r3, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	807b      	strh	r3, [r7, #2]
 80020e2:	4613      	mov	r3, r2
 80020e4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80020ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e059      	b.n	80021ac <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80020f8:	887c      	ldrh	r4, [r7, #2]
 80020fa:	787a      	ldrb	r2, [r7, #1]
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4619      	mov	r1, r3
 8002108:	200a      	movs	r0, #10
 800210a:	f7ff ffc1 	bl	8002090 <mypow>
 800210e:	4603      	mov	r3, r0
 8002110:	fbb4 f1f3 	udiv	r1, r4, r3
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <lcd_ShowIntNum+0xf8>)
 8002116:	fba3 2301 	umull	r2, r3, r3, r1
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	1aca      	subs	r2, r1, r3
 8002126:	4613      	mov	r3, r2
 8002128:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d121      	bne.n	8002174 <lcd_ShowIntNum+0xac>
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	3b01      	subs	r3, #1
 8002136:	429a      	cmp	r2, r3
 8002138:	da1c      	bge.n	8002174 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800213a:	7b3b      	ldrb	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d117      	bne.n	8002170 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	b29a      	uxth	r2, r3
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	b29b      	uxth	r3, r3
 8002148:	fb12 f303 	smulbb	r3, r2, r3
 800214c:	b29a      	uxth	r2, r3
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	4413      	add	r3, r2
 8002152:	b298      	uxth	r0, r3
 8002154:	8c3a      	ldrh	r2, [r7, #32]
 8002156:	88b9      	ldrh	r1, [r7, #4]
 8002158:	2300      	movs	r3, #0
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	2220      	movs	r2, #32
 800216a:	f7ff fec1 	bl	8001ef0 <lcd_ShowChar>
				continue;
 800216e:	e01a      	b.n	80021a6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002170:	2301      	movs	r3, #1
 8002172:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	b29a      	uxth	r2, r3
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	b29b      	uxth	r3, r3
 800217c:	fb12 f303 	smulbb	r3, r2, r3
 8002180:	b29a      	uxth	r2, r3
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4413      	add	r3, r2
 8002186:	b298      	uxth	r0, r3
 8002188:	7b3b      	ldrb	r3, [r7, #12]
 800218a:	3330      	adds	r3, #48	; 0x30
 800218c:	b2da      	uxtb	r2, r3
 800218e:	8c3c      	ldrh	r4, [r7, #32]
 8002190:	88b9      	ldrh	r1, [r7, #4]
 8002192:	2300      	movs	r3, #0
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4623      	mov	r3, r4
 80021a2:	f7ff fea5 	bl	8001ef0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	3301      	adds	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	787b      	ldrb	r3, [r7, #1]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d3a1      	bcc.n	80020f8 <lcd_ShowIntNum+0x30>
	}
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	cccccccd 	.word	0xcccccccd

080021c4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <lcd_SetDir+0x44>)
 80021e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021e4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <lcd_SetDir+0x44>)
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80021ec:	e006      	b.n	80021fc <lcd_SetDir+0x38>
		lcddev.width=240;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <lcd_SetDir+0x44>)
 80021f0:	22f0      	movs	r2, #240	; 0xf0
 80021f2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <lcd_SetDir+0x44>)
 80021f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021fa:	805a      	strh	r2, [r3, #2]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	20000240 	.word	0x20000240

0800220c <lcd_init>:


void lcd_init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002216:	48aa      	ldr	r0, [pc, #680]	; (80024c0 <lcd_init+0x2b4>)
 8002218:	f002 ffd6 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800221c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002220:	f001 ff9c 	bl	800415c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222a:	48a5      	ldr	r0, [pc, #660]	; (80024c0 <lcd_init+0x2b4>)
 800222c:	f002 ffcc 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002234:	f001 ff92 	bl	800415c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff ffc3 	bl	80021c4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800223e:	20d3      	movs	r0, #211	; 0xd3
 8002240:	f7ff fc9e 	bl	8001b80 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002244:	f7ff fcbc 	bl	8001bc0 <LCD_RD_DATA>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b9d      	ldr	r3, [pc, #628]	; (80024c4 <lcd_init+0x2b8>)
 800224e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002250:	f7ff fcb6 	bl	8001bc0 <LCD_RD_DATA>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b9a      	ldr	r3, [pc, #616]	; (80024c4 <lcd_init+0x2b8>)
 800225a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800225c:	f7ff fcb0 	bl	8001bc0 <LCD_RD_DATA>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b97      	ldr	r3, [pc, #604]	; (80024c4 <lcd_init+0x2b8>)
 8002266:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002268:	4b96      	ldr	r3, [pc, #600]	; (80024c4 <lcd_init+0x2b8>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <lcd_init+0x2b8>)
 8002272:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002274:	f7ff fca4 	bl	8001bc0 <LCD_RD_DATA>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <lcd_init+0x2b8>)
 800227e:	889b      	ldrh	r3, [r3, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <lcd_init+0x2b8>)
 8002286:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002288:	20cf      	movs	r0, #207	; 0xcf
 800228a:	f7ff fc79 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff fc86 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002294:	20c1      	movs	r0, #193	; 0xc1
 8002296:	f7ff fc83 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800229a:	2030      	movs	r0, #48	; 0x30
 800229c:	f7ff fc80 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80022a0:	20ed      	movs	r0, #237	; 0xed
 80022a2:	f7ff fc6d 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80022a6:	2064      	movs	r0, #100	; 0x64
 80022a8:	f7ff fc7a 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f7ff fc77 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80022b2:	2012      	movs	r0, #18
 80022b4:	f7ff fc74 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80022b8:	2081      	movs	r0, #129	; 0x81
 80022ba:	f7ff fc71 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80022be:	20e8      	movs	r0, #232	; 0xe8
 80022c0:	f7ff fc5e 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80022c4:	2085      	movs	r0, #133	; 0x85
 80022c6:	f7ff fc6b 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80022ca:	2010      	movs	r0, #16
 80022cc:	f7ff fc68 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80022d0:	207a      	movs	r0, #122	; 0x7a
 80022d2:	f7ff fc65 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80022d6:	20cb      	movs	r0, #203	; 0xcb
 80022d8:	f7ff fc52 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80022dc:	2039      	movs	r0, #57	; 0x39
 80022de:	f7ff fc5f 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80022e2:	202c      	movs	r0, #44	; 0x2c
 80022e4:	f7ff fc5c 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff fc59 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80022ee:	2034      	movs	r0, #52	; 0x34
 80022f0:	f7ff fc56 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80022f4:	2002      	movs	r0, #2
 80022f6:	f7ff fc53 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80022fa:	20f7      	movs	r0, #247	; 0xf7
 80022fc:	f7ff fc40 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002300:	2020      	movs	r0, #32
 8002302:	f7ff fc4d 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002306:	20ea      	movs	r0, #234	; 0xea
 8002308:	f7ff fc3a 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fc47 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff fc44 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002318:	20c0      	movs	r0, #192	; 0xc0
 800231a:	f7ff fc31 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800231e:	201b      	movs	r0, #27
 8002320:	f7ff fc3e 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002324:	20c1      	movs	r0, #193	; 0xc1
 8002326:	f7ff fc2b 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800232a:	2001      	movs	r0, #1
 800232c:	f7ff fc38 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002330:	20c5      	movs	r0, #197	; 0xc5
 8002332:	f7ff fc25 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002336:	2030      	movs	r0, #48	; 0x30
 8002338:	f7ff fc32 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800233c:	2030      	movs	r0, #48	; 0x30
 800233e:	f7ff fc2f 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002342:	20c7      	movs	r0, #199	; 0xc7
 8002344:	f7ff fc1c 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002348:	20b7      	movs	r0, #183	; 0xb7
 800234a:	f7ff fc29 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800234e:	2036      	movs	r0, #54	; 0x36
 8002350:	f7ff fc16 	bl	8001b80 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002354:	2008      	movs	r0, #8
 8002356:	f7ff fc23 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800235a:	203a      	movs	r0, #58	; 0x3a
 800235c:	f7ff fc10 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002360:	2055      	movs	r0, #85	; 0x55
 8002362:	f7ff fc1d 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002366:	20b1      	movs	r0, #177	; 0xb1
 8002368:	f7ff fc0a 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff fc17 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002372:	201a      	movs	r0, #26
 8002374:	f7ff fc14 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002378:	20b6      	movs	r0, #182	; 0xb6
 800237a:	f7ff fc01 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800237e:	200a      	movs	r0, #10
 8002380:	f7ff fc0e 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002384:	20a2      	movs	r0, #162	; 0xa2
 8002386:	f7ff fc0b 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800238a:	20f2      	movs	r0, #242	; 0xf2
 800238c:	f7ff fbf8 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fc05 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002396:	2026      	movs	r0, #38	; 0x26
 8002398:	f7ff fbf2 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fbff 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80023a2:	20e0      	movs	r0, #224	; 0xe0
 80023a4:	f7ff fbec 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80023a8:	200f      	movs	r0, #15
 80023aa:	f7ff fbf9 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80023ae:	202a      	movs	r0, #42	; 0x2a
 80023b0:	f7ff fbf6 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80023b4:	2028      	movs	r0, #40	; 0x28
 80023b6:	f7ff fbf3 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023ba:	2008      	movs	r0, #8
 80023bc:	f7ff fbf0 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80023c0:	200e      	movs	r0, #14
 80023c2:	f7ff fbed 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023c6:	2008      	movs	r0, #8
 80023c8:	f7ff fbea 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80023cc:	2054      	movs	r0, #84	; 0x54
 80023ce:	f7ff fbe7 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80023d2:	20a9      	movs	r0, #169	; 0xa9
 80023d4:	f7ff fbe4 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80023d8:	2043      	movs	r0, #67	; 0x43
 80023da:	f7ff fbe1 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80023de:	200a      	movs	r0, #10
 80023e0:	f7ff fbde 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80023e4:	200f      	movs	r0, #15
 80023e6:	f7ff fbdb 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fbd8 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff fbd5 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7ff fbd2 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fbcf 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002402:	20e1      	movs	r0, #225	; 0xe1
 8002404:	f7ff fbbc 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fbc9 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800240e:	2015      	movs	r0, #21
 8002410:	f7ff fbc6 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002414:	2017      	movs	r0, #23
 8002416:	f7ff fbc3 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800241a:	2007      	movs	r0, #7
 800241c:	f7ff fbc0 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002420:	2011      	movs	r0, #17
 8002422:	f7ff fbbd 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002426:	2006      	movs	r0, #6
 8002428:	f7ff fbba 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800242c:	202b      	movs	r0, #43	; 0x2b
 800242e:	f7ff fbb7 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002432:	2056      	movs	r0, #86	; 0x56
 8002434:	f7ff fbb4 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002438:	203c      	movs	r0, #60	; 0x3c
 800243a:	f7ff fbb1 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800243e:	2005      	movs	r0, #5
 8002440:	f7ff fbae 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002444:	2010      	movs	r0, #16
 8002446:	f7ff fbab 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800244a:	200f      	movs	r0, #15
 800244c:	f7ff fba8 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002450:	203f      	movs	r0, #63	; 0x3f
 8002452:	f7ff fba5 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002456:	203f      	movs	r0, #63	; 0x3f
 8002458:	f7ff fba2 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800245c:	200f      	movs	r0, #15
 800245e:	f7ff fb9f 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002462:	202b      	movs	r0, #43	; 0x2b
 8002464:	f7ff fb8c 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff fb99 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff fb96 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002474:	2001      	movs	r0, #1
 8002476:	f7ff fb93 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800247a:	203f      	movs	r0, #63	; 0x3f
 800247c:	f7ff fb90 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002480:	202a      	movs	r0, #42	; 0x2a
 8002482:	f7ff fb7d 	bl	8001b80 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff fb8a 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff fb87 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff fb84 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002498:	20ef      	movs	r0, #239	; 0xef
 800249a:	f7ff fb81 	bl	8001ba0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800249e:	2011      	movs	r0, #17
 80024a0:	f7ff fb6e 	bl	8001b80 <LCD_WR_REG>
	HAL_Delay(120);
 80024a4:	2078      	movs	r0, #120	; 0x78
 80024a6:	f001 fe59 	bl	800415c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80024aa:	2029      	movs	r0, #41	; 0x29
 80024ac:	f7ff fb68 	bl	8001b80 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	4804      	ldr	r0, [pc, #16]	; (80024c8 <lcd_init+0x2bc>)
 80024b8:	f002 fe86 	bl	80051c8 <HAL_GPIO_WritePin>
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40020800 	.word	0x40020800
 80024c4:	20000240 	.word	0x20000240
 80024c8:	40020000 	.word	0x40020000

080024cc <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	b298      	uxth	r0, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	8b3a      	ldrh	r2, [r7, #24]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7ff fc29 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	b29b      	uxth	r3, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	b298      	uxth	r0, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	b29a      	uxth	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	8b3a      	ldrh	r2, [r7, #24]
 8002514:	4619      	mov	r1, r3
 8002516:	f7ff fc19 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4413      	add	r3, r2
 8002524:	b298      	uxth	r0, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	b29a      	uxth	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	b29b      	uxth	r3, r3
 8002532:	8b3a      	ldrh	r2, [r7, #24]
 8002534:	4619      	mov	r1, r3
 8002536:	f7ff fc09 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	b29b      	uxth	r3, r3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	b298      	uxth	r0, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	b29a      	uxth	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	8b3a      	ldrh	r2, [r7, #24]
 8002554:	4619      	mov	r1, r3
 8002556:	f7ff fbf9 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	b29a      	uxth	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	b298      	uxth	r0, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4413      	add	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	8b3a      	ldrh	r2, [r7, #24]
 8002574:	4619      	mov	r1, r3
 8002576:	f7ff fbe9 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	b29a      	uxth	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b298      	uxth	r0, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	b29b      	uxth	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	8b3a      	ldrh	r2, [r7, #24]
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff fbd9 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	b29a      	uxth	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	b298      	uxth	r0, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8b3a      	ldrh	r2, [r7, #24]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7ff fbc9 	bl	8001d4c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b298      	uxth	r0, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	8b3a      	ldrh	r2, [r7, #24]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7ff fbb9 	bl	8001d4c <lcd_DrawPoint>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
 80025e6:	af02      	add	r7, sp, #8
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	f1c3 0303 	rsb	r3, r3, #3
 8002602:	613b      	str	r3, [r7, #16]


	if (fill)
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d04f      	beq.n	80026aa <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800260a:	e029      	b.n	8002660 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e00a      	b.n	8002628 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff ff55 	bl	80024cc <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	429a      	cmp	r2, r3
 800262e:	ddf0      	ble.n	8002612 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da06      	bge.n	8002644 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	009a      	lsls	r2, r3, #2
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	3306      	adds	r3, #6
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e00a      	b.n	800265a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	009a      	lsls	r2, r3, #2
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	330a      	adds	r3, #10
 8002652:	613b      	str	r3, [r7, #16]
				y--;
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	3b01      	subs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	429a      	cmp	r2, r3
 8002666:	ddd1      	ble.n	800260c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002668:	e023      	b.n	80026b2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff ff29 	bl	80024cc <_draw_circle_8>
			if (d < 0) {
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da06      	bge.n	800268e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	3306      	adds	r3, #6
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e00a      	b.n	80026a4 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	009a      	lsls	r2, r3, #2
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	330a      	adds	r3, #10
 800269c:	613b      	str	r3, [r7, #16]
				y--;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	61bb      	str	r3, [r7, #24]
			x++;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dddb      	ble.n	800266a <lcd_DrawCircle+0x88>
}
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b08b      	sub	sp, #44	; 0x2c
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	81fb      	strh	r3, [r7, #14]
 80026ca:	460b      	mov	r3, r1
 80026cc:	81bb      	strh	r3, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80026da:	e048      	b.n	800276e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d145      	bne.n	800276e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80026e2:	89fa      	ldrh	r2, [r7, #14]
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <lcd_ShowStr+0xc4>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	1acb      	subs	r3, r1, r3
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dc3f      	bgt.n	8002778 <lcd_ShowStr+0xbc>
 80026f8:	89ba      	ldrh	r2, [r7, #12]
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <lcd_ShowStr+0xc4>)
 80026fc:	885b      	ldrh	r3, [r3, #2]
 80026fe:	4619      	mov	r1, r3
 8002700:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002704:	1acb      	subs	r3, r1, r3
 8002706:	429a      	cmp	r2, r3
 8002708:	dc36      	bgt.n	8002778 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d902      	bls.n	8002718 <lcd_ShowStr+0x5c>
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
 8002716:	e02a      	b.n	800276e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b0d      	cmp	r3, #13
 800271e:	d10b      	bne.n	8002738 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002720:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002724:	b29a      	uxth	r2, r3
 8002726:	89bb      	ldrh	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800272c:	8abb      	ldrh	r3, [r7, #20]
 800272e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	e017      	b.n	8002768 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	88fc      	ldrh	r4, [r7, #6]
 800273e:	89b9      	ldrh	r1, [r7, #12]
 8002740:	89f8      	ldrh	r0, [r7, #14]
 8002742:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	4623      	mov	r3, r4
 8002754:	f7ff fbcc 	bl	8001ef0 <lcd_ShowChar>
					x+=sizey/2;
 8002758:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	b29a      	uxth	r2, r3
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	4413      	add	r3, r2
 8002766:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	3301      	adds	r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1b2      	bne.n	80026dc <lcd_ShowStr+0x20>
 8002776:	e000      	b.n	800277a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002778:	bf00      	nop
			}
		}
	}
}
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	20000240 	.word	0x20000240

08002784 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af04      	add	r7, sp, #16
 800278a:	60ba      	str	r2, [r7, #8]
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	81fb      	strh	r3, [r7, #14]
 8002792:	460b      	mov	r3, r1
 8002794:	81bb      	strh	r3, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	f7fd fd18 	bl	80001d0 <strlen>
 80027a0:	4603      	mov	r3, r0
 80027a2:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <lcd_StrCenter+0x60>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	8afb      	ldrh	r3, [r7, #22]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	0fda      	lsrs	r2, r3, #31
 80027b2:	4413      	add	r3, r2
 80027b4:	105b      	asrs	r3, r3, #1
 80027b6:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80027b8:	89fa      	ldrh	r2, [r7, #14]
 80027ba:	8abb      	ldrh	r3, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	b298      	uxth	r0, r3
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	89b9      	ldrh	r1, [r7, #12]
 80027c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	8c3b      	ldrh	r3, [r7, #32]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f7ff ff70 	bl	80026bc <lcd_ShowStr>
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000240 	.word	0x20000240

080027e8 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <led7_Scan+0x104>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <led7_Scan+0x104>)
 80027f6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <led7_Scan+0x108>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <led7_Scan+0x10c>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <led7_Scan+0x104>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b21b      	sxth	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b21b      	sxth	r3, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <led7_Scan+0x104>)
 8002812:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <led7_Scan+0x108>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d847      	bhi.n	80028ac <led7_Scan+0xc4>
 800281c:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <led7_Scan+0x3c>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002835 	.word	0x08002835
 8002828:	08002853 	.word	0x08002853
 800282c:	08002871 	.word	0x08002871
 8002830:	0800288f 	.word	0x0800288f
	case 0:
		spi_buffer |= 0x00b0;
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <led7_Scan+0x104>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800283c:	b29a      	uxth	r2, r3
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <led7_Scan+0x104>)
 8002840:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <led7_Scan+0x104>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <led7_Scan+0x104>)
 800284e:	801a      	strh	r2, [r3, #0]
		break;
 8002850:	e02d      	b.n	80028ae <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <led7_Scan+0x104>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <led7_Scan+0x104>)
 800285e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <led7_Scan+0x104>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f023 0320 	bic.w	r3, r3, #32
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <led7_Scan+0x104>)
 800286c:	801a      	strh	r2, [r3, #0]
		break;
 800286e:	e01e      	b.n	80028ae <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002870:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <led7_Scan+0x104>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <led7_Scan+0x104>)
 800287c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <led7_Scan+0x104>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f023 0310 	bic.w	r3, r3, #16
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <led7_Scan+0x104>)
 800288a:	801a      	strh	r2, [r3, #0]
		break;
 800288c:	e00f      	b.n	80028ae <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <led7_Scan+0x104>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002896:	b29a      	uxth	r2, r3
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <led7_Scan+0x104>)
 800289a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <led7_Scan+0x104>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <led7_Scan+0x104>)
 80028a8:	801a      	strh	r2, [r3, #0]
		break;
 80028aa:	e000      	b.n	80028ae <led7_Scan+0xc6>
	default:
		break;
 80028ac:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <led7_Scan+0x108>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	425a      	negs	r2, r3
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	bf58      	it	pl
 80028c0:	4253      	negpl	r3, r2
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <led7_Scan+0x108>)
 80028c4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	480b      	ldr	r0, [pc, #44]	; (80028f8 <led7_Scan+0x110>)
 80028cc:	f002 fc7c 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80028d0:	2301      	movs	r3, #1
 80028d2:	2202      	movs	r2, #2
 80028d4:	4905      	ldr	r1, [pc, #20]	; (80028ec <led7_Scan+0x104>)
 80028d6:	4809      	ldr	r0, [pc, #36]	; (80028fc <led7_Scan+0x114>)
 80028d8:	f004 f95d 	bl	8006b96 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80028dc:	2201      	movs	r2, #1
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <led7_Scan+0x110>)
 80028e2:	f002 fc71 	bl	80051c8 <HAL_GPIO_WritePin>
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000010 	.word	0x20000010
 80028f0:	20000248 	.word	0x20000248
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	40021800 	.word	0x40021800
 80028fc:	20000254 	.word	0x20000254

08002900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002904:	f001 fbb8 	bl	8004078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002908:	f000 f894 	bl	8002a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800290c:	f7fe ffac 	bl	8001868 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002910:	f000 fb88 	bl	8003024 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002914:	f000 f97a 	bl	8002c0c <MX_SPI1_Init>
  MX_FSMC_Init();
 8002918:	f7fe fd3c 	bl	8001394 <MX_FSMC_Init>
  MX_I2C1_Init();
 800291c:	f7ff f8ba 	bl	8001a94 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002920:	f000 fbcc 	bl	80030bc <MX_TIM13_Init>
  MX_DMA_Init();
 8002924:	f7fe fc86 	bl	8001234 <MX_DMA_Init>
  MX_ADC1_Init();
 8002928:	f7fe fab8 	bl	8000e9c <MX_ADC1_Init>
  MX_TIM1_Init();
 800292c:	f000 fb2a 	bl	8002f84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002930:	f000 f8ea 	bl	8002b08 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  touch_Adjust();
 lcd_Clear(BLACK);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff f9a1 	bl	8001c7c <lcd_Clear>
    
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 800293a:	f001 fb3f 	bl	8003fbc <touch_Scan>
	  //check if touch screen is touched
	  if(touch_IsTouched() && game_status == GAME_START){
 800293e:	f001 fb47 	bl	8003fd0 <touch_IsTouched>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d064      	beq.n	8002a12 <main+0x112>
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <main+0x128>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d160      	bne.n	8002a12 <main+0x112>
            //draw a point at the touch position
      if (touch_GetX() > 50 && touch_GetX() < 90 && touch_GetY() > 250 && touch_GetY() < 290) {
 8002950:	f001 fb50 	bl	8003ff4 <touch_GetX>
 8002954:	4603      	mov	r3, r0
 8002956:	2b32      	cmp	r3, #50	; 0x32
 8002958:	d912      	bls.n	8002980 <main+0x80>
 800295a:	f001 fb4b 	bl	8003ff4 <touch_GetX>
 800295e:	4603      	mov	r3, r0
 8002960:	2b59      	cmp	r3, #89	; 0x59
 8002962:	d80d      	bhi.n	8002980 <main+0x80>
 8002964:	f001 fb52 	bl	800400c <touch_GetY>
 8002968:	4603      	mov	r3, r0
 800296a:	2bfa      	cmp	r3, #250	; 0xfa
 800296c:	d908      	bls.n	8002980 <main+0x80>
 800296e:	f001 fb4d 	bl	800400c <touch_GetY>
 8002972:	4603      	mov	r3, r0
 8002974:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002978:	d202      	bcs.n	8002980 <main+0x80>
          snake_direction = LEFT;
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <main+0x12c>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
      }

      if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 230 && touch_GetY() < 270) {
 8002980:	f001 fb38 	bl	8003ff4 <touch_GetX>
 8002984:	4603      	mov	r3, r0
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d912      	bls.n	80029b0 <main+0xb0>
 800298a:	f001 fb33 	bl	8003ff4 <touch_GetX>
 800298e:	4603      	mov	r3, r0
 8002990:	2b8b      	cmp	r3, #139	; 0x8b
 8002992:	d80d      	bhi.n	80029b0 <main+0xb0>
 8002994:	f001 fb3a 	bl	800400c <touch_GetY>
 8002998:	4603      	mov	r3, r0
 800299a:	2be6      	cmp	r3, #230	; 0xe6
 800299c:	d908      	bls.n	80029b0 <main+0xb0>
 800299e:	f001 fb35 	bl	800400c <touch_GetY>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80029a8:	d202      	bcs.n	80029b0 <main+0xb0>
          snake_direction = UP;
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <main+0x12c>)
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
      }

      if (touch_GetX() > 100 && touch_GetX() < 140 && touch_GetY() > 280 && touch_GetY() < 320) {
 80029b0:	f001 fb20 	bl	8003ff4 <touch_GetX>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d913      	bls.n	80029e2 <main+0xe2>
 80029ba:	f001 fb1b 	bl	8003ff4 <touch_GetX>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b8b      	cmp	r3, #139	; 0x8b
 80029c2:	d80e      	bhi.n	80029e2 <main+0xe2>
 80029c4:	f001 fb22 	bl	800400c <touch_GetY>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80029ce:	d908      	bls.n	80029e2 <main+0xe2>
 80029d0:	f001 fb1c 	bl	800400c <touch_GetY>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80029da:	d202      	bcs.n	80029e2 <main+0xe2>
          snake_direction = DOWN;
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <main+0x12c>)
 80029de:	2204      	movs	r2, #4
 80029e0:	601a      	str	r2, [r3, #0]
      }

      if (touch_GetX() > 150 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 290) {
 80029e2:	f001 fb07 	bl	8003ff4 <touch_GetX>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b96      	cmp	r3, #150	; 0x96
 80029ea:	d912      	bls.n	8002a12 <main+0x112>
 80029ec:	f001 fb02 	bl	8003ff4 <touch_GetX>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2bbd      	cmp	r3, #189	; 0xbd
 80029f4:	d80d      	bhi.n	8002a12 <main+0x112>
 80029f6:	f001 fb09 	bl	800400c <touch_GetY>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2bfa      	cmp	r3, #250	; 0xfa
 80029fe:	d908      	bls.n	8002a12 <main+0x112>
 8002a00:	f001 fb04 	bl	800400c <touch_GetY>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002a0a:	d202      	bcs.n	8002a12 <main+0x112>
          snake_direction = RIGHT;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <main+0x12c>)
 8002a0e:	2203      	movs	r2, #3
 8002a10:	601a      	str	r2, [r3, #0]
      }
	  }
	  // 50ms task
	  if(flag_timer2 == 1){
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <main+0x130>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d18f      	bne.n	800293a <main+0x3a>
		  flag_timer2 = 0;
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <main+0x130>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	801a      	strh	r2, [r3, #0]
		  // touchProcess();
      fsm();
 8002a20:	f7fe fc28 	bl	8001274 <fsm>
	  touch_Scan();
 8002a24:	e789      	b.n	800293a <main+0x3a>
 8002a26:	bf00      	nop
 8002a28:	200001d4 	.word	0x200001d4
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	2000024c 	.word	0x2000024c

08002a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b094      	sub	sp, #80	; 0x50
 8002a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	2230      	movs	r2, #48	; 0x30
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f005 fba2 	bl	800818c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <SystemClock_Config+0xcc>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <SystemClock_Config+0xcc>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <SystemClock_Config+0xcc>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a98:	2310      	movs	r3, #16
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002aa8:	23a8      	movs	r3, #168	; 0xa8
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	f107 0320 	add.w	r3, r7, #32
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fb5f 	bl	800617c <HAL_RCC_OscConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ac4:	f000 f82f 	bl	8002b26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac8:	230f      	movs	r3, #15
 8002aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002acc:	2302      	movs	r3, #2
 8002ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ad4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002ada:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2105      	movs	r1, #5
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fdc0 	bl	800666c <HAL_RCC_ClockConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002af2:	f000 f818 	bl	8002b26 <Error_Handler>
  }
}
 8002af6:	bf00      	nop
 8002af8:	3750      	adds	r7, #80	; 0x50
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40007000 	.word	0x40007000

08002b08 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	  timer_init();
 8002b0c:	f000 f810 	bl	8002b30 <timer_init>
	  button_init();
 8002b10:	f7fe fb84 	bl	800121c <button_init>
	  lcd_init();
 8002b14:	f7ff fb7a 	bl	800220c <lcd_init>
	  touch_init();
 8002b18:	f001 fa40 	bl	8003f9c <touch_init>
	  setTimer2(50);
 8002b1c:	2032      	movs	r0, #50	; 0x32
 8002b1e:	f000 f815 	bl	8002b4c <setTimer2>
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2a:	b672      	cpsid	i
}
 8002b2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <Error_Handler+0x8>

08002b30 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <timer_init+0x14>)
 8002b36:	f004 fb31 	bl	800719c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002b3a:	4803      	ldr	r0, [pc, #12]	; (8002b48 <timer_init+0x18>)
 8002b3c:	f004 fac6 	bl	80070cc <HAL_TIM_Base_Start>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200002f8 	.word	0x200002f8
 8002b48:	200002b0 	.word	0x200002b0

08002b4c <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <setTimer2+0x2c>)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <setTimer2+0x2c>)
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <setTimer2+0x30>)
 8002b62:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <setTimer2+0x34>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000250 	.word	0x20000250
 8002b7c:	2000024e 	.word	0x2000024e
 8002b80:	2000024c 	.word	0x2000024c

08002b84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d116      	bne.n	8002bc4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ba8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bbe:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002bc0:	f7ff fe12 	bl	80027e8 <led7_Scan>
	}
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	2000024e 	.word	0x2000024e
 8002bd0:	2000024c 	.word	0x2000024c
 8002bd4:	20000250 	.word	0x20000250

08002bd8 <delay_us>:

void delay_us (uint16_t us)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <delay_us+0x30>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002bea:	bf00      	nop
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <delay_us+0x30>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d3f9      	bcc.n	8002bec <delay_us+0x14>
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200002b0 	.word	0x200002b0

08002c0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <MX_SPI1_Init+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c58:	220a      	movs	r2, #10
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c5c:	4804      	ldr	r0, [pc, #16]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c5e:	f003 ff11 	bl	8006a84 <HAL_SPI_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c68:	f7ff ff5d 	bl	8002b26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000254 	.word	0x20000254
 8002c74:	40013000 	.word	0x40013000

08002c78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_SPI_MspInit+0x84>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12b      	bne.n	8002cf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_SPI_MspInit+0x88>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cd2:	2338      	movs	r3, #56	; 0x38
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <HAL_SPI_MspInit+0x8c>)
 8002cee:	f002 f8b7 	bl	8004e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3728      	adds	r7, #40	; 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40013000 	.word	0x40013000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020400 	.word	0x40020400

08002d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_MspInit+0x4c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <NMI_Handler+0x4>

08002d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da4:	f001 f9ba 	bl	800411c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}

08002dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <TIM2_IRQHandler+0x10>)
 8002db2:	f004 fabc 	bl	800732e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200002f8 	.word	0x200002f8

08002dc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <DMA2_Stream0_IRQHandler+0x10>)
 8002dc6:	f001 fe0f 	bl	80049e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000120 	.word	0x20000120

08002dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	return 1;
 8002dd8:	2301      	movs	r3, #1
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_kill>:

int _kill(int pid, int sig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dee:	f005 f9a3 	bl	8008138 <__errno>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2216      	movs	r2, #22
 8002df6:	601a      	str	r2, [r3, #0]
	return -1;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_exit>:

void _exit (int status)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ffe7 	bl	8002de4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e16:	e7fe      	b.n	8002e16 <_exit+0x12>

08002e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e00a      	b.n	8002e40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e2a:	f3af 8000 	nop.w
 8002e2e:	4601      	mov	r1, r0
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	60ba      	str	r2, [r7, #8]
 8002e36:	b2ca      	uxtb	r2, r1
 8002e38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbf0      	blt.n	8002e2a <_read+0x12>
	}

return len;
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e009      	b.n	8002e78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	60ba      	str	r2, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	dbf1      	blt.n	8002e64 <_write+0x12>
	}
	return len;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <_close>:

int _close(int file)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	return -1;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb2:	605a      	str	r2, [r3, #4]
	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <_isatty>:

int _isatty(int file)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8002eca:	2301      	movs	r3, #1
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <_sbrk+0x5c>)
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <_sbrk+0x60>)
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <_sbrk+0x64>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <_sbrk+0x68>)
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d207      	bcs.n	8002f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f24:	f005 f908 	bl	8008138 <__errno>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	e009      	b.n	8002f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <_sbrk+0x64>)
 8002f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20020000 	.word	0x20020000
 8002f54:	00000400 	.word	0x00000400
 8002f58:	200002ac 	.word	0x200002ac
 8002f5c:	200003a0 	.word	0x200003a0

08002f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <SystemInit+0x20>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <SystemInit+0x20>)
 8002f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <MX_TIM1_Init+0x98>)
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <MX_TIM1_Init+0x9c>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <MX_TIM1_Init+0x98>)
 8002fa8:	2253      	movs	r2, #83	; 0x53
 8002faa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <MX_TIM1_Init+0x98>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <MX_TIM1_Init+0x98>)
 8002fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <MX_TIM1_Init+0x98>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <MX_TIM1_Init+0x98>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <MX_TIM1_Init+0x98>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fcc:	4813      	ldr	r0, [pc, #76]	; (800301c <MX_TIM1_Init+0x98>)
 8002fce:	f004 f82d 	bl	800702c <HAL_TIM_Base_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fd8:	f7ff fda5 	bl	8002b26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <MX_TIM1_Init+0x98>)
 8002fea:	f004 fb6b 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002ff4:	f7ff fd97 	bl	8002b26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003000:	463b      	mov	r3, r7
 8003002:	4619      	mov	r1, r3
 8003004:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_TIM1_Init+0x98>)
 8003006:	f004 ff37 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003010:	f7ff fd89 	bl	8002b26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003014:	bf00      	nop
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200002b0 	.word	0x200002b0
 8003020:	40010000 	.word	0x40010000

08003024 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003038:	463b      	mov	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_TIM2_Init+0x94>)
 8003042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <MX_TIM2_Init+0x94>)
 800304a:	f240 3247 	movw	r2, #839	; 0x347
 800304e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_TIM2_Init+0x94>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_TIM2_Init+0x94>)
 8003058:	2263      	movs	r2, #99	; 0x63
 800305a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_TIM2_Init+0x94>)
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <MX_TIM2_Init+0x94>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003068:	4813      	ldr	r0, [pc, #76]	; (80030b8 <MX_TIM2_Init+0x94>)
 800306a:	f003 ffdf 	bl	800702c <HAL_TIM_Base_Init>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003074:	f7ff fd57 	bl	8002b26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	4619      	mov	r1, r3
 8003084:	480c      	ldr	r0, [pc, #48]	; (80030b8 <MX_TIM2_Init+0x94>)
 8003086:	f004 fb1d 	bl	80076c4 <HAL_TIM_ConfigClockSource>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003090:	f7ff fd49 	bl	8002b26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800309c:	463b      	mov	r3, r7
 800309e:	4619      	mov	r1, r3
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_TIM2_Init+0x94>)
 80030a2:	f004 fee9 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030ac:	f7ff fd3b 	bl	8002b26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200002f8 	.word	0x200002f8

080030bc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
 80030d0:	615a      	str	r2, [r3, #20]
 80030d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <MX_TIM13_Init+0x94>)
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <MX_TIM13_Init+0x98>)
 80030d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <MX_TIM13_Init+0x94>)
 80030dc:	f240 3247 	movw	r2, #839	; 0x347
 80030e0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <MX_TIM13_Init+0x94>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <MX_TIM13_Init+0x94>)
 80030ea:	2263      	movs	r2, #99	; 0x63
 80030ec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <MX_TIM13_Init+0x94>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <MX_TIM13_Init+0x94>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80030fa:	4815      	ldr	r0, [pc, #84]	; (8003150 <MX_TIM13_Init+0x94>)
 80030fc:	f003 ff96 	bl	800702c <HAL_TIM_Base_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003106:	f7ff fd0e 	bl	8002b26 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800310a:	4811      	ldr	r0, [pc, #68]	; (8003150 <MX_TIM13_Init+0x94>)
 800310c:	f004 f8b6 	bl	800727c <HAL_TIM_PWM_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003116:	f7ff fd06 	bl	8002b26 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800311a:	2360      	movs	r3, #96	; 0x60
 800311c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <MX_TIM13_Init+0x94>)
 8003132:	f004 fa05 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800313c:	f7ff fcf3 	bl	8002b26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <MX_TIM13_Init+0x94>)
 8003142:	f000 f85b 	bl	80031fc <HAL_TIM_MspPostInit>

}
 8003146:	bf00      	nop
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000340 	.word	0x20000340
 8003154:	40001c00 	.word	0x40001c00

08003158 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_TIM_Base_MspInit+0x98>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003186:	e02e      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d116      	bne.n	80031c0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	201c      	movs	r0, #28
 80031b4:	f001 fb33 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031b8:	201c      	movs	r0, #28
 80031ba:	f001 fb4c 	bl	8004856 <HAL_NVIC_EnableIRQ>
}
 80031be:	e012      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <HAL_TIM_Base_MspInit+0xa0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 80031d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_TIM_Base_MspInit+0x9c>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40001c00 	.word	0x40001c00

080031fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_TIM_MspPostInit+0x68>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d11e      	bne.n	800325c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_TIM_MspPostInit+0x6c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_TIM_MspPostInit+0x6c>)
 8003228:	f043 0320 	orr.w	r3, r3, #32
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_TIM_MspPostInit+0x6c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800323a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800323e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800324c:	2309      	movs	r3, #9
 800324e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4619      	mov	r1, r3
 8003256:	4805      	ldr	r0, [pc, #20]	; (800326c <HAL_TIM_MspPostInit+0x70>)
 8003258:	f001 fe02 	bl	8004e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800325c:	bf00      	nop
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40001c00 	.word	0x40001c00
 8003268:	40023800 	.word	0x40023800
 800326c:	40021400 	.word	0x40021400

08003270 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	e025      	b.n	80032d0 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da06      	bge.n	800329a <TP_Write_Byte+0x2a>
 800328c:	2201      	movs	r2, #1
 800328e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003292:	4813      	ldr	r0, [pc, #76]	; (80032e0 <TP_Write_Byte+0x70>)
 8003294:	f001 ff98 	bl	80051c8 <HAL_GPIO_WritePin>
 8003298:	e005      	b.n	80032a6 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032a0:	480f      	ldr	r0, [pc, #60]	; (80032e0 <TP_Write_Byte+0x70>)
 80032a2:	f001 ff91 	bl	80051c8 <HAL_GPIO_WritePin>
		num<<=1;
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b2:	480c      	ldr	r0, [pc, #48]	; (80032e4 <TP_Write_Byte+0x74>)
 80032b4:	f001 ff88 	bl	80051c8 <HAL_GPIO_WritePin>
		delay_us(1);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f7ff fc8d 	bl	8002bd8 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80032be:	2201      	movs	r2, #1
 80032c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032c4:	4807      	ldr	r0, [pc, #28]	; (80032e4 <TP_Write_Byte+0x74>)
 80032c6:	f001 ff7f 	bl	80051c8 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	3301      	adds	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d9d6      	bls.n	8003284 <TP_Write_Byte+0x14>
	}
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40021800 	.word	0x40021800

080032e8 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003300:	482f      	ldr	r0, [pc, #188]	; (80033c0 <TP_Read_AD+0xd8>)
 8003302:	f001 ff61 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800330c:	482d      	ldr	r0, [pc, #180]	; (80033c4 <TP_Read_AD+0xdc>)
 800330e:	f001 ff5b 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	482a      	ldr	r0, [pc, #168]	; (80033c0 <TP_Read_AD+0xd8>)
 8003318:	f001 ff56 	bl	80051c8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ffa6 	bl	8003270 <TP_Write_Byte>
	delay_us(6);
 8003324:	2006      	movs	r0, #6
 8003326:	f7ff fc57 	bl	8002bd8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003330:	4823      	ldr	r0, [pc, #140]	; (80033c0 <TP_Read_AD+0xd8>)
 8003332:	f001 ff49 	bl	80051c8 <HAL_GPIO_WritePin>
	delay_us(1);
 8003336:	2001      	movs	r0, #1
 8003338:	f7ff fc4e 	bl	8002bd8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003342:	481f      	ldr	r0, [pc, #124]	; (80033c0 <TP_Read_AD+0xd8>)
 8003344:	f001 ff40 	bl	80051c8 <HAL_GPIO_WritePin>
	delay_us(1);
 8003348:	2001      	movs	r0, #1
 800334a:	f7ff fc45 	bl	8002bd8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003354:	481a      	ldr	r0, [pc, #104]	; (80033c0 <TP_Read_AD+0xd8>)
 8003356:	f001 ff37 	bl	80051c8 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e01f      	b.n	80033a0 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003360:	89bb      	ldrh	r3, [r7, #12]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003366:	2200      	movs	r2, #0
 8003368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800336c:	4814      	ldr	r0, [pc, #80]	; (80033c0 <TP_Read_AD+0xd8>)
 800336e:	f001 ff2b 	bl	80051c8 <HAL_GPIO_WritePin>
		delay_us(1);
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff fc30 	bl	8002bd8 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003378:	2201      	movs	r2, #1
 800337a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800337e:	4810      	ldr	r0, [pc, #64]	; (80033c0 <TP_Read_AD+0xd8>)
 8003380:	f001 ff22 	bl	80051c8 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8003384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003388:	480e      	ldr	r0, [pc, #56]	; (80033c4 <TP_Read_AD+0xdc>)
 800338a:	f001 ff05 	bl	8005198 <HAL_GPIO_ReadPin>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <TP_Read_AD+0xb2>
 8003394:	89bb      	ldrh	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	3301      	adds	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	d9dc      	bls.n	8003360 <TP_Read_AD+0x78>
	}
	Num>>=4;
 80033a6:	89bb      	ldrh	r3, [r7, #12]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80033ac:	2201      	movs	r2, #1
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <TP_Read_AD+0xd8>)
 80033b2:	f001 ff09 	bl	80051c8 <HAL_GPIO_WritePin>
	return(Num);
 80033b6:	89bb      	ldrh	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021800 	.word	0x40021800
 80033c4:	40020800 	.word	0x40020800

080033c8 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80033d6:	2300      	movs	r3, #0
 80033d8:	83fb      	strh	r3, [r7, #30]
 80033da:	e00e      	b.n	80033fa <TP_Read_XOY+0x32>
 80033dc:	8bfc      	ldrh	r4, [r7, #30]
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff81 	bl	80032e8 <TP_Read_AD>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	0063      	lsls	r3, r4, #1
 80033ec:	3320      	adds	r3, #32
 80033ee:	443b      	add	r3, r7
 80033f0:	f823 2c14 	strh.w	r2, [r3, #-20]
 80033f4:	8bfb      	ldrh	r3, [r7, #30]
 80033f6:	3301      	adds	r3, #1
 80033f8:	83fb      	strh	r3, [r7, #30]
 80033fa:	8bfb      	ldrh	r3, [r7, #30]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d9ed      	bls.n	80033dc <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	83fb      	strh	r3, [r7, #30]
 8003404:	e035      	b.n	8003472 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	3301      	adds	r3, #1
 800340a:	83bb      	strh	r3, [r7, #28]
 800340c:	e02b      	b.n	8003466 <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 800340e:	8bfb      	ldrh	r3, [r7, #30]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	3320      	adds	r3, #32
 8003414:	443b      	add	r3, r7
 8003416:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800341a:	8bbb      	ldrh	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	3320      	adds	r3, #32
 8003420:	443b      	add	r3, r7
 8003422:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003426:	429a      	cmp	r2, r3
 8003428:	d91a      	bls.n	8003460 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 800342a:	8bfb      	ldrh	r3, [r7, #30]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	3320      	adds	r3, #32
 8003430:	443b      	add	r3, r7
 8003432:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003436:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003438:	8bbb      	ldrh	r3, [r7, #28]
 800343a:	8bfa      	ldrh	r2, [r7, #30]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	3320      	adds	r3, #32
 8003440:	443b      	add	r3, r7
 8003442:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003446:	0053      	lsls	r3, r2, #1
 8003448:	3320      	adds	r3, #32
 800344a:	443b      	add	r3, r7
 800344c:	460a      	mov	r2, r1
 800344e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8003452:	8bbb      	ldrh	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	3320      	adds	r3, #32
 8003458:	443b      	add	r3, r7
 800345a:	8b3a      	ldrh	r2, [r7, #24]
 800345c:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003460:	8bbb      	ldrh	r3, [r7, #28]
 8003462:	3301      	adds	r3, #1
 8003464:	83bb      	strh	r3, [r7, #28]
 8003466:	8bbb      	ldrh	r3, [r7, #28]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d9d0      	bls.n	800340e <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 800346c:	8bfb      	ldrh	r3, [r7, #30]
 800346e:	3301      	adds	r3, #1
 8003470:	83fb      	strh	r3, [r7, #30]
 8003472:	8bfb      	ldrh	r3, [r7, #30]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d9c6      	bls.n	8003406 <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8003478:	2300      	movs	r3, #0
 800347a:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800347c:	2301      	movs	r3, #1
 800347e:	83fb      	strh	r3, [r7, #30]
 8003480:	e00b      	b.n	800349a <TP_Read_XOY+0xd2>
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	3320      	adds	r3, #32
 8003488:	443b      	add	r3, r7
 800348a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800348e:	8b7b      	ldrh	r3, [r7, #26]
 8003490:	4413      	add	r3, r2
 8003492:	837b      	strh	r3, [r7, #26]
 8003494:	8bfb      	ldrh	r3, [r7, #30]
 8003496:	3301      	adds	r3, #1
 8003498:	83fb      	strh	r3, [r7, #30]
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d9f0      	bls.n	8003482 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80034a0:	8b7b      	ldrh	r3, [r7, #26]
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <TP_Read_XOY+0xf0>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	833b      	strh	r3, [r7, #24]
	return temp;
 80034ac:	8b3b      	ldrh	r3, [r7, #24]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	aaaaaaab 	.word	0xaaaaaaab

080034bc <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <TP_Read_XY+0x3c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ff7c 	bl	80033c8 <TP_Read_XOY>
 80034d0:	4603      	mov	r3, r0
 80034d2:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <TP_Read_XY+0x40>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff75 	bl	80033c8 <TP_Read_XOY>
 80034de:	4603      	mov	r3, r0
 80034e0:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	89fa      	ldrh	r2, [r7, #14]
 80034e6:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	89ba      	ldrh	r2, [r7, #12]
 80034ec:	801a      	strh	r2, [r3, #0]
	return 1;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000004c 	.word	0x2000004c
 80034fc:	2000004d 	.word	0x2000004d

08003500 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800350a:	f107 0212 	add.w	r2, r7, #18
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ffd1 	bl	80034bc <TP_Read_XY>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <TP_Read_XY2+0x28>
 8003524:	2300      	movs	r3, #0
 8003526:	e049      	b.n	80035bc <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8003528:	f107 020e 	add.w	r2, r7, #14
 800352c:	f107 0310 	add.w	r3, r7, #16
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ffc2 	bl	80034bc <TP_Read_XY>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <TP_Read_XY2+0x46>
 8003542:	2300      	movs	r3, #0
 8003544:	e03a      	b.n	80035bc <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8003546:	8a3a      	ldrh	r2, [r7, #16]
 8003548:	8abb      	ldrh	r3, [r7, #20]
 800354a:	429a      	cmp	r2, r3
 800354c:	d804      	bhi.n	8003558 <TP_Read_XY2+0x58>
 800354e:	8a3b      	ldrh	r3, [r7, #16]
 8003550:	3363      	adds	r3, #99	; 0x63
 8003552:	8aba      	ldrh	r2, [r7, #20]
 8003554:	4293      	cmp	r3, r2
 8003556:	da08      	bge.n	800356a <TP_Read_XY2+0x6a>
 8003558:	8aba      	ldrh	r2, [r7, #20]
 800355a:	8a3b      	ldrh	r3, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d82c      	bhi.n	80035ba <TP_Read_XY2+0xba>
 8003560:	8abb      	ldrh	r3, [r7, #20]
 8003562:	3363      	adds	r3, #99	; 0x63
 8003564:	8a3a      	ldrh	r2, [r7, #16]
 8003566:	4293      	cmp	r3, r2
 8003568:	db27      	blt.n	80035ba <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800356a:	89fa      	ldrh	r2, [r7, #14]
 800356c:	8a7b      	ldrh	r3, [r7, #18]
 800356e:	429a      	cmp	r2, r3
 8003570:	d804      	bhi.n	800357c <TP_Read_XY2+0x7c>
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	3363      	adds	r3, #99	; 0x63
 8003576:	8a7a      	ldrh	r2, [r7, #18]
 8003578:	4293      	cmp	r3, r2
 800357a:	da08      	bge.n	800358e <TP_Read_XY2+0x8e>
 800357c:	8a7a      	ldrh	r2, [r7, #18]
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	429a      	cmp	r2, r3
 8003582:	d81a      	bhi.n	80035ba <TP_Read_XY2+0xba>
 8003584:	8a7b      	ldrh	r3, [r7, #18]
 8003586:	3363      	adds	r3, #99	; 0x63
 8003588:	89fa      	ldrh	r2, [r7, #14]
 800358a:	4293      	cmp	r3, r2
 800358c:	db15      	blt.n	80035ba <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 800358e:	8abb      	ldrh	r3, [r7, #20]
 8003590:	461a      	mov	r2, r3
 8003592:	8a3b      	ldrh	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	0fda      	lsrs	r2, r3, #31
 8003598:	4413      	add	r3, r2
 800359a:	105b      	asrs	r3, r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80035a2:	8a7b      	ldrh	r3, [r7, #18]
 80035a4:	461a      	mov	r2, r3
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	4413      	add	r3, r2
 80035aa:	0fda      	lsrs	r2, r3, #31
 80035ac:	4413      	add	r3, r2
 80035ae:	105b      	asrs	r3, r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	801a      	strh	r2, [r3, #0]
		return 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <TP_Read_XY2+0xbc>
	}else return 0;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	4603      	mov	r3, r0
 80035cc:	80fb      	strh	r3, [r7, #6]
 80035ce:	460b      	mov	r3, r1
 80035d0:	80bb      	strh	r3, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	3b0c      	subs	r3, #12
 80035da:	b298      	uxth	r0, r3
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	330d      	adds	r3, #13
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	88bc      	ldrh	r4, [r7, #4]
 80035e4:	88b9      	ldrh	r1, [r7, #4]
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4623      	mov	r3, r4
 80035ec:	f7fe fbc5 	bl	8001d7a <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80035f0:	88bb      	ldrh	r3, [r7, #4]
 80035f2:	3b0c      	subs	r3, #12
 80035f4:	b299      	uxth	r1, r3
 80035f6:	88bb      	ldrh	r3, [r7, #4]
 80035f8:	330d      	adds	r3, #13
 80035fa:	b29c      	uxth	r4, r3
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	88f8      	ldrh	r0, [r7, #6]
 8003600:	887b      	ldrh	r3, [r7, #2]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4623      	mov	r3, r4
 8003606:	f7fe fbb8 	bl	8001d7a <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	3301      	adds	r3, #1
 800360e:	b298      	uxth	r0, r3
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	3301      	adds	r3, #1
 8003614:	b29b      	uxth	r3, r3
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	4619      	mov	r1, r3
 800361a:	f7fe fb97 	bl	8001d4c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	3b01      	subs	r3, #1
 8003622:	b298      	uxth	r0, r3
 8003624:	88bb      	ldrh	r3, [r7, #4]
 8003626:	3301      	adds	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	4619      	mov	r1, r3
 800362e:	f7fe fb8d 	bl	8001d4c <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	3301      	adds	r3, #1
 8003636:	b298      	uxth	r0, r3
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	b29b      	uxth	r3, r3
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	4619      	mov	r1, r3
 8003642:	f7fe fb83 	bl	8001d4c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	3b01      	subs	r3, #1
 800364a:	b298      	uxth	r0, r3
 800364c:	88bb      	ldrh	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	b29b      	uxth	r3, r3
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	4619      	mov	r1, r3
 8003656:	f7fe fb79 	bl	8001d4c <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800365a:	88f8      	ldrh	r0, [r7, #6]
 800365c:	88b9      	ldrh	r1, [r7, #4]
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	2300      	movs	r3, #0
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2306      	movs	r3, #6
 8003666:	f7fe ffbc 	bl	80025e2 <lcd_DrawCircle>
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
	...

08003674 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 800367e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003682:	4843      	ldr	r0, [pc, #268]	; (8003790 <TP_Scan+0x11c>)
 8003684:	f001 fd88 	bl	8005198 <HAL_GPIO_ReadPin>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d157      	bne.n	800373e <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <TP_Scan+0x2a>
 8003694:	493f      	ldr	r1, [pc, #252]	; (8003794 <TP_Scan+0x120>)
 8003696:	4840      	ldr	r0, [pc, #256]	; (8003798 <TP_Scan+0x124>)
 8003698:	f7ff ff32 	bl	8003500 <TP_Read_XY2>
 800369c:	e03c      	b.n	8003718 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 800369e:	493d      	ldr	r1, [pc, #244]	; (8003794 <TP_Scan+0x120>)
 80036a0:	483d      	ldr	r0, [pc, #244]	; (8003798 <TP_Scan+0x124>)
 80036a2:	f7ff ff2d 	bl	8003500 <TP_Read_XY2>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d035      	beq.n	8003718 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <TP_Scan+0x128>)
 80036ae:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <TP_Scan+0x128>)
 80036b4:	899b      	ldrh	r3, [r3, #12]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c2:	4b36      	ldr	r3, [pc, #216]	; (800379c <TP_Scan+0x128>)
 80036c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d8:	ee17 3a90 	vmov	r3, s15
 80036dc:	b29a      	uxth	r2, r3
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <TP_Scan+0x128>)
 80036e0:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <TP_Scan+0x128>)
 80036e4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80036e8:	4b2c      	ldr	r3, [pc, #176]	; (800379c <TP_Scan+0x128>)
 80036ea:	8adb      	ldrh	r3, [r3, #22]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <TP_Scan+0x128>)
 80036fa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370e:	ee17 3a90 	vmov	r3, s15
 8003712:	b29a      	uxth	r2, r3
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <TP_Scan+0x128>)
 8003716:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003718:	4b20      	ldr	r3, [pc, #128]	; (800379c <TP_Scan+0x128>)
 800371a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371e:	b25b      	sxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	db2a      	blt.n	800377a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <TP_Scan+0x128>)
 8003726:	22c0      	movs	r2, #192	; 0xc0
 8003728:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <TP_Scan+0x128>)
 800372e:	899a      	ldrh	r2, [r3, #12]
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <TP_Scan+0x128>)
 8003732:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <TP_Scan+0x128>)
 8003736:	8ada      	ldrh	r2, [r3, #22]
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <TP_Scan+0x128>)
 800373a:	83da      	strh	r2, [r3, #30]
 800373c:	e01d      	b.n	800377a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <TP_Scan+0x128>)
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	b25b      	sxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	da09      	bge.n	800375e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <TP_Scan+0x128>)
 800374c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <TP_Scan+0x128>)
 8003758:	f883 2020 	strb.w	r2, [r3, #32]
 800375c:	e00d      	b.n	800377a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <TP_Scan+0x128>)
 8003760:	2200      	movs	r2, #0
 8003762:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <TP_Scan+0x128>)
 8003766:	2200      	movs	r2, #0
 8003768:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <TP_Scan+0x128>)
 800376c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003770:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <TP_Scan+0x128>)
 8003774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003778:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <TP_Scan+0x128>)
 800377c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003780:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003784:	b2db      	uxtb	r3, r3
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40020800 	.word	0x40020800
 8003794:	2000002e 	.word	0x2000002e
 8003798:	20000024 	.word	0x20000024
 800379c:	20000018 	.word	0x20000018

080037a0 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80037a4:	220e      	movs	r2, #14
 80037a6:	4905      	ldr	r1, [pc, #20]	; (80037bc <TP_Save_Adjdata+0x1c>)
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7fd fd17 	bl	80011dc <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 80037ae:	2100      	movs	r1, #0
 80037b0:	200e      	movs	r0, #14
 80037b2:	f7fd fcb3 	bl	800111c <at24c_WriteOneByte>
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000003c 	.word	0x2000003c

080037c0 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 80037ca:	200e      	movs	r0, #14
 80037cc:	f7fd fc8a 	bl	80010e4 <at24c_ReadOneByte>
 80037d0:	4603      	mov	r3, r0
 80037d2:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80037da:	220e      	movs	r2, #14
 80037dc:	4905      	ldr	r1, [pc, #20]	; (80037f4 <TP_Get_Adjdata+0x34>)
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd fcdd 	bl	800119e <at24c_Read>
		return 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <TP_Get_Adjdata+0x2a>
	}
	return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000003c 	.word	0x2000003c

080037f8 <touch_Adjust>:


void touch_Adjust(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	; 0x38
 80037fc:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 80037fe:	2300      	movs	r3, #0
 8003800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 800380a:	4b60      	ldr	r3, [pc, #384]	; (800398c <touch_Adjust+0x194>)
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	4b5f      	ldr	r3, [pc, #380]	; (800398c <touch_Adjust+0x194>)
 8003810:	885b      	ldrh	r3, [r3, #2]
 8003812:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	2100      	movs	r1, #0
 800381a:	2000      	movs	r0, #0
 800381c:	f7fe fa60 	bl	8001ce0 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003820:	2300      	movs	r3, #0
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	2310      	movs	r3, #16
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003832:	4a57      	ldr	r2, [pc, #348]	; (8003990 <touch_Adjust+0x198>)
 8003834:	2128      	movs	r1, #40	; 0x28
 8003836:	2005      	movs	r0, #5
 8003838:	f7fe ff40 	bl	80026bc <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 800383c:	2300      	movs	r3, #0
 800383e:	9302      	str	r3, [sp, #8]
 8003840:	2310      	movs	r3, #16
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800384e:	4a51      	ldr	r2, [pc, #324]	; (8003994 <touch_Adjust+0x19c>)
 8003850:	2141      	movs	r1, #65	; 0x41
 8003852:	2005      	movs	r0, #5
 8003854:	f7fe ff32 	bl	80026bc <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003858:	2300      	movs	r3, #0
 800385a:	9302      	str	r3, [sp, #8]
 800385c:	2310      	movs	r3, #16
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800386a:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <touch_Adjust+0x1a0>)
 800386c:	215a      	movs	r1, #90	; 0x5a
 800386e:	2005      	movs	r0, #5
 8003870:	f7fe ff24 	bl	80026bc <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8003874:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003878:	2114      	movs	r1, #20
 800387a:	2014      	movs	r0, #20
 800387c:	f7ff fea2 	bl	80035c4 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003880:	4b46      	ldr	r3, [pc, #280]	; (800399c <touch_Adjust+0x1a4>)
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003888:	4b44      	ldr	r3, [pc, #272]	; (800399c <touch_Adjust+0x1a4>)
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8003890:	2032      	movs	r0, #50	; 0x32
 8003892:	f000 fc63 	bl	800415c <HAL_Delay>
		tp_dev.scan(1);
 8003896:	4b41      	ldr	r3, [pc, #260]	; (800399c <touch_Adjust+0x1a4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2001      	movs	r0, #1
 800389c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 800389e:	4b3f      	ldr	r3, [pc, #252]	; (800399c <touch_Adjust+0x1a4>)
 80038a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	f040 835a 	bne.w	8003f62 <touch_Adjust+0x76a>
		{
			tp_dev.sta&=~(1<<6);
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <touch_Adjust+0x1a4>)
 80038b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b38      	ldr	r3, [pc, #224]	; (800399c <touch_Adjust+0x1a4>)
 80038bc:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80038c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c4:	4a35      	ldr	r2, [pc, #212]	; (800399c <touch_Adjust+0x1a4>)
 80038c6:	8992      	ldrh	r2, [r2, #12]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3328      	adds	r3, #40	; 0x28
 80038cc:	443b      	add	r3, r7
 80038ce:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 80038d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d6:	4a31      	ldr	r2, [pc, #196]	; (800399c <touch_Adjust+0x1a4>)
 80038d8:	8ad2      	ldrh	r2, [r2, #22]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3328      	adds	r3, #40	; 0x28
 80038de:	443b      	add	r3, r7
 80038e0:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 80038e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e8:	3301      	adds	r3, #1
 80038ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 80038ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038f2:	3b01      	subs	r3, #1
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d8cb      	bhi.n	8003890 <touch_Adjust+0x98>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <touch_Adjust+0x108>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003911 	.word	0x08003911
 8003904:	08003933 	.word	0x08003933
 8003908:	0800395d 	.word	0x0800395d
 800390c:	080039a1 	.word	0x080039a1
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003914:	2114      	movs	r1, #20
 8003916:	2014      	movs	r0, #20
 8003918:	f7ff fe54 	bl	80035c4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <touch_Adjust+0x194>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	3b14      	subs	r3, #20
 8003922:	b29b      	uxth	r3, r3
 8003924:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003928:	2114      	movs	r1, #20
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fe4a 	bl	80035c4 <TP_Drow_Touch_Point>
					break;
 8003930:	e318      	b.n	8003f64 <touch_Adjust+0x76c>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <touch_Adjust+0x194>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	3b14      	subs	r3, #20
 8003938:	b29b      	uxth	r3, r3
 800393a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393e:	2114      	movs	r1, #20
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fe3f 	bl	80035c4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <touch_Adjust+0x194>)
 8003948:	885b      	ldrh	r3, [r3, #2]
 800394a:	3b14      	subs	r3, #20
 800394c:	b29b      	uxth	r3, r3
 800394e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003952:	4619      	mov	r1, r3
 8003954:	2014      	movs	r0, #20
 8003956:	f7ff fe35 	bl	80035c4 <TP_Drow_Touch_Point>
					break;
 800395a:	e303      	b.n	8003f64 <touch_Adjust+0x76c>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <touch_Adjust+0x194>)
 800395e:	885b      	ldrh	r3, [r3, #2]
 8003960:	3b14      	subs	r3, #20
 8003962:	b29b      	uxth	r3, r3
 8003964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003968:	4619      	mov	r1, r3
 800396a:	2014      	movs	r0, #20
 800396c:	f7ff fe2a 	bl	80035c4 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <touch_Adjust+0x194>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	3b14      	subs	r3, #20
 8003976:	b298      	uxth	r0, r3
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <touch_Adjust+0x194>)
 800397a:	885b      	ldrh	r3, [r3, #2]
 800397c:	3b14      	subs	r3, #20
 800397e:	b29b      	uxth	r3, r3
 8003980:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003984:	4619      	mov	r1, r3
 8003986:	f7ff fe1d 	bl	80035c4 <TP_Drow_Touch_Point>
					break;
 800398a:	e2eb      	b.n	8003f64 <touch_Adjust+0x76c>
 800398c:	20000240 	.word	0x20000240
 8003990:	080093fc 	.word	0x080093fc
 8003994:	08009418 	.word	0x08009418
 8003998:	08009430 	.word	0x08009430
 800399c:	20000018 	.word	0x20000018
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80039a0:	883b      	ldrh	r3, [r7, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	88bb      	ldrh	r3, [r7, #4]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bfb8      	it	lt
 80039ac:	425b      	neglt	r3, r3
 80039ae:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	461a      	mov	r2, r3
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfb8      	it	lt
 80039bc:	425b      	neglt	r3, r3
 80039be:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	fb03 f303 	mul.w	r3, r3, r3
 80039c6:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	fb03 f303 	mul.w	r3, r3, r3
 80039ce:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fd94 	bl	8000504 <__aeabi_ui2d>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	ec43 2b10 	vmov	d0, r2, r3
 80039e4:	f005 fc12 	bl	800920c <sqrt>
 80039e8:	ec53 2b10 	vmov	r2, r3, d0
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	f7fd f8b2 	bl	8000b58 <__aeabi_d2uiz>
 80039f4:	4603      	mov	r3, r0
 80039f6:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80039f8:	893b      	ldrh	r3, [r7, #8]
 80039fa:	461a      	mov	r2, r3
 80039fc:	89bb      	ldrh	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bfb8      	it	lt
 8003a04:	425b      	neglt	r3, r3
 8003a06:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	89fb      	ldrh	r3, [r7, #14]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfb8      	it	lt
 8003a14:	425b      	neglt	r3, r3
 8003a16:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	fb03 f303 	mul.w	r3, r3, r3
 8003a1e:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	fb03 f303 	mul.w	r3, r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fc fd68 	bl	8000504 <__aeabi_ui2d>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	ec43 2b10 	vmov	d0, r2, r3
 8003a3c:	f005 fbe6 	bl	800920c <sqrt>
 8003a40:	ec53 2b10 	vmov	r2, r3, d0
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	f7fd f886 	bl	8000b58 <__aeabi_d2uiz>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003a50:	8b7b      	ldrh	r3, [r7, #26]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a5a:	8b3b      	ldrh	r3, [r7, #24]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a68:	ee16 0a90 	vmov	r0, s13
 8003a6c:	f7fc fd6c 	bl	8000548 <__aeabi_f2d>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8003a78:	a383      	add	r3, pc, #524	; (adr r3, 8003c88 <touch_Adjust+0x490>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a82:	f7fd f82b 	bl	8000adc <__aeabi_dcmplt>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10f      	bne.n	8003aac <touch_Adjust+0x2b4>
 8003a8c:	a380      	add	r3, pc, #512	; (adr r3, 8003c90 <touch_Adjust+0x498>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a96:	f7fd f83f 	bl	8000b18 <__aeabi_dcmpgt>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <touch_Adjust+0x2b4>
 8003aa0:	8b7b      	ldrh	r3, [r7, #26]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <touch_Adjust+0x2b4>
 8003aa6:	8b3b      	ldrh	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d136      	bne.n	8003b1a <touch_Adjust+0x322>
					{
						cnt=0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003ab2:	4b79      	ldr	r3, [pc, #484]	; (8003c98 <touch_Adjust+0x4a0>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	3b14      	subs	r3, #20
 8003ab8:	b298      	uxth	r0, r3
 8003aba:	4b77      	ldr	r3, [pc, #476]	; (8003c98 <touch_Adjust+0x4a0>)
 8003abc:	885b      	ldrh	r3, [r3, #2]
 8003abe:	3b14      	subs	r3, #20
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7ff fd7c 	bl	80035c4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003acc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ad0:	2114      	movs	r1, #20
 8003ad2:	2014      	movs	r0, #20
 8003ad4:	f7ff fd76 	bl	80035c4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	2310      	movs	r3, #16
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003aea:	4a6c      	ldr	r2, [pc, #432]	; (8003c9c <touch_Adjust+0x4a4>)
 8003aec:	2128      	movs	r1, #40	; 0x28
 8003aee:	2005      	movs	r0, #5
 8003af0:	f7fe fde4 	bl	80026bc <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003af4:	2300      	movs	r3, #0
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	2310      	movs	r3, #16
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b06:	4a66      	ldr	r2, [pc, #408]	; (8003ca0 <touch_Adjust+0x4a8>)
 8003b08:	213c      	movs	r1, #60	; 0x3c
 8003b0a:	2005      	movs	r0, #5
 8003b0c:	f7fe fdd6 	bl	80026bc <lcd_ShowStr>
						HAL_Delay(1000);
 8003b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b14:	f000 fb22 	bl	800415c <HAL_Delay>
 						continue;
 8003b18:	e224      	b.n	8003f64 <touch_Adjust+0x76c>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003b1a:	883b      	ldrh	r3, [r7, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	893b      	ldrh	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bfb8      	it	lt
 8003b26:	425b      	neglt	r3, r3
 8003b28:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfb8      	it	lt
 8003b36:	425b      	neglt	r3, r3
 8003b38:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	fb03 f303 	mul.w	r3, r3, r3
 8003b40:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fb03 f303 	mul.w	r3, r3, r3
 8003b48:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fcd7 	bl	8000504 <__aeabi_ui2d>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	ec43 2b10 	vmov	d0, r2, r3
 8003b5e:	f005 fb55 	bl	800920c <sqrt>
 8003b62:	ec53 2b10 	vmov	r2, r3, d0
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f7fc fff5 	bl	8000b58 <__aeabi_d2uiz>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003b72:	88bb      	ldrh	r3, [r7, #4]
 8003b74:	461a      	mov	r2, r3
 8003b76:	89bb      	ldrh	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bfb8      	it	lt
 8003b7e:	425b      	neglt	r3, r3
 8003b80:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	461a      	mov	r2, r3
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bfb8      	it	lt
 8003b8e:	425b      	neglt	r3, r3
 8003b90:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	fb03 f303 	mul.w	r3, r3, r3
 8003b98:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fb03 f303 	mul.w	r3, r3, r3
 8003ba0:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fcab 	bl	8000504 <__aeabi_ui2d>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	ec43 2b10 	vmov	d0, r2, r3
 8003bb6:	f005 fb29 	bl	800920c <sqrt>
 8003bba:	ec53 2b10 	vmov	r2, r3, d0
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fc ffc9 	bl	8000b58 <__aeabi_d2uiz>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003bca:	8b7b      	ldrh	r3, [r7, #26]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd4:	8b3b      	ldrh	r3, [r7, #24]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003be2:	ee16 0a90 	vmov	r0, s13
 8003be6:	f7fc fcaf 	bl	8000548 <__aeabi_f2d>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003bf2:	a325      	add	r3, pc, #148	; (adr r3, 8003c88 <touch_Adjust+0x490>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bfc:	f7fc ff6e 	bl	8000adc <__aeabi_dcmplt>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <touch_Adjust+0x422>
 8003c06:	a322      	add	r3, pc, #136	; (adr r3, 8003c90 <touch_Adjust+0x498>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c10:	f7fc ff82 	bl	8000b18 <__aeabi_dcmpgt>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d044      	beq.n	8003ca4 <touch_Adjust+0x4ac>
					{
						cnt=0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <touch_Adjust+0x4a0>)
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	3b14      	subs	r3, #20
 8003c26:	b298      	uxth	r0, r3
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <touch_Adjust+0x4a0>)
 8003c2a:	885b      	ldrh	r3, [r3, #2]
 8003c2c:	3b14      	subs	r3, #20
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7ff fcc5 	bl	80035c4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003c3a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003c3e:	2114      	movs	r1, #20
 8003c40:	2014      	movs	r0, #20
 8003c42:	f7ff fcbf 	bl	80035c4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003c46:	2300      	movs	r3, #0
 8003c48:	9302      	str	r3, [sp, #8]
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c58:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <touch_Adjust+0x4a4>)
 8003c5a:	2128      	movs	r1, #40	; 0x28
 8003c5c:	2005      	movs	r0, #5
 8003c5e:	f7fe fd2d 	bl	80026bc <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003c62:	2300      	movs	r3, #0
 8003c64:	9302      	str	r3, [sp, #8]
 8003c66:	2310      	movs	r3, #16
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <touch_Adjust+0x4a8>)
 8003c76:	213c      	movs	r1, #60	; 0x3c
 8003c78:	2005      	movs	r0, #5
 8003c7a:	f7fe fd1f 	bl	80026bc <lcd_ShowStr>
						HAL_Delay(1000);
 8003c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c82:	f000 fa6b 	bl	800415c <HAL_Delay>
						continue;
 8003c86:	e16d      	b.n	8003f64 <touch_Adjust+0x76c>
 8003c88:	66666666 	.word	0x66666666
 8003c8c:	3fee6666 	.word	0x3fee6666
 8003c90:	cccccccd 	.word	0xcccccccd
 8003c94:	3ff0cccc 	.word	0x3ff0cccc
 8003c98:	20000240 	.word	0x20000240
 8003c9c:	08009444 	.word	0x08009444
 8003ca0:	08009464 	.word	0x08009464
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003ca4:	88bb      	ldrh	r3, [r7, #4]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bfb8      	it	lt
 8003cb0:	425b      	neglt	r3, r3
 8003cb2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	425b      	neglt	r3, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	fb03 f303 	mul.w	r3, r3, r3
 8003cca:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	fb03 f303 	mul.w	r3, r3, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fc12 	bl	8000504 <__aeabi_ui2d>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	ec43 2b10 	vmov	d0, r2, r3
 8003ce8:	f005 fa90 	bl	800920c <sqrt>
 8003cec:	ec53 2b10 	vmov	r2, r3, d0
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f7fc ff30 	bl	8000b58 <__aeabi_d2uiz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003cfc:	883b      	ldrh	r3, [r7, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	89bb      	ldrh	r3, [r7, #12]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	425b      	neglt	r3, r3
 8003d0a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	89fb      	ldrh	r3, [r7, #14]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bfb8      	it	lt
 8003d18:	425b      	neglt	r3, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	fb03 f303 	mul.w	r3, r3, r3
 8003d22:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	fb03 f303 	mul.w	r3, r3, r3
 8003d2a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbe6 	bl	8000504 <__aeabi_ui2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	ec43 2b10 	vmov	d0, r2, r3
 8003d40:	f005 fa64 	bl	800920c <sqrt>
 8003d44:	ec53 2b10 	vmov	r2, r3, d0
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc ff04 	bl	8000b58 <__aeabi_d2uiz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003d54:	8b7b      	ldrh	r3, [r7, #26]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d5e:	8b3b      	ldrh	r3, [r7, #24]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d6c:	ee16 0a90 	vmov	r0, s13
 8003d70:	f7fc fbea 	bl	8000548 <__aeabi_f2d>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003d7c:	a383      	add	r3, pc, #524	; (adr r3, 8003f8c <touch_Adjust+0x794>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d86:	f7fc fea9 	bl	8000adc <__aeabi_dcmplt>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <touch_Adjust+0x5ac>
 8003d90:	a380      	add	r3, pc, #512	; (adr r3, 8003f94 <touch_Adjust+0x79c>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d9a:	f7fc febd 	bl	8000b18 <__aeabi_dcmpgt>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d036      	beq.n	8003e12 <touch_Adjust+0x61a>
					{
						cnt=0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003daa:	4b71      	ldr	r3, [pc, #452]	; (8003f70 <touch_Adjust+0x778>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	3b14      	subs	r3, #20
 8003db0:	b298      	uxth	r0, r3
 8003db2:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <touch_Adjust+0x778>)
 8003db4:	885b      	ldrh	r3, [r3, #2]
 8003db6:	3b14      	subs	r3, #20
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f7ff fc00 	bl	80035c4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003dc4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003dc8:	2114      	movs	r1, #20
 8003dca:	2014      	movs	r0, #20
 8003dcc:	f7ff fbfa 	bl	80035c4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9302      	str	r3, [sp, #8]
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003de2:	4a64      	ldr	r2, [pc, #400]	; (8003f74 <touch_Adjust+0x77c>)
 8003de4:	2128      	movs	r1, #40	; 0x28
 8003de6:	2005      	movs	r0, #5
 8003de8:	f7fe fc68 	bl	80026bc <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003dec:	2300      	movs	r3, #0
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	2310      	movs	r3, #16
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dfe:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <touch_Adjust+0x780>)
 8003e00:	213c      	movs	r1, #60	; 0x3c
 8003e02:	2005      	movs	r0, #5
 8003e04:	f7fe fc5a 	bl	80026bc <lcd_ShowStr>

						HAL_Delay(1000);
 8003e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e0c:	f000 f9a6 	bl	800415c <HAL_Delay>
 							continue;
 8003e10:	e0a8      	b.n	8003f64 <touch_Adjust+0x76c>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003e12:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <touch_Adjust+0x778>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	3b28      	subs	r3, #40	; 0x28
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e20:	88bb      	ldrh	r3, [r7, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	883b      	ldrh	r3, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e34:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <touch_Adjust+0x784>)
 8003e36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003e3a:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <touch_Adjust+0x778>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e46:	4b4d      	ldr	r3, [pc, #308]	; (8003f7c <touch_Adjust+0x784>)
 8003e48:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003e4c:	88bb      	ldrh	r3, [r7, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	883b      	ldrh	r3, [r7, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e70:	ee17 3a90 	vmov	r3, s15
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <touch_Adjust+0x784>)
 8003e78:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <touch_Adjust+0x778>)
 8003e7c:	885b      	ldrh	r3, [r3, #2]
 8003e7e:	3b28      	subs	r3, #40	; 0x28
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e88:	897b      	ldrh	r3, [r7, #10]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <touch_Adjust+0x784>)
 8003e9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8003ea2:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <touch_Adjust+0x778>)
 8003ea4:	885b      	ldrh	r3, [r3, #2]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eae:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <touch_Adjust+0x784>)
 8003eb0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	887b      	ldrh	r3, [r7, #2]
 8003eba:	4413      	add	r3, r2
 8003ebc:	ee07 3a90 	vmov	s15, r3
 8003ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ecc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed8:	ee17 3a90 	vmov	r3, s15
 8003edc:	b21a      	sxth	r2, r3
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <touch_Adjust+0x784>)
 8003ee0:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <touch_Adjust+0x778>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	3b14      	subs	r3, #20
 8003ee8:	b298      	uxth	r0, r3
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <touch_Adjust+0x778>)
 8003eec:	885b      	ldrh	r3, [r3, #2]
 8003eee:	3b14      	subs	r3, #20
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f7ff fb64 	bl	80035c4 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003efc:	2300      	movs	r3, #0
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	2310      	movs	r3, #16
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <touch_Adjust+0x788>)
 8003f10:	2128      	movs	r1, #40	; 0x28
 8003f12:	2005      	movs	r0, #5
 8003f14:	f7fe fbd2 	bl	80026bc <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <touch_Adjust+0x78c>)
 8003f2c:	213c      	movs	r1, #60	; 0x3c
 8003f2e:	2005      	movs	r0, #5
 8003f30:	f7fe fbc4 	bl	80026bc <lcd_ShowStr>
					HAL_Delay(1000);
 8003f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f38:	f000 f910 	bl	800415c <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	2310      	movs	r3, #16
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <touch_Adjust+0x790>)
 8003f50:	2128      	movs	r1, #40	; 0x28
 8003f52:	2005      	movs	r0, #5
 8003f54:	f7fe fbb2 	bl	80026bc <lcd_ShowStr>
					TP_Save_Adjdata();
 8003f58:	f7ff fc22 	bl	80037a0 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003f5c:	f7ff fc30 	bl	80037c0 <TP_Get_Adjdata>
					return;
 8003f60:	e001      	b.n	8003f66 <touch_Adjust+0x76e>
			}
		}
 8003f62:	bf00      	nop
		HAL_Delay(50);
 8003f64:	e494      	b.n	8003890 <touch_Adjust+0x98>
 	}
}
 8003f66:	3728      	adds	r7, #40	; 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	f3af 8000 	nop.w
 8003f70:	20000240 	.word	0x20000240
 8003f74:	08009444 	.word	0x08009444
 8003f78:	08009464 	.word	0x08009464
 8003f7c:	20000018 	.word	0x20000018
 8003f80:	08009484 	.word	0x08009484
 8003f84:	080094a4 	.word	0x080094a4
 8003f88:	080094c4 	.word	0x080094c4
 8003f8c:	66666666 	.word	0x66666666
 8003f90:	3fee6666 	.word	0x3fee6666
 8003f94:	cccccccd 	.word	0xcccccccd
 8003f98:	3ff0cccc 	.word	0x3ff0cccc

08003f9c <touch_init>:

void touch_init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8003fa0:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <touch_init+0x18>)
 8003fa2:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <touch_init+0x1c>)
 8003fa4:	f7ff fa8a 	bl	80034bc <TP_Read_XY>
	at24c_init();
 8003fa8:	f7fd f896 	bl	80010d8 <at24c_init>
	TP_Get_Adjdata();
 8003fac:	f7ff fc08 	bl	80037c0 <TP_Get_Adjdata>
}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	2000002e 	.word	0x2000002e
 8003fb8:	20000024 	.word	0x20000024

08003fbc <touch_Scan>:

void touch_Scan(){
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <touch_Scan+0x10>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4798      	blx	r3
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000018 	.word	0x20000018

08003fd0 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd8:	4805      	ldr	r0, [pc, #20]	; (8003ff0 <touch_IsTouched+0x20>)
 8003fda:	f001 f8dd 	bl	8005198 <HAL_GPIO_ReadPin>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020800 	.word	0x40020800

08003ff4 <touch_GetX>:

uint16_t touch_GetX(){
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <touch_GetX+0x14>)
 8003ffa:	899b      	ldrh	r3, [r3, #12]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000018 	.word	0x20000018

0800400c <touch_GetY>:

uint16_t touch_GetY(){
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <touch_GetY+0x14>)
 8004012:	8adb      	ldrh	r3, [r3, #22]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000018 	.word	0x20000018

08004024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800405c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004028:	480d      	ldr	r0, [pc, #52]	; (8004060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800402a:	490e      	ldr	r1, [pc, #56]	; (8004064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800402c:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800402e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004030:	e002      	b.n	8004038 <LoopCopyDataInit>

08004032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004036:	3304      	adds	r3, #4

08004038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800403c:	d3f9      	bcc.n	8004032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403e:	4a0b      	ldr	r2, [pc, #44]	; (800406c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004040:	4c0b      	ldr	r4, [pc, #44]	; (8004070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004044:	e001      	b.n	800404a <LoopFillZerobss>

08004046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004048:	3204      	adds	r2, #4

0800404a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800404c:	d3fb      	bcc.n	8004046 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800404e:	f7fe ff87 	bl	8002f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004052:	f004 f877 	bl	8008144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004056:	f7fe fc53 	bl	8002900 <main>
  bx  lr    
 800405a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800405c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004064:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004068:	0800c5d4 	.word	0x0800c5d4
  ldr r2, =_sbss
 800406c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8004070:	2000039c 	.word	0x2000039c

08004074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004074:	e7fe      	b.n	8004074 <ADC_IRQHandler>
	...

08004078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_Init+0x40>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0d      	ldr	r2, [pc, #52]	; (80040b8 <HAL_Init+0x40>)
 8004082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_Init+0x40>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <HAL_Init+0x40>)
 800408e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_Init+0x40>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <HAL_Init+0x40>)
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a0:	2003      	movs	r0, #3
 80040a2:	f000 fbb1 	bl	8004808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040a6:	200f      	movs	r0, #15
 80040a8:	f000 f808 	bl	80040bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040ac:	f7fe fe2c 	bl	8002d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00

080040bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_InitTick+0x54>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_InitTick+0x58>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fbc9 	bl	8004872 <HAL_SYSTICK_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e00e      	b.n	8004108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b0f      	cmp	r3, #15
 80040ee:	d80a      	bhi.n	8004106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f0:	2200      	movs	r2, #0
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	f000 fb91 	bl	800481e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040fc:	4a06      	ldr	r2, [pc, #24]	; (8004118 <HAL_InitTick+0x5c>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000014 	.word	0x20000014
 8004114:	20000054 	.word	0x20000054
 8004118:	20000050 	.word	0x20000050

0800411c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_IncTick+0x20>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_IncTick+0x24>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4413      	add	r3, r2
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <HAL_IncTick+0x24>)
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000054 	.word	0x20000054
 8004140:	20000388 	.word	0x20000388

08004144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return uwTick;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_GetTick+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000388 	.word	0x20000388

0800415c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff ffee 	bl	8004144 <HAL_GetTick>
 8004168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d005      	beq.n	8004182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_Delay+0x44>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004182:	bf00      	nop
 8004184:	f7ff ffde 	bl	8004144 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d8f7      	bhi.n	8004184 <HAL_Delay+0x28>
  {
  }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000054 	.word	0x20000054

080041a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e033      	b.n	8004222 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fef4 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d118      	bne.n	8004214 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041ea:	f023 0302 	bic.w	r3, r3, #2
 80041ee:	f043 0202 	orr.w	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f93a 	bl	8004470 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	f043 0201 	orr.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
 8004212:	e001      	b.n	8004218 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x1c>
 8004244:	2302      	movs	r3, #2
 8004246:	e105      	b.n	8004454 <HAL_ADC_ConfigChannel+0x228>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b09      	cmp	r3, #9
 8004256:	d925      	bls.n	80042a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	3b1e      	subs	r3, #30
 800426e:	2207      	movs	r2, #7
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43da      	mvns	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	400a      	ands	r2, r1
 800427c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68d9      	ldr	r1, [r3, #12]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	4618      	mov	r0, r3
 8004290:	4603      	mov	r3, r0
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4403      	add	r3, r0
 8004296:	3b1e      	subs	r3, #30
 8004298:	409a      	lsls	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	e022      	b.n	80042ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	4613      	mov	r3, r2
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	4413      	add	r3, r2
 80042b8:	2207      	movs	r2, #7
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	400a      	ands	r2, r1
 80042c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6919      	ldr	r1, [r3, #16]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4403      	add	r3, r0
 80042e0:	409a      	lsls	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d824      	bhi.n	800433c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	3b05      	subs	r3, #5
 8004304:	221f      	movs	r2, #31
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	400a      	ands	r2, r1
 8004312:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	4618      	mov	r0, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	3b05      	subs	r3, #5
 800432e:	fa00 f203 	lsl.w	r2, r0, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	635a      	str	r2, [r3, #52]	; 0x34
 800433a:	e04c      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d824      	bhi.n	800438e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	3b23      	subs	r3, #35	; 0x23
 8004356:	221f      	movs	r2, #31
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43da      	mvns	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	400a      	ands	r2, r1
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4618      	mov	r0, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	3b23      	subs	r3, #35	; 0x23
 8004380:	fa00 f203 	lsl.w	r2, r0, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
 800438c:	e023      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	3b41      	subs	r3, #65	; 0x41
 80043a0:	221f      	movs	r2, #31
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	400a      	ands	r2, r1
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4618      	mov	r0, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	3b41      	subs	r3, #65	; 0x41
 80043ca:	fa00 f203 	lsl.w	r2, r0, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_ADC_ConfigChannel+0x234>)
 80043d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_ADC_ConfigChannel+0x238>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x1cc>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b12      	cmp	r3, #18
 80043ea:	d105      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <HAL_ADC_ConfigChannel+0x238>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d123      	bne.n	800444a <HAL_ADC_ConfigChannel+0x21e>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b10      	cmp	r3, #16
 8004408:	d003      	beq.n	8004412 <HAL_ADC_ConfigChannel+0x1e6>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b11      	cmp	r3, #17
 8004410:	d11b      	bne.n	800444a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b10      	cmp	r3, #16
 8004424:	d111      	bne.n	800444a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HAL_ADC_ConfigChannel+0x23c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <HAL_ADC_ConfigChannel+0x240>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	0c9a      	lsrs	r2, r3, #18
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800443c:	e002      	b.n	8004444 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3b01      	subs	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f9      	bne.n	800443e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012300 	.word	0x40012300
 8004464:	40012000 	.word	0x40012000
 8004468:	20000014 	.word	0x20000014
 800446c:	431bde83 	.word	0x431bde83

08004470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004478:	4b79      	ldr	r3, [pc, #484]	; (8004660 <ADC_Init+0x1f0>)
 800447a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	021a      	lsls	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	4a58      	ldr	r2, [pc, #352]	; (8004664 <ADC_Init+0x1f4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	e00f      	b.n	800456e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800455c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800456c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0202 	bic.w	r2, r2, #2
 800457c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7e1b      	ldrb	r3, [r3, #24]
 8004588:	005a      	lsls	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	3b01      	subs	r3, #1
 80045c8:	035a      	lsls	r2, r3, #13
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e007      	b.n	80045e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	3b01      	subs	r3, #1
 8004600:	051a      	lsls	r2, r3, #20
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004626:	025a      	lsls	r2, r3, #9
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	029a      	lsls	r2, r3, #10
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012300 	.word	0x40012300
 8004664:	0f000001 	.word	0x0f000001

08004668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004684:	4013      	ands	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469a:	4a04      	ldr	r2, [pc, #16]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	60d3      	str	r3, [r2, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__NVIC_GetPriorityGrouping+0x18>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	f003 0307 	and.w	r3, r3, #7
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db0b      	blt.n	80046f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4907      	ldr	r1, [pc, #28]	; (8004704 <__NVIC_EnableIRQ+0x38>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	fa00 f202 	lsl.w	r2, r0, r2
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
         );
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d4:	d301      	bcc.n	80047da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <SysTick_Config+0x40>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047e2:	210f      	movs	r1, #15
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	f7ff ff8e 	bl	8004708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <SysTick_Config+0x40>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <SysTick_Config+0x40>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	e000e010 	.word	0xe000e010

08004808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff29 	bl	8004668 <__NVIC_SetPriorityGrouping>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004830:	f7ff ff3e 	bl	80046b0 <__NVIC_GetPriorityGrouping>
 8004834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff ff8e 	bl	800475c <NVIC_EncodePriority>
 8004840:	4602      	mov	r2, r0
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff5d 	bl	8004708 <__NVIC_SetPriority>
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff31 	bl	80046cc <__NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffa2 	bl	80047c4 <SysTick_Config>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004898:	f7ff fc54 	bl	8004144 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e099      	b.n	80049dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c8:	e00f      	b.n	80048ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ca:	f7ff fc3b 	bl	8004144 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d908      	bls.n	80048ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e078      	b.n	80049dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e8      	bne.n	80048ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_DMA_Init+0x158>)
 8004904:	4013      	ands	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2b04      	cmp	r3, #4
 8004942:	d107      	bne.n	8004954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4313      	orrs	r3, r2
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b04      	cmp	r3, #4
 800497c:	d117      	bne.n	80049ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f9e9 	bl	8004d68 <DMA_CheckFifoParam>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049aa:	2301      	movs	r3, #1
 80049ac:	e016      	b.n	80049dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9a0 	bl	8004cfc <DMA_CalcBaseAndBitshift>
 80049bc:	4603      	mov	r3, r0
 80049be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	223f      	movs	r2, #63	; 0x3f
 80049c6:	409a      	lsls	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	f010803f 	.word	0xf010803f

080049e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049f4:	4b8e      	ldr	r3, [pc, #568]	; (8004c30 <HAL_DMA_IRQHandler+0x248>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a8e      	ldr	r2, [pc, #568]	; (8004c34 <HAL_DMA_IRQHandler+0x24c>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0a9b      	lsrs	r3, r3, #10
 8004a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a12:	2208      	movs	r2, #8
 8004a14:	409a      	lsls	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01a      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0204 	bic.w	r2, r2, #4
 8004a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	2208      	movs	r2, #8
 8004a42:	409a      	lsls	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	2201      	movs	r2, #1
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f043 0202 	orr.w	r2, r3, #2
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	2204      	movs	r2, #4
 8004a90:	409a      	lsls	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	2204      	movs	r2, #4
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f043 0204 	orr.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2210      	movs	r2, #16
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d043      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d03c      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	2210      	movs	r2, #16
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d024      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	e01f      	b.n	8004b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	e016      	b.n	8004b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0208 	bic.w	r2, r2, #8
 8004b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 808f 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8087 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	2220      	movs	r2, #32
 8004b80:	409a      	lsls	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d136      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0216 	bic.w	r2, r2, #22
 8004ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x1da>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	223f      	movs	r2, #63	; 0x3f
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d07e      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
        }
        return;
 8004bfe:	e079      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01d      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10d      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d031      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
 8004c2c:	e02c      	b.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
 8004c2e:	bf00      	nop
 8004c30:	20000014 	.word	0x20000014
 8004c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d023      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	e01e      	b.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0210 	bic.w	r2, r2, #16
 8004c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d032      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d022      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2205      	movs	r2, #5
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d307      	bcc.n	8004cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f2      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x2cc>
 8004cce:	e000      	b.n	8004cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
 8004cf2:	e000      	b.n	8004cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cf4:	bf00      	nop
    }
  }
}
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	3b10      	subs	r3, #16
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <DMA_CalcBaseAndBitshift+0x64>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d16:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <DMA_CalcBaseAndBitshift+0x68>)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d909      	bls.n	8004d3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	1d1a      	adds	r2, r3, #4
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d3c:	e007      	b.n	8004d4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	aaaaaaab 	.word	0xaaaaaaab
 8004d64:	0800c474 	.word	0x0800c474

08004d68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11f      	bne.n	8004dc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d856      	bhi.n	8004e36 <DMA_CheckFifoParam+0xce>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <DMA_CheckFifoParam+0x28>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004db3 	.word	0x08004db3
 8004d98:	08004da1 	.word	0x08004da1
 8004d9c:	08004e37 	.word	0x08004e37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d046      	beq.n	8004e3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db0:	e043      	b.n	8004e3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dba:	d140      	bne.n	8004e3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc0:	e03d      	b.n	8004e3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d121      	bne.n	8004e10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d837      	bhi.n	8004e42 <DMA_CheckFifoParam+0xda>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <DMA_CheckFifoParam+0x70>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004de9 	.word	0x08004de9
 8004ddc:	08004def 	.word	0x08004def
 8004de0:	08004de9 	.word	0x08004de9
 8004de4:	08004e01 	.word	0x08004e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	e030      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d025      	beq.n	8004e46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfe:	e022      	b.n	8004e46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e08:	d11f      	bne.n	8004e4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e0e:	e01c      	b.n	8004e4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d903      	bls.n	8004e1e <DMA_CheckFifoParam+0xb6>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d003      	beq.n	8004e24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e1c:	e018      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
      break;
 8004e22:	e015      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00e      	beq.n	8004e4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      break;
 8004e34:	e00b      	b.n	8004e4e <DMA_CheckFifoParam+0xe6>
      break;
 8004e36:	bf00      	nop
 8004e38:	e00a      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e008      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e006      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      break;
 8004e42:	bf00      	nop
 8004e44:	e004      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      break;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <DMA_CheckFifoParam+0xe8>
      break;
 8004e4e:	bf00      	nop
    }
  } 
  
  return status; 
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop

08004e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	e16b      	b.n	8005154 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	f040 815a 	bne.w	800514e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d005      	beq.n	8004eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d130      	bne.n	8004f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ee8:	2201      	movs	r2, #1
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 0201 	and.w	r2, r3, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d017      	beq.n	8004f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d123      	bne.n	8004fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	08da      	lsrs	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3208      	adds	r2, #8
 8004f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	220f      	movs	r2, #15
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	08da      	lsrs	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3208      	adds	r2, #8
 8004f9e:	69b9      	ldr	r1, [r7, #24]
 8004fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0203 	and.w	r2, r3, #3
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80b4 	beq.w	800514e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	4b60      	ldr	r3, [pc, #384]	; (800516c <HAL_GPIO_Init+0x30c>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	4a5f      	ldr	r2, [pc, #380]	; (800516c <HAL_GPIO_Init+0x30c>)
 8004ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	; (800516c <HAL_GPIO_Init+0x30c>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005002:	4a5b      	ldr	r2, [pc, #364]	; (8005170 <HAL_GPIO_Init+0x310>)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	089b      	lsrs	r3, r3, #2
 8005008:	3302      	adds	r3, #2
 800500a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	220f      	movs	r2, #15
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_GPIO_Init+0x314>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d02b      	beq.n	8005086 <HAL_GPIO_Init+0x226>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_GPIO_Init+0x318>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d025      	beq.n	8005082 <HAL_GPIO_Init+0x222>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_GPIO_Init+0x31c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01f      	beq.n	800507e <HAL_GPIO_Init+0x21e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a4f      	ldr	r2, [pc, #316]	; (8005180 <HAL_GPIO_Init+0x320>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d019      	beq.n	800507a <HAL_GPIO_Init+0x21a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a4e      	ldr	r2, [pc, #312]	; (8005184 <HAL_GPIO_Init+0x324>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_GPIO_Init+0x216>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a4d      	ldr	r2, [pc, #308]	; (8005188 <HAL_GPIO_Init+0x328>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00d      	beq.n	8005072 <HAL_GPIO_Init+0x212>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a4c      	ldr	r2, [pc, #304]	; (800518c <HAL_GPIO_Init+0x32c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <HAL_GPIO_Init+0x20e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a4b      	ldr	r2, [pc, #300]	; (8005190 <HAL_GPIO_Init+0x330>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_GPIO_Init+0x20a>
 8005066:	2307      	movs	r3, #7
 8005068:	e00e      	b.n	8005088 <HAL_GPIO_Init+0x228>
 800506a:	2308      	movs	r3, #8
 800506c:	e00c      	b.n	8005088 <HAL_GPIO_Init+0x228>
 800506e:	2306      	movs	r3, #6
 8005070:	e00a      	b.n	8005088 <HAL_GPIO_Init+0x228>
 8005072:	2305      	movs	r3, #5
 8005074:	e008      	b.n	8005088 <HAL_GPIO_Init+0x228>
 8005076:	2304      	movs	r3, #4
 8005078:	e006      	b.n	8005088 <HAL_GPIO_Init+0x228>
 800507a:	2303      	movs	r3, #3
 800507c:	e004      	b.n	8005088 <HAL_GPIO_Init+0x228>
 800507e:	2302      	movs	r3, #2
 8005080:	e002      	b.n	8005088 <HAL_GPIO_Init+0x228>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_GPIO_Init+0x228>
 8005086:	2300      	movs	r3, #0
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	f002 0203 	and.w	r2, r2, #3
 800508e:	0092      	lsls	r2, r2, #2
 8005090:	4093      	lsls	r3, r2
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005098:	4935      	ldr	r1, [pc, #212]	; (8005170 <HAL_GPIO_Init+0x310>)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	3302      	adds	r3, #2
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <HAL_GPIO_Init+0x334>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050ca:	4a32      	ldr	r2, [pc, #200]	; (8005194 <HAL_GPIO_Init+0x334>)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050d0:	4b30      	ldr	r3, [pc, #192]	; (8005194 <HAL_GPIO_Init+0x334>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050f4:	4a27      	ldr	r2, [pc, #156]	; (8005194 <HAL_GPIO_Init+0x334>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <HAL_GPIO_Init+0x334>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800511e:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <HAL_GPIO_Init+0x334>)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005124:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_GPIO_Init+0x334>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005148:	4a12      	ldr	r2, [pc, #72]	; (8005194 <HAL_GPIO_Init+0x334>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3301      	adds	r3, #1
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	f67f ae90 	bls.w	8004e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	3724      	adds	r7, #36	; 0x24
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40013800 	.word	0x40013800
 8005174:	40020000 	.word	0x40020000
 8005178:	40020400 	.word	0x40020400
 800517c:	40020800 	.word	0x40020800
 8005180:	40020c00 	.word	0x40020c00
 8005184:	40021000 	.word	0x40021000
 8005188:	40021400 	.word	0x40021400
 800518c:	40021800 	.word	0x40021800
 8005190:	40021c00 	.word	0x40021c00
 8005194:	40013c00 	.word	0x40013c00

08005198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
 80051b4:	e001      	b.n	80051ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
 80051d4:	4613      	mov	r3, r2
 80051d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051d8:	787b      	ldrb	r3, [r7, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051de:	887a      	ldrh	r2, [r7, #2]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051e4:	e003      	b.n	80051ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051e6:	887b      	ldrh	r3, [r7, #2]
 80051e8:	041a      	lsls	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	619a      	str	r2, [r3, #24]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e12b      	b.n	8005466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc fc64 	bl	8001af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2224      	movs	r2, #36	; 0x24
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800524e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800525e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005260:	f001 fbfc 	bl	8006a5c <HAL_RCC_GetPCLK1Freq>
 8005264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4a81      	ldr	r2, [pc, #516]	; (8005470 <HAL_I2C_Init+0x274>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d807      	bhi.n	8005280 <HAL_I2C_Init+0x84>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a80      	ldr	r2, [pc, #512]	; (8005474 <HAL_I2C_Init+0x278>)
 8005274:	4293      	cmp	r3, r2
 8005276:	bf94      	ite	ls
 8005278:	2301      	movls	r3, #1
 800527a:	2300      	movhi	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e006      	b.n	800528e <HAL_I2C_Init+0x92>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a7d      	ldr	r2, [pc, #500]	; (8005478 <HAL_I2C_Init+0x27c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	bf94      	ite	ls
 8005288:	2301      	movls	r3, #1
 800528a:	2300      	movhi	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0e7      	b.n	8005466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a78      	ldr	r2, [pc, #480]	; (800547c <HAL_I2C_Init+0x280>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0c9b      	lsrs	r3, r3, #18
 80052a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a6a      	ldr	r2, [pc, #424]	; (8005470 <HAL_I2C_Init+0x274>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d802      	bhi.n	80052d0 <HAL_I2C_Init+0xd4>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	3301      	adds	r3, #1
 80052ce:	e009      	b.n	80052e4 <HAL_I2C_Init+0xe8>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	4a69      	ldr	r2, [pc, #420]	; (8005480 <HAL_I2C_Init+0x284>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	099b      	lsrs	r3, r3, #6
 80052e2:	3301      	adds	r3, #1
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	495c      	ldr	r1, [pc, #368]	; (8005470 <HAL_I2C_Init+0x274>)
 8005300:	428b      	cmp	r3, r1
 8005302:	d819      	bhi.n	8005338 <HAL_I2C_Init+0x13c>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1e59      	subs	r1, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005312:	1c59      	adds	r1, r3, #1
 8005314:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005318:	400b      	ands	r3, r1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_I2C_Init+0x138>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1e59      	subs	r1, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fbb1 f3f3 	udiv	r3, r1, r3
 800532c:	3301      	adds	r3, #1
 800532e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005332:	e051      	b.n	80053d8 <HAL_I2C_Init+0x1dc>
 8005334:	2304      	movs	r3, #4
 8005336:	e04f      	b.n	80053d8 <HAL_I2C_Init+0x1dc>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d111      	bne.n	8005364 <HAL_I2C_Init+0x168>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1e58      	subs	r0, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	440b      	add	r3, r1
 800534e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005352:	3301      	adds	r3, #1
 8005354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005358:	2b00      	cmp	r3, #0
 800535a:	bf0c      	ite	eq
 800535c:	2301      	moveq	r3, #1
 800535e:	2300      	movne	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	e012      	b.n	800538a <HAL_I2C_Init+0x18e>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1e58      	subs	r0, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	0099      	lsls	r1, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	fbb0 f3f3 	udiv	r3, r0, r3
 800537a:	3301      	adds	r3, #1
 800537c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005380:	2b00      	cmp	r3, #0
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_I2C_Init+0x196>
 800538e:	2301      	movs	r3, #1
 8005390:	e022      	b.n	80053d8 <HAL_I2C_Init+0x1dc>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10e      	bne.n	80053b8 <HAL_I2C_Init+0x1bc>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1e58      	subs	r0, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6859      	ldr	r1, [r3, #4]
 80053a2:	460b      	mov	r3, r1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	440b      	add	r3, r1
 80053a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ac:	3301      	adds	r3, #1
 80053ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	e00f      	b.n	80053d8 <HAL_I2C_Init+0x1dc>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1e58      	subs	r0, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	0099      	lsls	r1, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	6809      	ldr	r1, [r1, #0]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6911      	ldr	r1, [r2, #16]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68d2      	ldr	r2, [r2, #12]
 8005412:	4311      	orrs	r1, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	430b      	orrs	r3, r1
 800541a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	000186a0 	.word	0x000186a0
 8005474:	001e847f 	.word	0x001e847f
 8005478:	003d08ff 	.word	0x003d08ff
 800547c:	431bde83 	.word	0x431bde83
 8005480:	10624dd3 	.word	0x10624dd3

08005484 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4603      	mov	r3, r0
 8005494:	817b      	strh	r3, [r7, #10]
 8005496:	460b      	mov	r3, r1
 8005498:	813b      	strh	r3, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800549e:	f7fe fe51 	bl	8004144 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	f040 80d9 	bne.w	8005664 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	2319      	movs	r3, #25
 80054b8:	2201      	movs	r2, #1
 80054ba:	496d      	ldr	r1, [pc, #436]	; (8005670 <HAL_I2C_Mem_Write+0x1ec>)
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fc7f 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
 80054ca:	e0cc      	b.n	8005666 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_I2C_Mem_Write+0x56>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e0c5      	b.n	8005666 <HAL_I2C_Mem_Write+0x1e2>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d007      	beq.n	8005500 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2221      	movs	r2, #33	; 0x21
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2240      	movs	r2, #64	; 0x40
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005530:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a4d      	ldr	r2, [pc, #308]	; (8005674 <HAL_I2C_Mem_Write+0x1f0>)
 8005540:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005542:	88f8      	ldrh	r0, [r7, #6]
 8005544:	893a      	ldrh	r2, [r7, #8]
 8005546:	8979      	ldrh	r1, [r7, #10]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4603      	mov	r3, r0
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fab6 	bl	8005ac4 <I2C_RequestMemoryWrite>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d052      	beq.n	8005604 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e081      	b.n	8005666 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fd00 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	2b04      	cmp	r3, #4
 8005578:	d107      	bne.n	800558a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e06b      	b.n	8005666 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d11b      	bne.n	8005604 <HAL_I2C_Mem_Write+0x180>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d017      	beq.n	8005604 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1aa      	bne.n	8005562 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fcec 	bl	8005fee <I2C_WaitOnBTFFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	2b04      	cmp	r3, #4
 8005622:	d107      	bne.n	8005634 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e016      	b.n	8005666 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	00100002 	.word	0x00100002
 8005674:	ffff0000 	.word	0xffff0000

08005678 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005692:	f7fe fd57 	bl	8004144 <HAL_GetTick>
 8005696:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	f040 8208 	bne.w	8005ab6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	2319      	movs	r3, #25
 80056ac:	2201      	movs	r2, #1
 80056ae:	497b      	ldr	r1, [pc, #492]	; (800589c <HAL_I2C_Mem_Read+0x224>)
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fb85 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
 80056be:	e1fb      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_I2C_Mem_Read+0x56>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e1f4      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d007      	beq.n	80056f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2222      	movs	r2, #34	; 0x22
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a5b      	ldr	r2, [pc, #364]	; (80058a0 <HAL_I2C_Mem_Read+0x228>)
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005736:	88f8      	ldrh	r0, [r7, #6]
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	8979      	ldrh	r1, [r7, #10]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4603      	mov	r3, r0
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fa52 	bl	8005bf0 <I2C_RequestMemoryRead>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e1b0      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d113      	bne.n	8005786 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575e:	2300      	movs	r3, #0
 8005760:	623b      	str	r3, [r7, #32]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e184      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578a:	2b01      	cmp	r3, #1
 800578c:	d11b      	bne.n	80057c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e164      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d11b      	bne.n	8005806 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	e144      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800581c:	e138      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	2b03      	cmp	r3, #3
 8005824:	f200 80f1 	bhi.w	8005a0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	2b01      	cmp	r3, #1
 800582e:	d123      	bne.n	8005878 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fc1b 	bl	8006070 <I2C_WaitOnRXNEFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e139      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005876:	e10b      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587c:	2b02      	cmp	r3, #2
 800587e:	d14e      	bne.n	800591e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	2200      	movs	r2, #0
 8005888:	4906      	ldr	r1, [pc, #24]	; (80058a4 <HAL_I2C_Mem_Read+0x22c>)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fa98 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e10e      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
 800589a:	bf00      	nop
 800589c:	00100002 	.word	0x00100002
 80058a0:	ffff0000 	.word	0xffff0000
 80058a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800591c:	e0b8      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	2200      	movs	r2, #0
 8005926:	4966      	ldr	r1, [pc, #408]	; (8005ac0 <HAL_I2C_Mem_Read+0x448>)
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fa49 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0bf      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	2200      	movs	r2, #0
 8005982:	494f      	ldr	r1, [pc, #316]	; (8005ac0 <HAL_I2C_Mem_Read+0x448>)
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fa1b 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e091      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a08:	e042      	b.n	8005a90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fb2e 	bl	8006070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e04c      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d118      	bne.n	8005a90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f47f aec2 	bne.w	800581e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3728      	adds	r7, #40	; 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00010004 	.word	0x00010004

08005ac4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f960 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b14:	d103      	bne.n	8005b1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e05f      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	492d      	ldr	r1, [pc, #180]	; (8005bec <I2C_RequestMemoryWrite+0x128>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f998 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e04c      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fa02 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d107      	bne.n	8005b86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02b      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	e021      	b.n	8005be0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	6a39      	ldr	r1, [r7, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f9dc 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d107      	bne.n	8005bd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e005      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	00010002 	.word	0x00010002

08005bf0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	817b      	strh	r3, [r7, #10]
 8005c02:	460b      	mov	r3, r1
 8005c04:	813b      	strh	r3, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f8c2 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c50:	d103      	bne.n	8005c5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0aa      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	4952      	ldr	r1, [pc, #328]	; (8005dbc <I2C_RequestMemoryRead+0x1cc>)
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f8fa 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e097      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	6a39      	ldr	r1, [r7, #32]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f964 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d107      	bne.n	8005cc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e076      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	611a      	str	r2, [r3, #16]
 8005cd6:	e021      	b.n	8005d1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cd8:	893b      	ldrh	r3, [r7, #8]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	6a39      	ldr	r1, [r7, #32]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f93e 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d107      	bne.n	8005d0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e050      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d12:	893b      	ldrh	r3, [r7, #8]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1e:	6a39      	ldr	r1, [r7, #32]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f923 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d107      	bne.n	8005d44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e035      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f82b 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d103      	bne.n	8005d88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e013      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d8c:	897b      	ldrh	r3, [r7, #10]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	6a3a      	ldr	r2, [r7, #32]
 8005da0:	4906      	ldr	r1, [pc, #24]	; (8005dbc <I2C_RequestMemoryRead+0x1cc>)
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f863 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	00010002 	.word	0x00010002

08005dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd0:	e025      	b.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d021      	beq.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fe f9b3 	bl	8004144 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e023      	b.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10d      	bne.n	8005e44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	e00c      	b.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	43da      	mvns	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d0b6      	beq.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e7c:	e051      	b.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d123      	bne.n	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ea6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f043 0204 	orr.w	r2, r3, #4
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e046      	b.n	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d021      	beq.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fe f931 	bl	8004144 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e020      	b.n	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10c      	bne.n	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf14      	ite	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	2300      	moveq	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	e00b      	b.n	8005f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	43da      	mvns	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d18d      	bne.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f78:	e02d      	b.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f8ce 	bl	800611c <I2C_IsAcknowledgeFailed>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e02d      	b.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d021      	beq.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fe f8d7 	bl	8004144 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d116      	bne.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e007      	b.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d1ca      	bne.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ffa:	e02d      	b.n	8006058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f88d 	bl	800611c <I2C_IsAcknowledgeFailed>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e02d      	b.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d021      	beq.n	8006058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fe f896 	bl	8004144 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d116      	bne.n	8006058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e007      	b.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b04      	cmp	r3, #4
 8006064:	d1ca      	bne.n	8005ffc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800607c:	e042      	b.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d119      	bne.n	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0210 	mvn.w	r2, #16
 8006094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e029      	b.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c0:	f7fe f840 	bl	8004144 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d116      	bne.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e007      	b.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d1b5      	bne.n	800607e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d11b      	bne.n	800616c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800613c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0204 	orr.w	r2, r3, #4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e267      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d075      	beq.n	8006286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800619a:	4b88      	ldr	r3, [pc, #544]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d00c      	beq.n	80061c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061a6:	4b85      	ldr	r3, [pc, #532]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d112      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b2:	4b82      	ldr	r3, [pc, #520]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061be:	d10b      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	4b7e      	ldr	r3, [pc, #504]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d05b      	beq.n	8006284 <HAL_RCC_OscConfig+0x108>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d157      	bne.n	8006284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e242      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d106      	bne.n	80061f0 <HAL_RCC_OscConfig+0x74>
 80061e2:	4b76      	ldr	r3, [pc, #472]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a75      	ldr	r2, [pc, #468]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e01d      	b.n	800622c <HAL_RCC_OscConfig+0xb0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0x98>
 80061fa:	4b70      	ldr	r3, [pc, #448]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6f      	ldr	r2, [pc, #444]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4b6d      	ldr	r3, [pc, #436]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a6c      	ldr	r2, [pc, #432]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0xb0>
 8006214:	4b69      	ldr	r3, [pc, #420]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a68      	ldr	r2, [pc, #416]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b66      	ldr	r3, [pc, #408]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a65      	ldr	r2, [pc, #404]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006234:	f7fd ff86 	bl	8004144 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800623c:	f7fd ff82 	bl	8004144 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b64      	cmp	r3, #100	; 0x64
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e207      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	4b5b      	ldr	r3, [pc, #364]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0xc0>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fd ff72 	bl	8004144 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006264:	f7fd ff6e 	bl	8004144 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b64      	cmp	r3, #100	; 0x64
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e1f3      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006276:	4b51      	ldr	r3, [pc, #324]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0xe8>
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d063      	beq.n	800635a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006292:	4b4a      	ldr	r3, [pc, #296]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800629e:	4b47      	ldr	r3, [pc, #284]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d11c      	bne.n	80062e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062aa:	4b44      	ldr	r3, [pc, #272]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d116      	bne.n	80062e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062b6:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_RCC_OscConfig+0x152>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d001      	beq.n	80062ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e1c7      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ce:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4937      	ldr	r1, [pc, #220]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e2:	e03a      	b.n	800635a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d020      	beq.n	800632e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062ec:	4b34      	ldr	r3, [pc, #208]	; (80063c0 <HAL_RCC_OscConfig+0x244>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fd ff27 	bl	8004144 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062fa:	f7fd ff23 	bl	8004144 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1a8      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630c:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006318:	4b28      	ldr	r3, [pc, #160]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	4925      	ldr	r1, [pc, #148]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006328:	4313      	orrs	r3, r2
 800632a:	600b      	str	r3, [r1, #0]
 800632c:	e015      	b.n	800635a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800632e:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <HAL_RCC_OscConfig+0x244>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006334:	f7fd ff06 	bl	8004144 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800633c:	f7fd ff02 	bl	8004144 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e187      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d036      	beq.n	80063d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d016      	beq.n	800639c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_RCC_OscConfig+0x248>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006374:	f7fd fee6 	bl	8004144 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800637c:	f7fd fee2 	bl	8004144 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e167      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x200>
 800639a:	e01b      	b.n	80063d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <HAL_RCC_OscConfig+0x248>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a2:	f7fd fecf 	bl	8004144 <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a8:	e00e      	b.n	80063c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063aa:	f7fd fecb 	bl	8004144 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d907      	bls.n	80063c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e150      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
 80063bc:	40023800 	.word	0x40023800
 80063c0:	42470000 	.word	0x42470000
 80063c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c8:	4b88      	ldr	r3, [pc, #544]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1ea      	bne.n	80063aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8097 	beq.w	8006510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063e6:	4b81      	ldr	r3, [pc, #516]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10f      	bne.n	8006412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	4b7d      	ldr	r3, [pc, #500]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	4a7c      	ldr	r2, [pc, #496]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6413      	str	r3, [r2, #64]	; 0x40
 8006402:	4b7a      	ldr	r3, [pc, #488]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006412:	4b77      	ldr	r3, [pc, #476]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641a:	2b00      	cmp	r3, #0
 800641c:	d118      	bne.n	8006450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800641e:	4b74      	ldr	r3, [pc, #464]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a73      	ldr	r2, [pc, #460]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642a:	f7fd fe8b 	bl	8004144 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006432:	f7fd fe87 	bl	8004144 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e10c      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006444:	4b6a      	ldr	r3, [pc, #424]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x2ea>
 8006458:	4b64      	ldr	r3, [pc, #400]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	4a63      	ldr	r2, [pc, #396]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	6713      	str	r3, [r2, #112]	; 0x70
 8006464:	e01c      	b.n	80064a0 <HAL_RCC_OscConfig+0x324>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b05      	cmp	r3, #5
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x30c>
 800646e:	4b5f      	ldr	r3, [pc, #380]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	4a5e      	ldr	r2, [pc, #376]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	6713      	str	r3, [r2, #112]	; 0x70
 800647a:	4b5c      	ldr	r3, [pc, #368]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a5b      	ldr	r2, [pc, #364]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	e00b      	b.n	80064a0 <HAL_RCC_OscConfig+0x324>
 8006488:	4b58      	ldr	r3, [pc, #352]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4a57      	ldr	r2, [pc, #348]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	6713      	str	r3, [r2, #112]	; 0x70
 8006494:	4b55      	ldr	r3, [pc, #340]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	4a54      	ldr	r2, [pc, #336]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800649a:	f023 0304 	bic.w	r3, r3, #4
 800649e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a8:	f7fd fe4c 	bl	8004144 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ae:	e00a      	b.n	80064c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b0:	f7fd fe48 	bl	8004144 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e0cb      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c6:	4b49      	ldr	r3, [pc, #292]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0ee      	beq.n	80064b0 <HAL_RCC_OscConfig+0x334>
 80064d2:	e014      	b.n	80064fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d4:	f7fd fe36 	bl	8004144 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064dc:	f7fd fe32 	bl	8004144 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e0b5      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f2:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ee      	bne.n	80064dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d105      	bne.n	8006510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006504:	4b39      	ldr	r3, [pc, #228]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	4a38      	ldr	r2, [pc, #224]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800650a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80a1 	beq.w	800665c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800651a:	4b34      	ldr	r3, [pc, #208]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
 8006522:	2b08      	cmp	r3, #8
 8006524:	d05c      	beq.n	80065e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d141      	bne.n	80065b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652e:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <HAL_RCC_OscConfig+0x478>)
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006534:	f7fd fe06 	bl	8004144 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800653c:	f7fd fe02 	bl	8004144 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e087      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800654e:	4b27      	ldr	r3, [pc, #156]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	3b01      	subs	r3, #1
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	061b      	lsls	r3, r3, #24
 800657e:	491b      	ldr	r1, [pc, #108]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <HAL_RCC_OscConfig+0x478>)
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658a:	f7fd fddb 	bl	8004144 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006592:	f7fd fdd7 	bl	8004144 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e05c      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a4:	4b11      	ldr	r3, [pc, #68]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x416>
 80065b0:	e054      	b.n	800665c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fd fdc4 	bl	8004144 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fd fdc0 	bl	8004144 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e045      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x444>
 80065de:	e03d      	b.n	800665c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d107      	bne.n	80065f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e038      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
 80065ec:	40023800 	.word	0x40023800
 80065f0:	40007000 	.word	0x40007000
 80065f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065f8:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <HAL_RCC_OscConfig+0x4ec>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d028      	beq.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006610:	429a      	cmp	r2, r3
 8006612:	d121      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d11a      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800662e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006630:	4293      	cmp	r3, r2
 8006632:	d111      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	3b01      	subs	r3, #1
 8006642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d107      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d001      	beq.n	800665c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40023800 	.word	0x40023800

0800666c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0cc      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006680:	4b68      	ldr	r3, [pc, #416]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d90c      	bls.n	80066a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668e:	4b65      	ldr	r3, [pc, #404]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0b8      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c0:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a58      	ldr	r2, [pc, #352]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066d8:	4b53      	ldr	r3, [pc, #332]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	4a52      	ldr	r2, [pc, #328]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e4:	4b50      	ldr	r3, [pc, #320]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	494d      	ldr	r1, [pc, #308]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d044      	beq.n	800678c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d107      	bne.n	800671a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670a:	4b47      	ldr	r3, [pc, #284]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d119      	bne.n	800674a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e07f      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d003      	beq.n	800672a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006726:	2b03      	cmp	r3, #3
 8006728:	d107      	bne.n	800673a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672a:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e06f      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673a:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e067      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f023 0203 	bic.w	r2, r3, #3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4934      	ldr	r1, [pc, #208]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	4313      	orrs	r3, r2
 800675a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800675c:	f7fd fcf2 	bl	8004144 <HAL_GetTick>
 8006760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	e00a      	b.n	800677a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006764:	f7fd fcee 	bl	8004144 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e04f      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677a:	4b2b      	ldr	r3, [pc, #172]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 020c 	and.w	r2, r3, #12
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	429a      	cmp	r2, r3
 800678a:	d1eb      	bne.n	8006764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d20c      	bcs.n	80067b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b20      	ldr	r3, [pc, #128]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e032      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c0:	4b19      	ldr	r3, [pc, #100]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4916      	ldr	r1, [pc, #88]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	490e      	ldr	r1, [pc, #56]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067f2:	f000 f821 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	490a      	ldr	r1, [pc, #40]	; (800682c <HAL_RCC_ClockConfig+0x1c0>)
 8006804:	5ccb      	ldrb	r3, [r1, r3]
 8006806:	fa22 f303 	lsr.w	r3, r2, r3
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <HAL_RCC_ClockConfig+0x1c4>)
 800680c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800680e:	4b09      	ldr	r3, [pc, #36]	; (8006834 <HAL_RCC_ClockConfig+0x1c8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fd fc52 	bl	80040bc <HAL_InitTick>

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40023c00 	.word	0x40023c00
 8006828:	40023800 	.word	0x40023800
 800682c:	0800c45c 	.word	0x0800c45c
 8006830:	20000014 	.word	0x20000014
 8006834:	20000050 	.word	0x20000050

08006838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800683c:	b094      	sub	sp, #80	; 0x50
 800683e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	647b      	str	r3, [r7, #68]	; 0x44
 8006844:	2300      	movs	r3, #0
 8006846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006848:	2300      	movs	r3, #0
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006850:	4b79      	ldr	r3, [pc, #484]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 030c 	and.w	r3, r3, #12
 8006858:	2b08      	cmp	r3, #8
 800685a:	d00d      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0x40>
 800685c:	2b08      	cmp	r3, #8
 800685e:	f200 80e1 	bhi.w	8006a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0x34>
 8006866:	2b04      	cmp	r3, #4
 8006868:	d003      	beq.n	8006872 <HAL_RCC_GetSysClockFreq+0x3a>
 800686a:	e0db      	b.n	8006a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800686c:	4b73      	ldr	r3, [pc, #460]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800686e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006870:	e0db      	b.n	8006a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006872:	4b73      	ldr	r3, [pc, #460]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8006874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006876:	e0d8      	b.n	8006a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006878:	4b6f      	ldr	r3, [pc, #444]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006882:	4b6d      	ldr	r3, [pc, #436]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d063      	beq.n	8006956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800688e:	4b6a      	ldr	r3, [pc, #424]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	099b      	lsrs	r3, r3, #6
 8006894:	2200      	movs	r2, #0
 8006896:	63bb      	str	r3, [r7, #56]	; 0x38
 8006898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a0:	633b      	str	r3, [r7, #48]	; 0x30
 80068a2:	2300      	movs	r3, #0
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	f04f 0000 	mov.w	r0, #0
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	0159      	lsls	r1, r3, #5
 80068b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068bc:	0150      	lsls	r0, r2, #5
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4621      	mov	r1, r4
 80068c4:	1a51      	subs	r1, r2, r1
 80068c6:	6139      	str	r1, [r7, #16]
 80068c8:	4629      	mov	r1, r5
 80068ca:	eb63 0301 	sbc.w	r3, r3, r1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068dc:	4659      	mov	r1, fp
 80068de:	018b      	lsls	r3, r1, #6
 80068e0:	4651      	mov	r1, sl
 80068e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068e6:	4651      	mov	r1, sl
 80068e8:	018a      	lsls	r2, r1, #6
 80068ea:	4651      	mov	r1, sl
 80068ec:	ebb2 0801 	subs.w	r8, r2, r1
 80068f0:	4659      	mov	r1, fp
 80068f2:	eb63 0901 	sbc.w	r9, r3, r1
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800690a:	4690      	mov	r8, r2
 800690c:	4699      	mov	r9, r3
 800690e:	4623      	mov	r3, r4
 8006910:	eb18 0303 	adds.w	r3, r8, r3
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	462b      	mov	r3, r5
 8006918:	eb49 0303 	adc.w	r3, r9, r3
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800692a:	4629      	mov	r1, r5
 800692c:	024b      	lsls	r3, r1, #9
 800692e:	4621      	mov	r1, r4
 8006930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006934:	4621      	mov	r1, r4
 8006936:	024a      	lsls	r2, r1, #9
 8006938:	4610      	mov	r0, r2
 800693a:	4619      	mov	r1, r3
 800693c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693e:	2200      	movs	r2, #0
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
 8006942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006948:	f7fa f926 	bl	8000b98 <__aeabi_uldivmod>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4613      	mov	r3, r2
 8006952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006954:	e058      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006956:	4b38      	ldr	r3, [pc, #224]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	099b      	lsrs	r3, r3, #6
 800695c:	2200      	movs	r2, #0
 800695e:	4618      	mov	r0, r3
 8006960:	4611      	mov	r1, r2
 8006962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	2300      	movs	r3, #0
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	f04f 0000 	mov.w	r0, #0
 8006978:	f04f 0100 	mov.w	r1, #0
 800697c:	0159      	lsls	r1, r3, #5
 800697e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006982:	0150      	lsls	r0, r2, #5
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4641      	mov	r1, r8
 800698a:	ebb2 0a01 	subs.w	sl, r2, r1
 800698e:	4649      	mov	r1, r9
 8006990:	eb63 0b01 	sbc.w	fp, r3, r1
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069a8:	ebb2 040a 	subs.w	r4, r2, sl
 80069ac:	eb63 050b 	sbc.w	r5, r3, fp
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	00eb      	lsls	r3, r5, #3
 80069ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069be:	00e2      	lsls	r2, r4, #3
 80069c0:	4614      	mov	r4, r2
 80069c2:	461d      	mov	r5, r3
 80069c4:	4643      	mov	r3, r8
 80069c6:	18e3      	adds	r3, r4, r3
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	464b      	mov	r3, r9
 80069cc:	eb45 0303 	adc.w	r3, r5, r3
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069de:	4629      	mov	r1, r5
 80069e0:	028b      	lsls	r3, r1, #10
 80069e2:	4621      	mov	r1, r4
 80069e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069e8:	4621      	mov	r1, r4
 80069ea:	028a      	lsls	r2, r1, #10
 80069ec:	4610      	mov	r0, r2
 80069ee:	4619      	mov	r1, r3
 80069f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f2:	2200      	movs	r2, #0
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	61fa      	str	r2, [r7, #28]
 80069f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069fc:	f7fa f8cc 	bl	8000b98 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4613      	mov	r3, r2
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	3301      	adds	r3, #1
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a22:	e002      	b.n	8006a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3750      	adds	r7, #80	; 0x50
 8006a30:	46bd      	mov	sp, r7
 8006a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a36:	bf00      	nop
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	00f42400 	.word	0x00f42400
 8006a40:	007a1200 	.word	0x007a1200

08006a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a48:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	20000014 	.word	0x20000014

08006a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a60:	f7ff fff0 	bl	8006a44 <HAL_RCC_GetHCLKFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	0a9b      	lsrs	r3, r3, #10
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4903      	ldr	r1, [pc, #12]	; (8006a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	0800c46c 	.word	0x0800c46c

08006a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e07b      	b.n	8006b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d108      	bne.n	8006ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa6:	d009      	beq.n	8006abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	61da      	str	r2, [r3, #28]
 8006aae:	e005      	b.n	8006abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fc f8ce 	bl	8002c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	ea42 0103 	orr.w	r1, r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	f003 0104 	and.w	r1, r3, #4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	f003 0210 	and.w	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b088      	sub	sp, #32
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_SPI_Transmit+0x22>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e126      	b.n	8006e06 <HAL_SPI_Transmit+0x270>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc0:	f7fd fac0 	bl	8004144 <HAL_GetTick>
 8006bc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d002      	beq.n	8006bdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bda:	e10b      	b.n	8006df4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Transmit+0x52>
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bec:	e102      	b.n	8006df4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	88fa      	ldrh	r2, [r7, #6]
 8006c06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	88fa      	ldrh	r2, [r7, #6]
 8006c0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c34:	d10f      	bne.n	8006c56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d007      	beq.n	8006c74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7c:	d14b      	bne.n	8006d16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_SPI_Transmit+0xf6>
 8006c86:	8afb      	ldrh	r3, [r7, #22]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d13e      	bne.n	8006d0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	1c9a      	adds	r2, r3, #2
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cb0:	e02b      	b.n	8006d0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d112      	bne.n	8006ce6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	881a      	ldrh	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ce4:	e011      	b.n	8006d0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ce6:	f7fd fa2d 	bl	8004144 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d803      	bhi.n	8006cfe <HAL_SPI_Transmit+0x168>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d102      	bne.n	8006d04 <HAL_SPI_Transmit+0x16e>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d08:	e074      	b.n	8006df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1ce      	bne.n	8006cb2 <HAL_SPI_Transmit+0x11c>
 8006d14:	e04c      	b.n	8006db0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_SPI_Transmit+0x18e>
 8006d1e:	8afb      	ldrh	r3, [r7, #22]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d140      	bne.n	8006da6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	7812      	ldrb	r2, [r2, #0]
 8006d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d4a:	e02c      	b.n	8006da6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d113      	bne.n	8006d82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	330c      	adds	r3, #12
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d80:	e011      	b.n	8006da6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d82:	f7fd f9df 	bl	8004144 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d803      	bhi.n	8006d9a <HAL_SPI_Transmit+0x204>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d102      	bne.n	8006da0 <HAL_SPI_Transmit+0x20a>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006da4:	e026      	b.n	8006df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1cd      	bne.n	8006d4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f8b3 	bl	8006f20 <SPI_EndRxTxTransaction>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e000      	b.n	8006df4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e20:	f7fd f990 	bl	8004144 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e30:	f7fd f988 	bl	8004144 <HAL_GetTick>
 8006e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e36:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	015b      	lsls	r3, r3, #5
 8006e3c:	0d1b      	lsrs	r3, r3, #20
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e46:	e054      	b.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d050      	beq.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e50:	f7fd f978 	bl	8004144 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d902      	bls.n	8006e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d13d      	bne.n	8006ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e7e:	d111      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e88:	d004      	beq.n	8006e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e92:	d107      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d10f      	bne.n	8006ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e017      	b.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4013      	ands	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d19b      	bne.n	8006e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000014 	.word	0x20000014

08006f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <SPI_EndRxTxTransaction+0x7c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <SPI_EndRxTxTransaction+0x80>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	0d5b      	lsrs	r3, r3, #21
 8006f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4a:	d112      	bne.n	8006f72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff ff5a 	bl	8006e10 <SPI_WaitFlagStateUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d016      	beq.n	8006f90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	f043 0220 	orr.w	r2, r3, #32
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e00f      	b.n	8006f92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b80      	cmp	r3, #128	; 0x80
 8006f8a:	d0f2      	beq.n	8006f72 <SPI_EndRxTxTransaction+0x52>
 8006f8c:	e000      	b.n	8006f90 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f8e:	bf00      	nop
  }

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000014 	.word	0x20000014
 8006fa0:	165e9f81 	.word	0x165e9f81

08006fa4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e034      	b.n	8007024 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7fa faa6 	bl	8001520 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f000 ffda 	bl	8007f98 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	461a      	mov	r2, r3
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	f001 f824 	bl	800803c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6858      	ldr	r0, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	f001 f859 	bl	80080b8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	6892      	ldr	r2, [r2, #8]
 800700e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	6892      	ldr	r2, [r2, #8]
 800701a:	f041 0101 	orr.w	r1, r1, #1
 800701e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e041      	b.n	80070c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fc f880 	bl	8003158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3304      	adds	r3, #4
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f000 fc1a 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d001      	beq.n	80070e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e046      	b.n	8007172 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a23      	ldr	r2, [pc, #140]	; (8007180 <HAL_TIM_Base_Start+0xb4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d022      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d01d      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <HAL_TIM_Base_Start+0xb8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d018      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <HAL_TIM_Base_Start+0xbc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_Base_Start+0xc0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00e      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_TIM_Base_Start+0xc4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_TIM_Base_Start+0xc8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_TIM_Base_Start+0x70>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_TIM_Base_Start+0xcc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d111      	bne.n	8007160 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b06      	cmp	r3, #6
 800714c:	d010      	beq.n	8007170 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	e007      	b.n	8007170 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40010400 	.word	0x40010400
 8007194:	40014000 	.word	0x40014000
 8007198:	40001800 	.word	0x40001800

0800719c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e04e      	b.n	8007252 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a23      	ldr	r2, [pc, #140]	; (8007260 <HAL_TIM_Base_Start_IT+0xc4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d022      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d01d      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <HAL_TIM_Base_Start_IT+0xc8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d018      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <HAL_TIM_Base_Start_IT+0xcc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d013      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1c      	ldr	r2, [pc, #112]	; (800726c <HAL_TIM_Base_Start_IT+0xd0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00e      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1b      	ldr	r2, [pc, #108]	; (8007270 <HAL_TIM_Base_Start_IT+0xd4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d009      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a19      	ldr	r2, [pc, #100]	; (8007274 <HAL_TIM_Base_Start_IT+0xd8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x80>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a18      	ldr	r2, [pc, #96]	; (8007278 <HAL_TIM_Base_Start_IT+0xdc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d111      	bne.n	8007240 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b06      	cmp	r3, #6
 800722c:	d010      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723e:	e007      	b.n	8007250 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40010400 	.word	0x40010400
 8007274:	40014000 	.word	0x40014000
 8007278:	40001800 	.word	0x40001800

0800727c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e041      	b.n	8007312 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f839 	bl	800731a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f000 faf2 	bl	80078a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d122      	bne.n	800738a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b02      	cmp	r3, #2
 8007350:	d11b      	bne.n	800738a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f06f 0202 	mvn.w	r2, #2
 800735a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa78 	bl	8007866 <HAL_TIM_IC_CaptureCallback>
 8007376:	e005      	b.n	8007384 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa6a 	bl	8007852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa7b 	bl	800787a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d122      	bne.n	80073de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d11b      	bne.n	80073de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f06f 0204 	mvn.w	r2, #4
 80073ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa4e 	bl	8007866 <HAL_TIM_IC_CaptureCallback>
 80073ca:	e005      	b.n	80073d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa40 	bl	8007852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa51 	bl	800787a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d122      	bne.n	8007432 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d11b      	bne.n	8007432 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f06f 0208 	mvn.w	r2, #8
 8007402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2204      	movs	r2, #4
 8007408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa24 	bl	8007866 <HAL_TIM_IC_CaptureCallback>
 800741e:	e005      	b.n	800742c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fa16 	bl	8007852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa27 	bl	800787a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b10      	cmp	r3, #16
 800743e:	d122      	bne.n	8007486 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b10      	cmp	r3, #16
 800744c:	d11b      	bne.n	8007486 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f06f 0210 	mvn.w	r2, #16
 8007456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2208      	movs	r2, #8
 800745c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9fa 	bl	8007866 <HAL_TIM_IC_CaptureCallback>
 8007472:	e005      	b.n	8007480 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9ec 	bl	8007852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9fd 	bl	800787a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10e      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d107      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f06f 0201 	mvn.w	r2, #1
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fb fb69 	bl	8002b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d10e      	bne.n	80074de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d107      	bne.n	80074de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fd53 	bl	8007f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d10e      	bne.n	800750a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d107      	bne.n	800750a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9c2 	bl	800788e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b20      	cmp	r3, #32
 8007516:	d10e      	bne.n	8007536 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b20      	cmp	r3, #32
 8007524:	d107      	bne.n	8007536 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f06f 0220 	mvn.w	r2, #32
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fd1d 	bl	8007f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800755a:	2302      	movs	r3, #2
 800755c:	e0ae      	b.n	80076bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b0c      	cmp	r3, #12
 800756a:	f200 809f 	bhi.w	80076ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080076ad 	.word	0x080076ad
 800757c:	080076ad 	.word	0x080076ad
 8007580:	080076ad 	.word	0x080076ad
 8007584:	080075e9 	.word	0x080075e9
 8007588:	080076ad 	.word	0x080076ad
 800758c:	080076ad 	.word	0x080076ad
 8007590:	080076ad 	.word	0x080076ad
 8007594:	0800762b 	.word	0x0800762b
 8007598:	080076ad 	.word	0x080076ad
 800759c:	080076ad 	.word	0x080076ad
 80075a0:	080076ad 	.word	0x080076ad
 80075a4:	0800766b 	.word	0x0800766b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fa18 	bl	80079e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0208 	orr.w	r2, r2, #8
 80075c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0204 	bic.w	r2, r2, #4
 80075d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6999      	ldr	r1, [r3, #24]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	619a      	str	r2, [r3, #24]
      break;
 80075e6:	e064      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fa68 	bl	8007ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	021a      	lsls	r2, r3, #8
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	619a      	str	r2, [r3, #24]
      break;
 8007628:	e043      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68b9      	ldr	r1, [r7, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fabd 	bl	8007bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0208 	orr.w	r2, r2, #8
 8007644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69da      	ldr	r2, [r3, #28]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0204 	bic.w	r2, r2, #4
 8007654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69d9      	ldr	r1, [r3, #28]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	61da      	str	r2, [r3, #28]
      break;
 8007668:	e023      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fb11 	bl	8007c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69d9      	ldr	r1, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	021a      	lsls	r2, r3, #8
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	61da      	str	r2, [r3, #28]
      break;
 80076aa:	e002      	b.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]
      break;
 80076b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_TIM_ConfigClockSource+0x1c>
 80076dc:	2302      	movs	r3, #2
 80076de:	e0b4      	b.n	800784a <HAL_TIM_ConfigClockSource+0x186>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007718:	d03e      	beq.n	8007798 <HAL_TIM_ConfigClockSource+0xd4>
 800771a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771e:	f200 8087 	bhi.w	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007726:	f000 8086 	beq.w	8007836 <HAL_TIM_ConfigClockSource+0x172>
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d87f      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007730:	2b70      	cmp	r3, #112	; 0x70
 8007732:	d01a      	beq.n	800776a <HAL_TIM_ConfigClockSource+0xa6>
 8007734:	2b70      	cmp	r3, #112	; 0x70
 8007736:	d87b      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007738:	2b60      	cmp	r3, #96	; 0x60
 800773a:	d050      	beq.n	80077de <HAL_TIM_ConfigClockSource+0x11a>
 800773c:	2b60      	cmp	r3, #96	; 0x60
 800773e:	d877      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007740:	2b50      	cmp	r3, #80	; 0x50
 8007742:	d03c      	beq.n	80077be <HAL_TIM_ConfigClockSource+0xfa>
 8007744:	2b50      	cmp	r3, #80	; 0x50
 8007746:	d873      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007748:	2b40      	cmp	r3, #64	; 0x40
 800774a:	d058      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x13a>
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d86f      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007750:	2b30      	cmp	r3, #48	; 0x30
 8007752:	d064      	beq.n	800781e <HAL_TIM_ConfigClockSource+0x15a>
 8007754:	2b30      	cmp	r3, #48	; 0x30
 8007756:	d86b      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d060      	beq.n	800781e <HAL_TIM_ConfigClockSource+0x15a>
 800775c:	2b20      	cmp	r3, #32
 800775e:	d867      	bhi.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d05c      	beq.n	800781e <HAL_TIM_ConfigClockSource+0x15a>
 8007764:	2b10      	cmp	r3, #16
 8007766:	d05a      	beq.n	800781e <HAL_TIM_ConfigClockSource+0x15a>
 8007768:	e062      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6899      	ldr	r1, [r3, #8]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f000 fb5d 	bl	8007e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800778c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	609a      	str	r2, [r3, #8]
      break;
 8007796:	e04f      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	6899      	ldr	r1, [r3, #8]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f000 fb46 	bl	8007e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ba:	609a      	str	r2, [r3, #8]
      break;
 80077bc:	e03c      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6859      	ldr	r1, [r3, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f000 faba 	bl	8007d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2150      	movs	r1, #80	; 0x50
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fb13 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80077dc:	e02c      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6859      	ldr	r1, [r3, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f000 fad9 	bl	8007da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2160      	movs	r1, #96	; 0x60
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fb03 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80077fc:	e01c      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	6859      	ldr	r1, [r3, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	461a      	mov	r2, r3
 800780c:	f000 fa9a 	bl	8007d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2140      	movs	r1, #64	; 0x40
 8007816:	4618      	mov	r0, r3
 8007818:	f000 faf3 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 800781c:	e00c      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f000 faea 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 800782e:	e003      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	73fb      	strb	r3, [r7, #15]
      break;
 8007834:	e000      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a40      	ldr	r2, [pc, #256]	; (80079b8 <TIM_Base_SetConfig+0x114>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d013      	beq.n	80078e4 <TIM_Base_SetConfig+0x40>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c2:	d00f      	beq.n	80078e4 <TIM_Base_SetConfig+0x40>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a3d      	ldr	r2, [pc, #244]	; (80079bc <TIM_Base_SetConfig+0x118>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00b      	beq.n	80078e4 <TIM_Base_SetConfig+0x40>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a3c      	ldr	r2, [pc, #240]	; (80079c0 <TIM_Base_SetConfig+0x11c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_Base_SetConfig+0x40>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a3b      	ldr	r2, [pc, #236]	; (80079c4 <TIM_Base_SetConfig+0x120>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_Base_SetConfig+0x40>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a3a      	ldr	r2, [pc, #232]	; (80079c8 <TIM_Base_SetConfig+0x124>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d108      	bne.n	80078f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a2f      	ldr	r2, [pc, #188]	; (80079b8 <TIM_Base_SetConfig+0x114>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d02b      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007904:	d027      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a2c      	ldr	r2, [pc, #176]	; (80079bc <TIM_Base_SetConfig+0x118>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d023      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <TIM_Base_SetConfig+0x11c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d01f      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <TIM_Base_SetConfig+0x120>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d01b      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a29      	ldr	r2, [pc, #164]	; (80079c8 <TIM_Base_SetConfig+0x124>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d017      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a28      	ldr	r2, [pc, #160]	; (80079cc <TIM_Base_SetConfig+0x128>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a27      	ldr	r2, [pc, #156]	; (80079d0 <TIM_Base_SetConfig+0x12c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00f      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <TIM_Base_SetConfig+0x130>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00b      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <TIM_Base_SetConfig+0x134>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d007      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a24      	ldr	r2, [pc, #144]	; (80079dc <TIM_Base_SetConfig+0x138>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d003      	beq.n	8007956 <TIM_Base_SetConfig+0xb2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a23      	ldr	r2, [pc, #140]	; (80079e0 <TIM_Base_SetConfig+0x13c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d108      	bne.n	8007968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a0a      	ldr	r2, [pc, #40]	; (80079b8 <TIM_Base_SetConfig+0x114>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_Base_SetConfig+0xf8>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a0c      	ldr	r2, [pc, #48]	; (80079c8 <TIM_Base_SetConfig+0x124>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d103      	bne.n	80079a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	615a      	str	r2, [r3, #20]
}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40000400 	.word	0x40000400
 80079c0:	40000800 	.word	0x40000800
 80079c4:	40000c00 	.word	0x40000c00
 80079c8:	40010400 	.word	0x40010400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800
 80079d8:	40001800 	.word	0x40001800
 80079dc:	40001c00 	.word	0x40001c00
 80079e0:	40002000 	.word	0x40002000

080079e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	f023 0201 	bic.w	r2, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 0302 	bic.w	r3, r3, #2
 8007a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a20      	ldr	r2, [pc, #128]	; (8007abc <TIM_OC1_SetConfig+0xd8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_OC1_SetConfig+0x64>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <TIM_OC1_SetConfig+0xdc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d10c      	bne.n	8007a62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0308 	bic.w	r3, r3, #8
 8007a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0304 	bic.w	r3, r3, #4
 8007a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a15      	ldr	r2, [pc, #84]	; (8007abc <TIM_OC1_SetConfig+0xd8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_OC1_SetConfig+0x8e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <TIM_OC1_SetConfig+0xdc>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d111      	bne.n	8007a96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	621a      	str	r2, [r3, #32]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40010400 	.word	0x40010400

08007ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f023 0210 	bic.w	r2, r3, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a22      	ldr	r2, [pc, #136]	; (8007ba8 <TIM_OC2_SetConfig+0xe4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC2_SetConfig+0x68>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a21      	ldr	r2, [pc, #132]	; (8007bac <TIM_OC2_SetConfig+0xe8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <TIM_OC2_SetConfig+0xe4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC2_SetConfig+0x94>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a16      	ldr	r2, [pc, #88]	; (8007bac <TIM_OC2_SetConfig+0xe8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d113      	bne.n	8007b80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40010000 	.word	0x40010000
 8007bac:	40010400 	.word	0x40010400

08007bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a21      	ldr	r2, [pc, #132]	; (8007c90 <TIM_OC3_SetConfig+0xe0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_OC3_SetConfig+0x66>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a20      	ldr	r2, [pc, #128]	; (8007c94 <TIM_OC3_SetConfig+0xe4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d10d      	bne.n	8007c32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <TIM_OC3_SetConfig+0xe0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_OC3_SetConfig+0x92>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a15      	ldr	r2, [pc, #84]	; (8007c94 <TIM_OC3_SetConfig+0xe4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d113      	bne.n	8007c6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	621a      	str	r2, [r3, #32]
}
 8007c84:	bf00      	nop
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40010400 	.word	0x40010400

08007c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	031b      	lsls	r3, r3, #12
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a12      	ldr	r2, [pc, #72]	; (8007d3c <TIM_OC4_SetConfig+0xa4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <TIM_OC4_SetConfig+0x68>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a11      	ldr	r2, [pc, #68]	; (8007d40 <TIM_OC4_SetConfig+0xa8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d109      	bne.n	8007d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40010400 	.word	0x40010400

08007d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0210 	bic.w	r2, r3, #16
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	031b      	lsls	r3, r3, #12
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f043 0307 	orr.w	r3, r3, #7
 8007e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	609a      	str	r2, [r3, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	021a      	lsls	r2, r3, #8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	609a      	str	r2, [r3, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e05a      	b.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a21      	ldr	r2, [pc, #132]	; (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d022      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007edc:	d01d      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a1d      	ldr	r2, [pc, #116]	; (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d018      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a1b      	ldr	r2, [pc, #108]	; (8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d013      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a1a      	ldr	r2, [pc, #104]	; (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00e      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d009      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d004      	beq.n	8007f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a15      	ldr	r2, [pc, #84]	; (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d10c      	bne.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40000400 	.word	0x40000400
 8007f5c:	40000800 	.word	0x40000800
 8007f60:	40000c00 	.word	0x40000c00
 8007f64:	40010400 	.word	0x40010400
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40001800 	.word	0x40001800

08007f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4b20      	ldr	r3, [pc, #128]	; (8008038 <FSMC_NORSRAM_Init+0xa0>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007fc2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007fc8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007fce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007fd4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007fda:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007fe0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007fe6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007fec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007ff2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007ff8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007ffe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008004:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d103      	bne.n	800801c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	fff00080 	.word	0xfff00080

0800803c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800805e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800806a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008072:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800807a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	3b01      	subs	r3, #1
 8008082:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008084:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	3b02      	subs	r3, #2
 800808c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800808e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008094:	4313      	orrs	r3, r2
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6979      	ldr	r1, [r7, #20]
 80080a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d0:	d122      	bne.n	8008118 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	4b15      	ldr	r3, [pc, #84]	; (8008134 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080ee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80080f6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80080fe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008104:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	4313      	orrs	r3, r2
 800810a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008116:	e005      	b.n	8008124 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	cff00000 	.word	0xcff00000

08008138 <__errno>:
 8008138:	4b01      	ldr	r3, [pc, #4]	; (8008140 <__errno+0x8>)
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000058 	.word	0x20000058

08008144 <__libc_init_array>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4d0d      	ldr	r5, [pc, #52]	; (800817c <__libc_init_array+0x38>)
 8008148:	4c0d      	ldr	r4, [pc, #52]	; (8008180 <__libc_init_array+0x3c>)
 800814a:	1b64      	subs	r4, r4, r5
 800814c:	10a4      	asrs	r4, r4, #2
 800814e:	2600      	movs	r6, #0
 8008150:	42a6      	cmp	r6, r4
 8008152:	d109      	bne.n	8008168 <__libc_init_array+0x24>
 8008154:	4d0b      	ldr	r5, [pc, #44]	; (8008184 <__libc_init_array+0x40>)
 8008156:	4c0c      	ldr	r4, [pc, #48]	; (8008188 <__libc_init_array+0x44>)
 8008158:	f001 f936 	bl	80093c8 <_init>
 800815c:	1b64      	subs	r4, r4, r5
 800815e:	10a4      	asrs	r4, r4, #2
 8008160:	2600      	movs	r6, #0
 8008162:	42a6      	cmp	r6, r4
 8008164:	d105      	bne.n	8008172 <__libc_init_array+0x2e>
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	f855 3b04 	ldr.w	r3, [r5], #4
 800816c:	4798      	blx	r3
 800816e:	3601      	adds	r6, #1
 8008170:	e7ee      	b.n	8008150 <__libc_init_array+0xc>
 8008172:	f855 3b04 	ldr.w	r3, [r5], #4
 8008176:	4798      	blx	r3
 8008178:	3601      	adds	r6, #1
 800817a:	e7f2      	b.n	8008162 <__libc_init_array+0x1e>
 800817c:	0800c5cc 	.word	0x0800c5cc
 8008180:	0800c5cc 	.word	0x0800c5cc
 8008184:	0800c5cc 	.word	0x0800c5cc
 8008188:	0800c5d0 	.word	0x0800c5d0

0800818c <memset>:
 800818c:	4402      	add	r2, r0
 800818e:	4603      	mov	r3, r0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <memset+0xa>
 8008194:	4770      	bx	lr
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <memset+0x4>

0800819c <rand>:
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <rand+0x5c>)
 800819e:	b510      	push	{r4, lr}
 80081a0:	681c      	ldr	r4, [r3, #0]
 80081a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081a4:	b9b3      	cbnz	r3, 80081d4 <rand+0x38>
 80081a6:	2018      	movs	r0, #24
 80081a8:	f000 f866 	bl	8008278 <malloc>
 80081ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80081ae:	b928      	cbnz	r0, 80081bc <rand+0x20>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <rand+0x60>)
 80081b4:	4812      	ldr	r0, [pc, #72]	; (8008200 <rand+0x64>)
 80081b6:	214e      	movs	r1, #78	; 0x4e
 80081b8:	f000 f82e 	bl	8008218 <__assert_func>
 80081bc:	4a11      	ldr	r2, [pc, #68]	; (8008204 <rand+0x68>)
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <rand+0x6c>)
 80081c0:	e9c0 2300 	strd	r2, r3, [r0]
 80081c4:	4b11      	ldr	r3, [pc, #68]	; (800820c <rand+0x70>)
 80081c6:	6083      	str	r3, [r0, #8]
 80081c8:	230b      	movs	r3, #11
 80081ca:	8183      	strh	r3, [r0, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	2300      	movs	r3, #0
 80081d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80081d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80081d6:	4a0e      	ldr	r2, [pc, #56]	; (8008210 <rand+0x74>)
 80081d8:	6920      	ldr	r0, [r4, #16]
 80081da:	6963      	ldr	r3, [r4, #20]
 80081dc:	490d      	ldr	r1, [pc, #52]	; (8008214 <rand+0x78>)
 80081de:	4342      	muls	r2, r0
 80081e0:	fb01 2203 	mla	r2, r1, r3, r2
 80081e4:	fba0 0101 	umull	r0, r1, r0, r1
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	eb42 0001 	adc.w	r0, r2, r1
 80081ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80081f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	20000058 	.word	0x20000058
 80081fc:	0800c480 	.word	0x0800c480
 8008200:	0800c497 	.word	0x0800c497
 8008204:	abcd330e 	.word	0xabcd330e
 8008208:	e66d1234 	.word	0xe66d1234
 800820c:	0005deec 	.word	0x0005deec
 8008210:	5851f42d 	.word	0x5851f42d
 8008214:	4c957f2d 	.word	0x4c957f2d

08008218 <__assert_func>:
 8008218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821a:	4614      	mov	r4, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4b09      	ldr	r3, [pc, #36]	; (8008244 <__assert_func+0x2c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4605      	mov	r5, r0
 8008224:	68d8      	ldr	r0, [r3, #12]
 8008226:	b14c      	cbz	r4, 800823c <__assert_func+0x24>
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <__assert_func+0x30>)
 800822a:	9100      	str	r1, [sp, #0]
 800822c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008230:	4906      	ldr	r1, [pc, #24]	; (800824c <__assert_func+0x34>)
 8008232:	462b      	mov	r3, r5
 8008234:	f000 f80e 	bl	8008254 <fiprintf>
 8008238:	f000 fcc4 	bl	8008bc4 <abort>
 800823c:	4b04      	ldr	r3, [pc, #16]	; (8008250 <__assert_func+0x38>)
 800823e:	461c      	mov	r4, r3
 8008240:	e7f3      	b.n	800822a <__assert_func+0x12>
 8008242:	bf00      	nop
 8008244:	20000058 	.word	0x20000058
 8008248:	0800c4f2 	.word	0x0800c4f2
 800824c:	0800c4ff 	.word	0x0800c4ff
 8008250:	0800c52d 	.word	0x0800c52d

08008254 <fiprintf>:
 8008254:	b40e      	push	{r1, r2, r3}
 8008256:	b503      	push	{r0, r1, lr}
 8008258:	4601      	mov	r1, r0
 800825a:	ab03      	add	r3, sp, #12
 800825c:	4805      	ldr	r0, [pc, #20]	; (8008274 <fiprintf+0x20>)
 800825e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	f000 f919 	bl	800849c <_vfiprintf_r>
 800826a:	b002      	add	sp, #8
 800826c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008270:	b003      	add	sp, #12
 8008272:	4770      	bx	lr
 8008274:	20000058 	.word	0x20000058

08008278 <malloc>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <malloc+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f000 b86f 	b.w	8008360 <_malloc_r>
 8008282:	bf00      	nop
 8008284:	20000058 	.word	0x20000058

08008288 <_free_r>:
 8008288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800828a:	2900      	cmp	r1, #0
 800828c:	d044      	beq.n	8008318 <_free_r+0x90>
 800828e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008292:	9001      	str	r0, [sp, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f1a1 0404 	sub.w	r4, r1, #4
 800829a:	bfb8      	it	lt
 800829c:	18e4      	addlt	r4, r4, r3
 800829e:	f000 feb9 	bl	8009014 <__malloc_lock>
 80082a2:	4a1e      	ldr	r2, [pc, #120]	; (800831c <_free_r+0x94>)
 80082a4:	9801      	ldr	r0, [sp, #4]
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	b933      	cbnz	r3, 80082b8 <_free_r+0x30>
 80082aa:	6063      	str	r3, [r4, #4]
 80082ac:	6014      	str	r4, [r2, #0]
 80082ae:	b003      	add	sp, #12
 80082b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082b4:	f000 beb4 	b.w	8009020 <__malloc_unlock>
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d908      	bls.n	80082ce <_free_r+0x46>
 80082bc:	6825      	ldr	r5, [r4, #0]
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf01      	itttt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	1949      	addeq	r1, r1, r5
 80082ca:	6021      	streq	r1, [r4, #0]
 80082cc:	e7ed      	b.n	80082aa <_free_r+0x22>
 80082ce:	461a      	mov	r2, r3
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	b10b      	cbz	r3, 80082d8 <_free_r+0x50>
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	d9fa      	bls.n	80082ce <_free_r+0x46>
 80082d8:	6811      	ldr	r1, [r2, #0]
 80082da:	1855      	adds	r5, r2, r1
 80082dc:	42a5      	cmp	r5, r4
 80082de:	d10b      	bne.n	80082f8 <_free_r+0x70>
 80082e0:	6824      	ldr	r4, [r4, #0]
 80082e2:	4421      	add	r1, r4
 80082e4:	1854      	adds	r4, r2, r1
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	d1e0      	bne.n	80082ae <_free_r+0x26>
 80082ec:	681c      	ldr	r4, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	6053      	str	r3, [r2, #4]
 80082f2:	4421      	add	r1, r4
 80082f4:	6011      	str	r1, [r2, #0]
 80082f6:	e7da      	b.n	80082ae <_free_r+0x26>
 80082f8:	d902      	bls.n	8008300 <_free_r+0x78>
 80082fa:	230c      	movs	r3, #12
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	e7d6      	b.n	80082ae <_free_r+0x26>
 8008300:	6825      	ldr	r5, [r4, #0]
 8008302:	1961      	adds	r1, r4, r5
 8008304:	428b      	cmp	r3, r1
 8008306:	bf04      	itt	eq
 8008308:	6819      	ldreq	r1, [r3, #0]
 800830a:	685b      	ldreq	r3, [r3, #4]
 800830c:	6063      	str	r3, [r4, #4]
 800830e:	bf04      	itt	eq
 8008310:	1949      	addeq	r1, r1, r5
 8008312:	6021      	streq	r1, [r4, #0]
 8008314:	6054      	str	r4, [r2, #4]
 8008316:	e7ca      	b.n	80082ae <_free_r+0x26>
 8008318:	b003      	add	sp, #12
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	2000038c 	.word	0x2000038c

08008320 <sbrk_aligned>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	4e0e      	ldr	r6, [pc, #56]	; (800835c <sbrk_aligned+0x3c>)
 8008324:	460c      	mov	r4, r1
 8008326:	6831      	ldr	r1, [r6, #0]
 8008328:	4605      	mov	r5, r0
 800832a:	b911      	cbnz	r1, 8008332 <sbrk_aligned+0x12>
 800832c:	f000 fb7a 	bl	8008a24 <_sbrk_r>
 8008330:	6030      	str	r0, [r6, #0]
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	f000 fb75 	bl	8008a24 <_sbrk_r>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d00a      	beq.n	8008354 <sbrk_aligned+0x34>
 800833e:	1cc4      	adds	r4, r0, #3
 8008340:	f024 0403 	bic.w	r4, r4, #3
 8008344:	42a0      	cmp	r0, r4
 8008346:	d007      	beq.n	8008358 <sbrk_aligned+0x38>
 8008348:	1a21      	subs	r1, r4, r0
 800834a:	4628      	mov	r0, r5
 800834c:	f000 fb6a 	bl	8008a24 <_sbrk_r>
 8008350:	3001      	adds	r0, #1
 8008352:	d101      	bne.n	8008358 <sbrk_aligned+0x38>
 8008354:	f04f 34ff 	mov.w	r4, #4294967295
 8008358:	4620      	mov	r0, r4
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	20000390 	.word	0x20000390

08008360 <_malloc_r>:
 8008360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008364:	1ccd      	adds	r5, r1, #3
 8008366:	f025 0503 	bic.w	r5, r5, #3
 800836a:	3508      	adds	r5, #8
 800836c:	2d0c      	cmp	r5, #12
 800836e:	bf38      	it	cc
 8008370:	250c      	movcc	r5, #12
 8008372:	2d00      	cmp	r5, #0
 8008374:	4607      	mov	r7, r0
 8008376:	db01      	blt.n	800837c <_malloc_r+0x1c>
 8008378:	42a9      	cmp	r1, r5
 800837a:	d905      	bls.n	8008388 <_malloc_r+0x28>
 800837c:	230c      	movs	r3, #12
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	2600      	movs	r6, #0
 8008382:	4630      	mov	r0, r6
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	4e2e      	ldr	r6, [pc, #184]	; (8008444 <_malloc_r+0xe4>)
 800838a:	f000 fe43 	bl	8009014 <__malloc_lock>
 800838e:	6833      	ldr	r3, [r6, #0]
 8008390:	461c      	mov	r4, r3
 8008392:	bb34      	cbnz	r4, 80083e2 <_malloc_r+0x82>
 8008394:	4629      	mov	r1, r5
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff ffc2 	bl	8008320 <sbrk_aligned>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	4604      	mov	r4, r0
 80083a0:	d14d      	bne.n	800843e <_malloc_r+0xde>
 80083a2:	6834      	ldr	r4, [r6, #0]
 80083a4:	4626      	mov	r6, r4
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	d140      	bne.n	800842c <_malloc_r+0xcc>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	4631      	mov	r1, r6
 80083ae:	4638      	mov	r0, r7
 80083b0:	eb04 0803 	add.w	r8, r4, r3
 80083b4:	f000 fb36 	bl	8008a24 <_sbrk_r>
 80083b8:	4580      	cmp	r8, r0
 80083ba:	d13a      	bne.n	8008432 <_malloc_r+0xd2>
 80083bc:	6821      	ldr	r1, [r4, #0]
 80083be:	3503      	adds	r5, #3
 80083c0:	1a6d      	subs	r5, r5, r1
 80083c2:	f025 0503 	bic.w	r5, r5, #3
 80083c6:	3508      	adds	r5, #8
 80083c8:	2d0c      	cmp	r5, #12
 80083ca:	bf38      	it	cc
 80083cc:	250c      	movcc	r5, #12
 80083ce:	4629      	mov	r1, r5
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff ffa5 	bl	8008320 <sbrk_aligned>
 80083d6:	3001      	adds	r0, #1
 80083d8:	d02b      	beq.n	8008432 <_malloc_r+0xd2>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	442b      	add	r3, r5
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	e00e      	b.n	8008400 <_malloc_r+0xa0>
 80083e2:	6822      	ldr	r2, [r4, #0]
 80083e4:	1b52      	subs	r2, r2, r5
 80083e6:	d41e      	bmi.n	8008426 <_malloc_r+0xc6>
 80083e8:	2a0b      	cmp	r2, #11
 80083ea:	d916      	bls.n	800841a <_malloc_r+0xba>
 80083ec:	1961      	adds	r1, r4, r5
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	6025      	str	r5, [r4, #0]
 80083f2:	bf18      	it	ne
 80083f4:	6059      	strne	r1, [r3, #4]
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	bf08      	it	eq
 80083fa:	6031      	streq	r1, [r6, #0]
 80083fc:	5162      	str	r2, [r4, r5]
 80083fe:	604b      	str	r3, [r1, #4]
 8008400:	4638      	mov	r0, r7
 8008402:	f104 060b 	add.w	r6, r4, #11
 8008406:	f000 fe0b 	bl	8009020 <__malloc_unlock>
 800840a:	f026 0607 	bic.w	r6, r6, #7
 800840e:	1d23      	adds	r3, r4, #4
 8008410:	1af2      	subs	r2, r6, r3
 8008412:	d0b6      	beq.n	8008382 <_malloc_r+0x22>
 8008414:	1b9b      	subs	r3, r3, r6
 8008416:	50a3      	str	r3, [r4, r2]
 8008418:	e7b3      	b.n	8008382 <_malloc_r+0x22>
 800841a:	6862      	ldr	r2, [r4, #4]
 800841c:	42a3      	cmp	r3, r4
 800841e:	bf0c      	ite	eq
 8008420:	6032      	streq	r2, [r6, #0]
 8008422:	605a      	strne	r2, [r3, #4]
 8008424:	e7ec      	b.n	8008400 <_malloc_r+0xa0>
 8008426:	4623      	mov	r3, r4
 8008428:	6864      	ldr	r4, [r4, #4]
 800842a:	e7b2      	b.n	8008392 <_malloc_r+0x32>
 800842c:	4634      	mov	r4, r6
 800842e:	6876      	ldr	r6, [r6, #4]
 8008430:	e7b9      	b.n	80083a6 <_malloc_r+0x46>
 8008432:	230c      	movs	r3, #12
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	4638      	mov	r0, r7
 8008438:	f000 fdf2 	bl	8009020 <__malloc_unlock>
 800843c:	e7a1      	b.n	8008382 <_malloc_r+0x22>
 800843e:	6025      	str	r5, [r4, #0]
 8008440:	e7de      	b.n	8008400 <_malloc_r+0xa0>
 8008442:	bf00      	nop
 8008444:	2000038c 	.word	0x2000038c

08008448 <__sfputc_r>:
 8008448:	6893      	ldr	r3, [r2, #8]
 800844a:	3b01      	subs	r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	b410      	push	{r4}
 8008450:	6093      	str	r3, [r2, #8]
 8008452:	da08      	bge.n	8008466 <__sfputc_r+0x1e>
 8008454:	6994      	ldr	r4, [r2, #24]
 8008456:	42a3      	cmp	r3, r4
 8008458:	db01      	blt.n	800845e <__sfputc_r+0x16>
 800845a:	290a      	cmp	r1, #10
 800845c:	d103      	bne.n	8008466 <__sfputc_r+0x1e>
 800845e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008462:	f000 baef 	b.w	8008a44 <__swbuf_r>
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	1c58      	adds	r0, r3, #1
 800846a:	6010      	str	r0, [r2, #0]
 800846c:	7019      	strb	r1, [r3, #0]
 800846e:	4608      	mov	r0, r1
 8008470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008474:	4770      	bx	lr

08008476 <__sfputs_r>:
 8008476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008478:	4606      	mov	r6, r0
 800847a:	460f      	mov	r7, r1
 800847c:	4614      	mov	r4, r2
 800847e:	18d5      	adds	r5, r2, r3
 8008480:	42ac      	cmp	r4, r5
 8008482:	d101      	bne.n	8008488 <__sfputs_r+0x12>
 8008484:	2000      	movs	r0, #0
 8008486:	e007      	b.n	8008498 <__sfputs_r+0x22>
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	463a      	mov	r2, r7
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ffda 	bl	8008448 <__sfputc_r>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d1f3      	bne.n	8008480 <__sfputs_r+0xa>
 8008498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800849c <_vfiprintf_r>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	460d      	mov	r5, r1
 80084a2:	b09d      	sub	sp, #116	; 0x74
 80084a4:	4614      	mov	r4, r2
 80084a6:	4698      	mov	r8, r3
 80084a8:	4606      	mov	r6, r0
 80084aa:	b118      	cbz	r0, 80084b4 <_vfiprintf_r+0x18>
 80084ac:	6983      	ldr	r3, [r0, #24]
 80084ae:	b90b      	cbnz	r3, 80084b4 <_vfiprintf_r+0x18>
 80084b0:	f000 fcaa 	bl	8008e08 <__sinit>
 80084b4:	4b89      	ldr	r3, [pc, #548]	; (80086dc <_vfiprintf_r+0x240>)
 80084b6:	429d      	cmp	r5, r3
 80084b8:	d11b      	bne.n	80084f2 <_vfiprintf_r+0x56>
 80084ba:	6875      	ldr	r5, [r6, #4]
 80084bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084be:	07d9      	lsls	r1, r3, #31
 80084c0:	d405      	bmi.n	80084ce <_vfiprintf_r+0x32>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	059a      	lsls	r2, r3, #22
 80084c6:	d402      	bmi.n	80084ce <_vfiprintf_r+0x32>
 80084c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ca:	f000 fd3b 	bl	8008f44 <__retarget_lock_acquire_recursive>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	071b      	lsls	r3, r3, #28
 80084d2:	d501      	bpl.n	80084d8 <_vfiprintf_r+0x3c>
 80084d4:	692b      	ldr	r3, [r5, #16]
 80084d6:	b9eb      	cbnz	r3, 8008514 <_vfiprintf_r+0x78>
 80084d8:	4629      	mov	r1, r5
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 fb04 	bl	8008ae8 <__swsetup_r>
 80084e0:	b1c0      	cbz	r0, 8008514 <_vfiprintf_r+0x78>
 80084e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e4:	07dc      	lsls	r4, r3, #31
 80084e6:	d50e      	bpl.n	8008506 <_vfiprintf_r+0x6a>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b01d      	add	sp, #116	; 0x74
 80084ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f2:	4b7b      	ldr	r3, [pc, #492]	; (80086e0 <_vfiprintf_r+0x244>)
 80084f4:	429d      	cmp	r5, r3
 80084f6:	d101      	bne.n	80084fc <_vfiprintf_r+0x60>
 80084f8:	68b5      	ldr	r5, [r6, #8]
 80084fa:	e7df      	b.n	80084bc <_vfiprintf_r+0x20>
 80084fc:	4b79      	ldr	r3, [pc, #484]	; (80086e4 <_vfiprintf_r+0x248>)
 80084fe:	429d      	cmp	r5, r3
 8008500:	bf08      	it	eq
 8008502:	68f5      	ldreq	r5, [r6, #12]
 8008504:	e7da      	b.n	80084bc <_vfiprintf_r+0x20>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	0598      	lsls	r0, r3, #22
 800850a:	d4ed      	bmi.n	80084e8 <_vfiprintf_r+0x4c>
 800850c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850e:	f000 fd1a 	bl	8008f46 <__retarget_lock_release_recursive>
 8008512:	e7e9      	b.n	80084e8 <_vfiprintf_r+0x4c>
 8008514:	2300      	movs	r3, #0
 8008516:	9309      	str	r3, [sp, #36]	; 0x24
 8008518:	2320      	movs	r3, #32
 800851a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008522:	2330      	movs	r3, #48	; 0x30
 8008524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086e8 <_vfiprintf_r+0x24c>
 8008528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852c:	f04f 0901 	mov.w	r9, #1
 8008530:	4623      	mov	r3, r4
 8008532:	469a      	mov	sl, r3
 8008534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008538:	b10a      	cbz	r2, 800853e <_vfiprintf_r+0xa2>
 800853a:	2a25      	cmp	r2, #37	; 0x25
 800853c:	d1f9      	bne.n	8008532 <_vfiprintf_r+0x96>
 800853e:	ebba 0b04 	subs.w	fp, sl, r4
 8008542:	d00b      	beq.n	800855c <_vfiprintf_r+0xc0>
 8008544:	465b      	mov	r3, fp
 8008546:	4622      	mov	r2, r4
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ff93 	bl	8008476 <__sfputs_r>
 8008550:	3001      	adds	r0, #1
 8008552:	f000 80aa 	beq.w	80086aa <_vfiprintf_r+0x20e>
 8008556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008558:	445a      	add	r2, fp
 800855a:	9209      	str	r2, [sp, #36]	; 0x24
 800855c:	f89a 3000 	ldrb.w	r3, [sl]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 80a2 	beq.w	80086aa <_vfiprintf_r+0x20e>
 8008566:	2300      	movs	r3, #0
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008570:	f10a 0a01 	add.w	sl, sl, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857c:	931a      	str	r3, [sp, #104]	; 0x68
 800857e:	4654      	mov	r4, sl
 8008580:	2205      	movs	r2, #5
 8008582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008586:	4858      	ldr	r0, [pc, #352]	; (80086e8 <_vfiprintf_r+0x24c>)
 8008588:	f7f7 fe2a 	bl	80001e0 <memchr>
 800858c:	9a04      	ldr	r2, [sp, #16]
 800858e:	b9d8      	cbnz	r0, 80085c8 <_vfiprintf_r+0x12c>
 8008590:	06d1      	lsls	r1, r2, #27
 8008592:	bf44      	itt	mi
 8008594:	2320      	movmi	r3, #32
 8008596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859a:	0713      	lsls	r3, r2, #28
 800859c:	bf44      	itt	mi
 800859e:	232b      	movmi	r3, #43	; 0x2b
 80085a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a4:	f89a 3000 	ldrb.w	r3, [sl]
 80085a8:	2b2a      	cmp	r3, #42	; 0x2a
 80085aa:	d015      	beq.n	80085d8 <_vfiprintf_r+0x13c>
 80085ac:	9a07      	ldr	r2, [sp, #28]
 80085ae:	4654      	mov	r4, sl
 80085b0:	2000      	movs	r0, #0
 80085b2:	f04f 0c0a 	mov.w	ip, #10
 80085b6:	4621      	mov	r1, r4
 80085b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085bc:	3b30      	subs	r3, #48	; 0x30
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d94e      	bls.n	8008660 <_vfiprintf_r+0x1c4>
 80085c2:	b1b0      	cbz	r0, 80085f2 <_vfiprintf_r+0x156>
 80085c4:	9207      	str	r2, [sp, #28]
 80085c6:	e014      	b.n	80085f2 <_vfiprintf_r+0x156>
 80085c8:	eba0 0308 	sub.w	r3, r0, r8
 80085cc:	fa09 f303 	lsl.w	r3, r9, r3
 80085d0:	4313      	orrs	r3, r2
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	46a2      	mov	sl, r4
 80085d6:	e7d2      	b.n	800857e <_vfiprintf_r+0xe2>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	1d19      	adds	r1, r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	9103      	str	r1, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfbb      	ittet	lt
 80085e4:	425b      	neglt	r3, r3
 80085e6:	f042 0202 	orrlt.w	r2, r2, #2
 80085ea:	9307      	strge	r3, [sp, #28]
 80085ec:	9307      	strlt	r3, [sp, #28]
 80085ee:	bfb8      	it	lt
 80085f0:	9204      	strlt	r2, [sp, #16]
 80085f2:	7823      	ldrb	r3, [r4, #0]
 80085f4:	2b2e      	cmp	r3, #46	; 0x2e
 80085f6:	d10c      	bne.n	8008612 <_vfiprintf_r+0x176>
 80085f8:	7863      	ldrb	r3, [r4, #1]
 80085fa:	2b2a      	cmp	r3, #42	; 0x2a
 80085fc:	d135      	bne.n	800866a <_vfiprintf_r+0x1ce>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	1d1a      	adds	r2, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9203      	str	r2, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfb8      	it	lt
 800860a:	f04f 33ff 	movlt.w	r3, #4294967295
 800860e:	3402      	adds	r4, #2
 8008610:	9305      	str	r3, [sp, #20]
 8008612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086f8 <_vfiprintf_r+0x25c>
 8008616:	7821      	ldrb	r1, [r4, #0]
 8008618:	2203      	movs	r2, #3
 800861a:	4650      	mov	r0, sl
 800861c:	f7f7 fde0 	bl	80001e0 <memchr>
 8008620:	b140      	cbz	r0, 8008634 <_vfiprintf_r+0x198>
 8008622:	2340      	movs	r3, #64	; 0x40
 8008624:	eba0 000a 	sub.w	r0, r0, sl
 8008628:	fa03 f000 	lsl.w	r0, r3, r0
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	4303      	orrs	r3, r0
 8008630:	3401      	adds	r4, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008638:	482c      	ldr	r0, [pc, #176]	; (80086ec <_vfiprintf_r+0x250>)
 800863a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863e:	2206      	movs	r2, #6
 8008640:	f7f7 fdce 	bl	80001e0 <memchr>
 8008644:	2800      	cmp	r0, #0
 8008646:	d03f      	beq.n	80086c8 <_vfiprintf_r+0x22c>
 8008648:	4b29      	ldr	r3, [pc, #164]	; (80086f0 <_vfiprintf_r+0x254>)
 800864a:	bb1b      	cbnz	r3, 8008694 <_vfiprintf_r+0x1f8>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	3308      	adds	r3, #8
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	443b      	add	r3, r7
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	e767      	b.n	8008530 <_vfiprintf_r+0x94>
 8008660:	fb0c 3202 	mla	r2, ip, r2, r3
 8008664:	460c      	mov	r4, r1
 8008666:	2001      	movs	r0, #1
 8008668:	e7a5      	b.n	80085b6 <_vfiprintf_r+0x11a>
 800866a:	2300      	movs	r3, #0
 800866c:	3401      	adds	r4, #1
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	4619      	mov	r1, r3
 8008672:	f04f 0c0a 	mov.w	ip, #10
 8008676:	4620      	mov	r0, r4
 8008678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800867c:	3a30      	subs	r2, #48	; 0x30
 800867e:	2a09      	cmp	r2, #9
 8008680:	d903      	bls.n	800868a <_vfiprintf_r+0x1ee>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0c5      	beq.n	8008612 <_vfiprintf_r+0x176>
 8008686:	9105      	str	r1, [sp, #20]
 8008688:	e7c3      	b.n	8008612 <_vfiprintf_r+0x176>
 800868a:	fb0c 2101 	mla	r1, ip, r1, r2
 800868e:	4604      	mov	r4, r0
 8008690:	2301      	movs	r3, #1
 8008692:	e7f0      	b.n	8008676 <_vfiprintf_r+0x1da>
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	462a      	mov	r2, r5
 800869a:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <_vfiprintf_r+0x258>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4630      	mov	r0, r6
 80086a0:	f3af 8000 	nop.w
 80086a4:	4607      	mov	r7, r0
 80086a6:	1c78      	adds	r0, r7, #1
 80086a8:	d1d6      	bne.n	8008658 <_vfiprintf_r+0x1bc>
 80086aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ac:	07d9      	lsls	r1, r3, #31
 80086ae:	d405      	bmi.n	80086bc <_vfiprintf_r+0x220>
 80086b0:	89ab      	ldrh	r3, [r5, #12]
 80086b2:	059a      	lsls	r2, r3, #22
 80086b4:	d402      	bmi.n	80086bc <_vfiprintf_r+0x220>
 80086b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b8:	f000 fc45 	bl	8008f46 <__retarget_lock_release_recursive>
 80086bc:	89ab      	ldrh	r3, [r5, #12]
 80086be:	065b      	lsls	r3, r3, #25
 80086c0:	f53f af12 	bmi.w	80084e8 <_vfiprintf_r+0x4c>
 80086c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c6:	e711      	b.n	80084ec <_vfiprintf_r+0x50>
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	462a      	mov	r2, r5
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <_vfiprintf_r+0x258>)
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4630      	mov	r0, r6
 80086d4:	f000 f880 	bl	80087d8 <_printf_i>
 80086d8:	e7e4      	b.n	80086a4 <_vfiprintf_r+0x208>
 80086da:	bf00      	nop
 80086dc:	0800c584 	.word	0x0800c584
 80086e0:	0800c5a4 	.word	0x0800c5a4
 80086e4:	0800c564 	.word	0x0800c564
 80086e8:	0800c52e 	.word	0x0800c52e
 80086ec:	0800c538 	.word	0x0800c538
 80086f0:	00000000 	.word	0x00000000
 80086f4:	08008477 	.word	0x08008477
 80086f8:	0800c534 	.word	0x0800c534

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4616      	mov	r6, r2
 8008702:	4699      	mov	r9, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800870c:	4293      	cmp	r3, r2
 800870e:	bfb8      	it	lt
 8008710:	4613      	movlt	r3, r2
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008718:	4607      	mov	r7, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b10a      	cbz	r2, 8008722 <_printf_common+0x26>
 800871e:	3301      	adds	r3, #1
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	0699      	lsls	r1, r3, #26
 8008726:	bf42      	ittt	mi
 8008728:	6833      	ldrmi	r3, [r6, #0]
 800872a:	3302      	addmi	r3, #2
 800872c:	6033      	strmi	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	f015 0506 	ands.w	r5, r5, #6
 8008734:	d106      	bne.n	8008744 <_printf_common+0x48>
 8008736:	f104 0a19 	add.w	sl, r4, #25
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc26      	bgt.n	8008792 <_printf_common+0x96>
 8008744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008748:	1e13      	subs	r3, r2, #0
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	2301      	movne	r3, #1
 8008750:	0692      	lsls	r2, r2, #26
 8008752:	d42b      	bmi.n	80087ac <_printf_common+0xb0>
 8008754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008758:	4649      	mov	r1, r9
 800875a:	4638      	mov	r0, r7
 800875c:	47c0      	blx	r8
 800875e:	3001      	adds	r0, #1
 8008760:	d01e      	beq.n	80087a0 <_printf_common+0xa4>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	68e5      	ldr	r5, [r4, #12]
 8008766:	6832      	ldr	r2, [r6, #0]
 8008768:	f003 0306 	and.w	r3, r3, #6
 800876c:	2b04      	cmp	r3, #4
 800876e:	bf08      	it	eq
 8008770:	1aad      	subeq	r5, r5, r2
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	6922      	ldr	r2, [r4, #16]
 8008776:	bf0c      	ite	eq
 8008778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800877c:	2500      	movne	r5, #0
 800877e:	4293      	cmp	r3, r2
 8008780:	bfc4      	itt	gt
 8008782:	1a9b      	subgt	r3, r3, r2
 8008784:	18ed      	addgt	r5, r5, r3
 8008786:	2600      	movs	r6, #0
 8008788:	341a      	adds	r4, #26
 800878a:	42b5      	cmp	r5, r6
 800878c:	d11a      	bne.n	80087c4 <_printf_common+0xc8>
 800878e:	2000      	movs	r0, #0
 8008790:	e008      	b.n	80087a4 <_printf_common+0xa8>
 8008792:	2301      	movs	r3, #1
 8008794:	4652      	mov	r2, sl
 8008796:	4649      	mov	r1, r9
 8008798:	4638      	mov	r0, r7
 800879a:	47c0      	blx	r8
 800879c:	3001      	adds	r0, #1
 800879e:	d103      	bne.n	80087a8 <_printf_common+0xac>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	3501      	adds	r5, #1
 80087aa:	e7c6      	b.n	800873a <_printf_common+0x3e>
 80087ac:	18e1      	adds	r1, r4, r3
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	2030      	movs	r0, #48	; 0x30
 80087b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b6:	4422      	add	r2, r4
 80087b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c0:	3302      	adds	r3, #2
 80087c2:	e7c7      	b.n	8008754 <_printf_common+0x58>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4622      	mov	r2, r4
 80087c8:	4649      	mov	r1, r9
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	3001      	adds	r0, #1
 80087d0:	d0e6      	beq.n	80087a0 <_printf_common+0xa4>
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7d9      	b.n	800878a <_printf_common+0x8e>
	...

080087d8 <_printf_i>:
 80087d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	7e0f      	ldrb	r7, [r1, #24]
 80087de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e0:	2f78      	cmp	r7, #120	; 0x78
 80087e2:	4691      	mov	r9, r2
 80087e4:	4680      	mov	r8, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	469a      	mov	sl, r3
 80087ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ee:	d807      	bhi.n	8008800 <_printf_i+0x28>
 80087f0:	2f62      	cmp	r7, #98	; 0x62
 80087f2:	d80a      	bhi.n	800880a <_printf_i+0x32>
 80087f4:	2f00      	cmp	r7, #0
 80087f6:	f000 80d8 	beq.w	80089aa <_printf_i+0x1d2>
 80087fa:	2f58      	cmp	r7, #88	; 0x58
 80087fc:	f000 80a3 	beq.w	8008946 <_printf_i+0x16e>
 8008800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008808:	e03a      	b.n	8008880 <_printf_i+0xa8>
 800880a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800880e:	2b15      	cmp	r3, #21
 8008810:	d8f6      	bhi.n	8008800 <_printf_i+0x28>
 8008812:	a101      	add	r1, pc, #4	; (adr r1, 8008818 <_printf_i+0x40>)
 8008814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008818:	08008871 	.word	0x08008871
 800881c:	08008885 	.word	0x08008885
 8008820:	08008801 	.word	0x08008801
 8008824:	08008801 	.word	0x08008801
 8008828:	08008801 	.word	0x08008801
 800882c:	08008801 	.word	0x08008801
 8008830:	08008885 	.word	0x08008885
 8008834:	08008801 	.word	0x08008801
 8008838:	08008801 	.word	0x08008801
 800883c:	08008801 	.word	0x08008801
 8008840:	08008801 	.word	0x08008801
 8008844:	08008991 	.word	0x08008991
 8008848:	080088b5 	.word	0x080088b5
 800884c:	08008973 	.word	0x08008973
 8008850:	08008801 	.word	0x08008801
 8008854:	08008801 	.word	0x08008801
 8008858:	080089b3 	.word	0x080089b3
 800885c:	08008801 	.word	0x08008801
 8008860:	080088b5 	.word	0x080088b5
 8008864:	08008801 	.word	0x08008801
 8008868:	08008801 	.word	0x08008801
 800886c:	0800897b 	.word	0x0800897b
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008880:	2301      	movs	r3, #1
 8008882:	e0a3      	b.n	80089cc <_printf_i+0x1f4>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	6829      	ldr	r1, [r5, #0]
 8008888:	0606      	lsls	r6, r0, #24
 800888a:	f101 0304 	add.w	r3, r1, #4
 800888e:	d50a      	bpl.n	80088a6 <_printf_i+0xce>
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	2e00      	cmp	r6, #0
 8008896:	da03      	bge.n	80088a0 <_printf_i+0xc8>
 8008898:	232d      	movs	r3, #45	; 0x2d
 800889a:	4276      	negs	r6, r6
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	485e      	ldr	r0, [pc, #376]	; (8008a1c <_printf_i+0x244>)
 80088a2:	230a      	movs	r3, #10
 80088a4:	e019      	b.n	80088da <_printf_i+0x102>
 80088a6:	680e      	ldr	r6, [r1, #0]
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088ae:	bf18      	it	ne
 80088b0:	b236      	sxthne	r6, r6
 80088b2:	e7ef      	b.n	8008894 <_printf_i+0xbc>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	6029      	str	r1, [r5, #0]
 80088bc:	0601      	lsls	r1, r0, #24
 80088be:	d501      	bpl.n	80088c4 <_printf_i+0xec>
 80088c0:	681e      	ldr	r6, [r3, #0]
 80088c2:	e002      	b.n	80088ca <_printf_i+0xf2>
 80088c4:	0646      	lsls	r6, r0, #25
 80088c6:	d5fb      	bpl.n	80088c0 <_printf_i+0xe8>
 80088c8:	881e      	ldrh	r6, [r3, #0]
 80088ca:	4854      	ldr	r0, [pc, #336]	; (8008a1c <_printf_i+0x244>)
 80088cc:	2f6f      	cmp	r7, #111	; 0x6f
 80088ce:	bf0c      	ite	eq
 80088d0:	2308      	moveq	r3, #8
 80088d2:	230a      	movne	r3, #10
 80088d4:	2100      	movs	r1, #0
 80088d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088da:	6865      	ldr	r5, [r4, #4]
 80088dc:	60a5      	str	r5, [r4, #8]
 80088de:	2d00      	cmp	r5, #0
 80088e0:	bfa2      	ittt	ge
 80088e2:	6821      	ldrge	r1, [r4, #0]
 80088e4:	f021 0104 	bicge.w	r1, r1, #4
 80088e8:	6021      	strge	r1, [r4, #0]
 80088ea:	b90e      	cbnz	r6, 80088f0 <_printf_i+0x118>
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	d04d      	beq.n	800898c <_printf_i+0x1b4>
 80088f0:	4615      	mov	r5, r2
 80088f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f6:	fb03 6711 	mls	r7, r3, r1, r6
 80088fa:	5dc7      	ldrb	r7, [r0, r7]
 80088fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008900:	4637      	mov	r7, r6
 8008902:	42bb      	cmp	r3, r7
 8008904:	460e      	mov	r6, r1
 8008906:	d9f4      	bls.n	80088f2 <_printf_i+0x11a>
 8008908:	2b08      	cmp	r3, #8
 800890a:	d10b      	bne.n	8008924 <_printf_i+0x14c>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	07de      	lsls	r6, r3, #31
 8008910:	d508      	bpl.n	8008924 <_printf_i+0x14c>
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	6861      	ldr	r1, [r4, #4]
 8008916:	4299      	cmp	r1, r3
 8008918:	bfde      	ittt	le
 800891a:	2330      	movle	r3, #48	; 0x30
 800891c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008924:	1b52      	subs	r2, r2, r5
 8008926:	6122      	str	r2, [r4, #16]
 8008928:	f8cd a000 	str.w	sl, [sp]
 800892c:	464b      	mov	r3, r9
 800892e:	aa03      	add	r2, sp, #12
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f7ff fee2 	bl	80086fc <_printf_common>
 8008938:	3001      	adds	r0, #1
 800893a:	d14c      	bne.n	80089d6 <_printf_i+0x1fe>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	b004      	add	sp, #16
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	4835      	ldr	r0, [pc, #212]	; (8008a1c <_printf_i+0x244>)
 8008948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800894c:	6829      	ldr	r1, [r5, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f851 6b04 	ldr.w	r6, [r1], #4
 8008954:	6029      	str	r1, [r5, #0]
 8008956:	061d      	lsls	r5, r3, #24
 8008958:	d514      	bpl.n	8008984 <_printf_i+0x1ac>
 800895a:	07df      	lsls	r7, r3, #31
 800895c:	bf44      	itt	mi
 800895e:	f043 0320 	orrmi.w	r3, r3, #32
 8008962:	6023      	strmi	r3, [r4, #0]
 8008964:	b91e      	cbnz	r6, 800896e <_printf_i+0x196>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f023 0320 	bic.w	r3, r3, #32
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2310      	movs	r3, #16
 8008970:	e7b0      	b.n	80088d4 <_printf_i+0xfc>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	f043 0320 	orr.w	r3, r3, #32
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	2378      	movs	r3, #120	; 0x78
 800897c:	4828      	ldr	r0, [pc, #160]	; (8008a20 <_printf_i+0x248>)
 800897e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008982:	e7e3      	b.n	800894c <_printf_i+0x174>
 8008984:	0659      	lsls	r1, r3, #25
 8008986:	bf48      	it	mi
 8008988:	b2b6      	uxthmi	r6, r6
 800898a:	e7e6      	b.n	800895a <_printf_i+0x182>
 800898c:	4615      	mov	r5, r2
 800898e:	e7bb      	b.n	8008908 <_printf_i+0x130>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	6826      	ldr	r6, [r4, #0]
 8008994:	6961      	ldr	r1, [r4, #20]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6028      	str	r0, [r5, #0]
 800899a:	0635      	lsls	r5, r6, #24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0x1cc>
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0x1d2>
 80089a4:	0670      	lsls	r0, r6, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0x1c8>
 80089a8:	8019      	strh	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	4615      	mov	r5, r2
 80089b0:	e7ba      	b.n	8008928 <_printf_i+0x150>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	602a      	str	r2, [r5, #0]
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	6862      	ldr	r2, [r4, #4]
 80089bc:	2100      	movs	r1, #0
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fc0e 	bl	80001e0 <memchr>
 80089c4:	b108      	cbz	r0, 80089ca <_printf_i+0x1f2>
 80089c6:	1b40      	subs	r0, r0, r5
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d4:	e7a8      	b.n	8008928 <_printf_i+0x150>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	462a      	mov	r2, r5
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d0ab      	beq.n	800893c <_printf_i+0x164>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	079b      	lsls	r3, r3, #30
 80089e8:	d413      	bmi.n	8008a12 <_printf_i+0x23a>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e7a4      	b.n	8008940 <_printf_i+0x168>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d09b      	beq.n	800893c <_printf_i+0x164>
 8008a04:	3501      	adds	r5, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9903      	ldr	r1, [sp, #12]
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dcf2      	bgt.n	80089f6 <_printf_i+0x21e>
 8008a10:	e7eb      	b.n	80089ea <_printf_i+0x212>
 8008a12:	2500      	movs	r5, #0
 8008a14:	f104 0619 	add.w	r6, r4, #25
 8008a18:	e7f5      	b.n	8008a06 <_printf_i+0x22e>
 8008a1a:	bf00      	nop
 8008a1c:	0800c53f 	.word	0x0800c53f
 8008a20:	0800c550 	.word	0x0800c550

08008a24 <_sbrk_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d06      	ldr	r5, [pc, #24]	; (8008a40 <_sbrk_r+0x1c>)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	f7fa fa60 	bl	8002ef4 <_sbrk>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_sbrk_r+0x1a>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_sbrk_r+0x1a>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	20000398 	.word	0x20000398

08008a44 <__swbuf_r>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	460e      	mov	r6, r1
 8008a48:	4614      	mov	r4, r2
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	b118      	cbz	r0, 8008a56 <__swbuf_r+0x12>
 8008a4e:	6983      	ldr	r3, [r0, #24]
 8008a50:	b90b      	cbnz	r3, 8008a56 <__swbuf_r+0x12>
 8008a52:	f000 f9d9 	bl	8008e08 <__sinit>
 8008a56:	4b21      	ldr	r3, [pc, #132]	; (8008adc <__swbuf_r+0x98>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	d12b      	bne.n	8008ab4 <__swbuf_r+0x70>
 8008a5c:	686c      	ldr	r4, [r5, #4]
 8008a5e:	69a3      	ldr	r3, [r4, #24]
 8008a60:	60a3      	str	r3, [r4, #8]
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	071a      	lsls	r2, r3, #28
 8008a66:	d52f      	bpl.n	8008ac8 <__swbuf_r+0x84>
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	b36b      	cbz	r3, 8008ac8 <__swbuf_r+0x84>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	6820      	ldr	r0, [r4, #0]
 8008a70:	1ac0      	subs	r0, r0, r3
 8008a72:	6963      	ldr	r3, [r4, #20]
 8008a74:	b2f6      	uxtb	r6, r6
 8008a76:	4283      	cmp	r3, r0
 8008a78:	4637      	mov	r7, r6
 8008a7a:	dc04      	bgt.n	8008a86 <__swbuf_r+0x42>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f92e 	bl	8008ce0 <_fflush_r>
 8008a84:	bb30      	cbnz	r0, 8008ad4 <__swbuf_r+0x90>
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	60a3      	str	r3, [r4, #8]
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	6022      	str	r2, [r4, #0]
 8008a92:	701e      	strb	r6, [r3, #0]
 8008a94:	6963      	ldr	r3, [r4, #20]
 8008a96:	3001      	adds	r0, #1
 8008a98:	4283      	cmp	r3, r0
 8008a9a:	d004      	beq.n	8008aa6 <__swbuf_r+0x62>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	07db      	lsls	r3, r3, #31
 8008aa0:	d506      	bpl.n	8008ab0 <__swbuf_r+0x6c>
 8008aa2:	2e0a      	cmp	r6, #10
 8008aa4:	d104      	bne.n	8008ab0 <__swbuf_r+0x6c>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 f919 	bl	8008ce0 <_fflush_r>
 8008aae:	b988      	cbnz	r0, 8008ad4 <__swbuf_r+0x90>
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <__swbuf_r+0x9c>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d101      	bne.n	8008abe <__swbuf_r+0x7a>
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	e7cf      	b.n	8008a5e <__swbuf_r+0x1a>
 8008abe:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <__swbuf_r+0xa0>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	bf08      	it	eq
 8008ac4:	68ec      	ldreq	r4, [r5, #12]
 8008ac6:	e7ca      	b.n	8008a5e <__swbuf_r+0x1a>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 f80c 	bl	8008ae8 <__swsetup_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d0cb      	beq.n	8008a6c <__swbuf_r+0x28>
 8008ad4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ad8:	e7ea      	b.n	8008ab0 <__swbuf_r+0x6c>
 8008ada:	bf00      	nop
 8008adc:	0800c584 	.word	0x0800c584
 8008ae0:	0800c5a4 	.word	0x0800c5a4
 8008ae4:	0800c564 	.word	0x0800c564

08008ae8 <__swsetup_r>:
 8008ae8:	4b32      	ldr	r3, [pc, #200]	; (8008bb4 <__swsetup_r+0xcc>)
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	681d      	ldr	r5, [r3, #0]
 8008aee:	4606      	mov	r6, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	b125      	cbz	r5, 8008afe <__swsetup_r+0x16>
 8008af4:	69ab      	ldr	r3, [r5, #24]
 8008af6:	b913      	cbnz	r3, 8008afe <__swsetup_r+0x16>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 f985 	bl	8008e08 <__sinit>
 8008afe:	4b2e      	ldr	r3, [pc, #184]	; (8008bb8 <__swsetup_r+0xd0>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d10f      	bne.n	8008b24 <__swsetup_r+0x3c>
 8008b04:	686c      	ldr	r4, [r5, #4]
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b0c:	0719      	lsls	r1, r3, #28
 8008b0e:	d42c      	bmi.n	8008b6a <__swsetup_r+0x82>
 8008b10:	06dd      	lsls	r5, r3, #27
 8008b12:	d411      	bmi.n	8008b38 <__swsetup_r+0x50>
 8008b14:	2309      	movs	r3, #9
 8008b16:	6033      	str	r3, [r6, #0]
 8008b18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	e03e      	b.n	8008ba2 <__swsetup_r+0xba>
 8008b24:	4b25      	ldr	r3, [pc, #148]	; (8008bbc <__swsetup_r+0xd4>)
 8008b26:	429c      	cmp	r4, r3
 8008b28:	d101      	bne.n	8008b2e <__swsetup_r+0x46>
 8008b2a:	68ac      	ldr	r4, [r5, #8]
 8008b2c:	e7eb      	b.n	8008b06 <__swsetup_r+0x1e>
 8008b2e:	4b24      	ldr	r3, [pc, #144]	; (8008bc0 <__swsetup_r+0xd8>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	bf08      	it	eq
 8008b34:	68ec      	ldreq	r4, [r5, #12]
 8008b36:	e7e6      	b.n	8008b06 <__swsetup_r+0x1e>
 8008b38:	0758      	lsls	r0, r3, #29
 8008b3a:	d512      	bpl.n	8008b62 <__swsetup_r+0x7a>
 8008b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b3e:	b141      	cbz	r1, 8008b52 <__swsetup_r+0x6a>
 8008b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <__swsetup_r+0x66>
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff fb9d 	bl	8008288 <_free_r>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6363      	str	r3, [r4, #52]	; 0x34
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f043 0308 	orr.w	r3, r3, #8
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	b94b      	cbnz	r3, 8008b82 <__swsetup_r+0x9a>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b78:	d003      	beq.n	8008b82 <__swsetup_r+0x9a>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 fa09 	bl	8008f94 <__smakebuf_r>
 8008b82:	89a0      	ldrh	r0, [r4, #12]
 8008b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b88:	f010 0301 	ands.w	r3, r0, #1
 8008b8c:	d00a      	beq.n	8008ba4 <__swsetup_r+0xbc>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60a3      	str	r3, [r4, #8]
 8008b92:	6963      	ldr	r3, [r4, #20]
 8008b94:	425b      	negs	r3, r3
 8008b96:	61a3      	str	r3, [r4, #24]
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	b943      	cbnz	r3, 8008bae <__swsetup_r+0xc6>
 8008b9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ba0:	d1ba      	bne.n	8008b18 <__swsetup_r+0x30>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	0781      	lsls	r1, r0, #30
 8008ba6:	bf58      	it	pl
 8008ba8:	6963      	ldrpl	r3, [r4, #20]
 8008baa:	60a3      	str	r3, [r4, #8]
 8008bac:	e7f4      	b.n	8008b98 <__swsetup_r+0xb0>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e7f7      	b.n	8008ba2 <__swsetup_r+0xba>
 8008bb2:	bf00      	nop
 8008bb4:	20000058 	.word	0x20000058
 8008bb8:	0800c584 	.word	0x0800c584
 8008bbc:	0800c5a4 	.word	0x0800c5a4
 8008bc0:	0800c564 	.word	0x0800c564

08008bc4 <abort>:
 8008bc4:	b508      	push	{r3, lr}
 8008bc6:	2006      	movs	r0, #6
 8008bc8:	f000 fa58 	bl	800907c <raise>
 8008bcc:	2001      	movs	r0, #1
 8008bce:	f7fa f919 	bl	8002e04 <_exit>
	...

08008bd4 <__sflush_r>:
 8008bd4:	898a      	ldrh	r2, [r1, #12]
 8008bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	4605      	mov	r5, r0
 8008bdc:	0710      	lsls	r0, r2, #28
 8008bde:	460c      	mov	r4, r1
 8008be0:	d458      	bmi.n	8008c94 <__sflush_r+0xc0>
 8008be2:	684b      	ldr	r3, [r1, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc05      	bgt.n	8008bf4 <__sflush_r+0x20>
 8008be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dc02      	bgt.n	8008bf4 <__sflush_r+0x20>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf6:	2e00      	cmp	r6, #0
 8008bf8:	d0f9      	beq.n	8008bee <__sflush_r+0x1a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c00:	682f      	ldr	r7, [r5, #0]
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	d032      	beq.n	8008c6c <__sflush_r+0x98>
 8008c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	075a      	lsls	r2, r3, #29
 8008c0c:	d505      	bpl.n	8008c1a <__sflush_r+0x46>
 8008c0e:	6863      	ldr	r3, [r4, #4]
 8008c10:	1ac0      	subs	r0, r0, r3
 8008c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c14:	b10b      	cbz	r3, 8008c1a <__sflush_r+0x46>
 8008c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c18:	1ac0      	subs	r0, r0, r3
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c20:	6a21      	ldr	r1, [r4, #32]
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b0      	blx	r6
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	d106      	bne.n	8008c3a <__sflush_r+0x66>
 8008c2c:	6829      	ldr	r1, [r5, #0]
 8008c2e:	291d      	cmp	r1, #29
 8008c30:	d82c      	bhi.n	8008c8c <__sflush_r+0xb8>
 8008c32:	4a2a      	ldr	r2, [pc, #168]	; (8008cdc <__sflush_r+0x108>)
 8008c34:	40ca      	lsrs	r2, r1
 8008c36:	07d6      	lsls	r6, r2, #31
 8008c38:	d528      	bpl.n	8008c8c <__sflush_r+0xb8>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	6062      	str	r2, [r4, #4]
 8008c3e:	04d9      	lsls	r1, r3, #19
 8008c40:	6922      	ldr	r2, [r4, #16]
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	d504      	bpl.n	8008c50 <__sflush_r+0x7c>
 8008c46:	1c42      	adds	r2, r0, #1
 8008c48:	d101      	bne.n	8008c4e <__sflush_r+0x7a>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	b903      	cbnz	r3, 8008c50 <__sflush_r+0x7c>
 8008c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c52:	602f      	str	r7, [r5, #0]
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d0ca      	beq.n	8008bee <__sflush_r+0x1a>
 8008c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c5c:	4299      	cmp	r1, r3
 8008c5e:	d002      	beq.n	8008c66 <__sflush_r+0x92>
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7ff fb11 	bl	8008288 <_free_r>
 8008c66:	2000      	movs	r0, #0
 8008c68:	6360      	str	r0, [r4, #52]	; 0x34
 8008c6a:	e7c1      	b.n	8008bf0 <__sflush_r+0x1c>
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b0      	blx	r6
 8008c74:	1c41      	adds	r1, r0, #1
 8008c76:	d1c7      	bne.n	8008c08 <__sflush_r+0x34>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0c4      	beq.n	8008c08 <__sflush_r+0x34>
 8008c7e:	2b1d      	cmp	r3, #29
 8008c80:	d001      	beq.n	8008c86 <__sflush_r+0xb2>
 8008c82:	2b16      	cmp	r3, #22
 8008c84:	d101      	bne.n	8008c8a <__sflush_r+0xb6>
 8008c86:	602f      	str	r7, [r5, #0]
 8008c88:	e7b1      	b.n	8008bee <__sflush_r+0x1a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	e7ad      	b.n	8008bf0 <__sflush_r+0x1c>
 8008c94:	690f      	ldr	r7, [r1, #16]
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	d0a9      	beq.n	8008bee <__sflush_r+0x1a>
 8008c9a:	0793      	lsls	r3, r2, #30
 8008c9c:	680e      	ldr	r6, [r1, #0]
 8008c9e:	bf08      	it	eq
 8008ca0:	694b      	ldreq	r3, [r1, #20]
 8008ca2:	600f      	str	r7, [r1, #0]
 8008ca4:	bf18      	it	ne
 8008ca6:	2300      	movne	r3, #0
 8008ca8:	eba6 0807 	sub.w	r8, r6, r7
 8008cac:	608b      	str	r3, [r1, #8]
 8008cae:	f1b8 0f00 	cmp.w	r8, #0
 8008cb2:	dd9c      	ble.n	8008bee <__sflush_r+0x1a>
 8008cb4:	6a21      	ldr	r1, [r4, #32]
 8008cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cb8:	4643      	mov	r3, r8
 8008cba:	463a      	mov	r2, r7
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b0      	blx	r6
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	dc06      	bgt.n	8008cd2 <__sflush_r+0xfe>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	e78e      	b.n	8008bf0 <__sflush_r+0x1c>
 8008cd2:	4407      	add	r7, r0
 8008cd4:	eba8 0800 	sub.w	r8, r8, r0
 8008cd8:	e7e9      	b.n	8008cae <__sflush_r+0xda>
 8008cda:	bf00      	nop
 8008cdc:	20400001 	.word	0x20400001

08008ce0 <_fflush_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	690b      	ldr	r3, [r1, #16]
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	b913      	cbnz	r3, 8008cf0 <_fflush_r+0x10>
 8008cea:	2500      	movs	r5, #0
 8008cec:	4628      	mov	r0, r5
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	b118      	cbz	r0, 8008cfa <_fflush_r+0x1a>
 8008cf2:	6983      	ldr	r3, [r0, #24]
 8008cf4:	b90b      	cbnz	r3, 8008cfa <_fflush_r+0x1a>
 8008cf6:	f000 f887 	bl	8008e08 <__sinit>
 8008cfa:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <_fflush_r+0x6c>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d11b      	bne.n	8008d38 <_fflush_r+0x58>
 8008d00:	686c      	ldr	r4, [r5, #4]
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0ef      	beq.n	8008cea <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x3a>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x3a>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f000 f915 	bl	8008f44 <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff59 	bl	8008bd4 <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	4605      	mov	r5, r0
 8008d28:	d4e0      	bmi.n	8008cec <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4dd      	bmi.n	8008cec <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f000 f908 	bl	8008f46 <__retarget_lock_release_recursive>
 8008d36:	e7d9      	b.n	8008cec <_fflush_r+0xc>
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <_fflush_r+0x70>)
 8008d3a:	429c      	cmp	r4, r3
 8008d3c:	d101      	bne.n	8008d42 <_fflush_r+0x62>
 8008d3e:	68ac      	ldr	r4, [r5, #8]
 8008d40:	e7df      	b.n	8008d02 <_fflush_r+0x22>
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <_fflush_r+0x74>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	bf08      	it	eq
 8008d48:	68ec      	ldreq	r4, [r5, #12]
 8008d4a:	e7da      	b.n	8008d02 <_fflush_r+0x22>
 8008d4c:	0800c584 	.word	0x0800c584
 8008d50:	0800c5a4 	.word	0x0800c5a4
 8008d54:	0800c564 	.word	0x0800c564

08008d58 <std>:
 8008d58:	2300      	movs	r3, #0
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d66:	6083      	str	r3, [r0, #8]
 8008d68:	8181      	strh	r1, [r0, #12]
 8008d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d6c:	81c2      	strh	r2, [r0, #14]
 8008d6e:	6183      	str	r3, [r0, #24]
 8008d70:	4619      	mov	r1, r3
 8008d72:	2208      	movs	r2, #8
 8008d74:	305c      	adds	r0, #92	; 0x5c
 8008d76:	f7ff fa09 	bl	800818c <memset>
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <std+0x38>)
 8008d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d7e:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <std+0x3c>)
 8008d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <std+0x40>)
 8008d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <std+0x44>)
 8008d88:	6224      	str	r4, [r4, #32]
 8008d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	bf00      	nop
 8008d90:	080090b5 	.word	0x080090b5
 8008d94:	080090d7 	.word	0x080090d7
 8008d98:	0800910f 	.word	0x0800910f
 8008d9c:	08009133 	.word	0x08009133

08008da0 <_cleanup_r>:
 8008da0:	4901      	ldr	r1, [pc, #4]	; (8008da8 <_cleanup_r+0x8>)
 8008da2:	f000 b8af 	b.w	8008f04 <_fwalk_reent>
 8008da6:	bf00      	nop
 8008da8:	08008ce1 	.word	0x08008ce1

08008dac <__sfmoreglue>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	2268      	movs	r2, #104	; 0x68
 8008db0:	1e4d      	subs	r5, r1, #1
 8008db2:	4355      	muls	r5, r2
 8008db4:	460e      	mov	r6, r1
 8008db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dba:	f7ff fad1 	bl	8008360 <_malloc_r>
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	b140      	cbz	r0, 8008dd4 <__sfmoreglue+0x28>
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008dc8:	300c      	adds	r0, #12
 8008dca:	60a0      	str	r0, [r4, #8]
 8008dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dd0:	f7ff f9dc 	bl	800818c <memset>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}

08008dd8 <__sfp_lock_acquire>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__sfp_lock_acquire+0x8>)
 8008dda:	f000 b8b3 	b.w	8008f44 <__retarget_lock_acquire_recursive>
 8008dde:	bf00      	nop
 8008de0:	20000395 	.word	0x20000395

08008de4 <__sfp_lock_release>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__sfp_lock_release+0x8>)
 8008de6:	f000 b8ae 	b.w	8008f46 <__retarget_lock_release_recursive>
 8008dea:	bf00      	nop
 8008dec:	20000395 	.word	0x20000395

08008df0 <__sinit_lock_acquire>:
 8008df0:	4801      	ldr	r0, [pc, #4]	; (8008df8 <__sinit_lock_acquire+0x8>)
 8008df2:	f000 b8a7 	b.w	8008f44 <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	20000396 	.word	0x20000396

08008dfc <__sinit_lock_release>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__sinit_lock_release+0x8>)
 8008dfe:	f000 b8a2 	b.w	8008f46 <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	20000396 	.word	0x20000396

08008e08 <__sinit>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	f7ff fff0 	bl	8008df0 <__sinit_lock_acquire>
 8008e10:	69a3      	ldr	r3, [r4, #24]
 8008e12:	b11b      	cbz	r3, 8008e1c <__sinit+0x14>
 8008e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e18:	f7ff bff0 	b.w	8008dfc <__sinit_lock_release>
 8008e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e20:	6523      	str	r3, [r4, #80]	; 0x50
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <__sinit+0x68>)
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <__sinit+0x6c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	bf04      	itt	eq
 8008e2e:	2301      	moveq	r3, #1
 8008e30:	61a3      	streq	r3, [r4, #24]
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 f820 	bl	8008e78 <__sfp>
 8008e38:	6060      	str	r0, [r4, #4]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 f81c 	bl	8008e78 <__sfp>
 8008e40:	60a0      	str	r0, [r4, #8]
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 f818 	bl	8008e78 <__sfp>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	60e0      	str	r0, [r4, #12]
 8008e4c:	2104      	movs	r1, #4
 8008e4e:	6860      	ldr	r0, [r4, #4]
 8008e50:	f7ff ff82 	bl	8008d58 <std>
 8008e54:	68a0      	ldr	r0, [r4, #8]
 8008e56:	2201      	movs	r2, #1
 8008e58:	2109      	movs	r1, #9
 8008e5a:	f7ff ff7d 	bl	8008d58 <std>
 8008e5e:	68e0      	ldr	r0, [r4, #12]
 8008e60:	2202      	movs	r2, #2
 8008e62:	2112      	movs	r1, #18
 8008e64:	f7ff ff78 	bl	8008d58 <std>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	61a3      	str	r3, [r4, #24]
 8008e6c:	e7d2      	b.n	8008e14 <__sinit+0xc>
 8008e6e:	bf00      	nop
 8008e70:	0800c47c 	.word	0x0800c47c
 8008e74:	08008da1 	.word	0x08008da1

08008e78 <__sfp>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	f7ff ffac 	bl	8008dd8 <__sfp_lock_acquire>
 8008e80:	4b1e      	ldr	r3, [pc, #120]	; (8008efc <__sfp+0x84>)
 8008e82:	681e      	ldr	r6, [r3, #0]
 8008e84:	69b3      	ldr	r3, [r6, #24]
 8008e86:	b913      	cbnz	r3, 8008e8e <__sfp+0x16>
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff ffbd 	bl	8008e08 <__sinit>
 8008e8e:	3648      	adds	r6, #72	; 0x48
 8008e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	d503      	bpl.n	8008ea0 <__sfp+0x28>
 8008e98:	6833      	ldr	r3, [r6, #0]
 8008e9a:	b30b      	cbz	r3, 8008ee0 <__sfp+0x68>
 8008e9c:	6836      	ldr	r6, [r6, #0]
 8008e9e:	e7f7      	b.n	8008e90 <__sfp+0x18>
 8008ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ea4:	b9d5      	cbnz	r5, 8008edc <__sfp+0x64>
 8008ea6:	4b16      	ldr	r3, [pc, #88]	; (8008f00 <__sfp+0x88>)
 8008ea8:	60e3      	str	r3, [r4, #12]
 8008eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eae:	6665      	str	r5, [r4, #100]	; 0x64
 8008eb0:	f000 f847 	bl	8008f42 <__retarget_lock_init_recursive>
 8008eb4:	f7ff ff96 	bl	8008de4 <__sfp_lock_release>
 8008eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ec0:	6025      	str	r5, [r4, #0]
 8008ec2:	61a5      	str	r5, [r4, #24]
 8008ec4:	2208      	movs	r2, #8
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ecc:	f7ff f95e 	bl	800818c <memset>
 8008ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ed8:	4620      	mov	r0, r4
 8008eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008edc:	3468      	adds	r4, #104	; 0x68
 8008ede:	e7d9      	b.n	8008e94 <__sfp+0x1c>
 8008ee0:	2104      	movs	r1, #4
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7ff ff62 	bl	8008dac <__sfmoreglue>
 8008ee8:	4604      	mov	r4, r0
 8008eea:	6030      	str	r0, [r6, #0]
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1d5      	bne.n	8008e9c <__sfp+0x24>
 8008ef0:	f7ff ff78 	bl	8008de4 <__sfp_lock_release>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	e7ee      	b.n	8008ed8 <__sfp+0x60>
 8008efa:	bf00      	nop
 8008efc:	0800c47c 	.word	0x0800c47c
 8008f00:	ffff0001 	.word	0xffff0001

08008f04 <_fwalk_reent>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	4606      	mov	r6, r0
 8008f0a:	4688      	mov	r8, r1
 8008f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f10:	2700      	movs	r7, #0
 8008f12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f16:	f1b9 0901 	subs.w	r9, r9, #1
 8008f1a:	d505      	bpl.n	8008f28 <_fwalk_reent+0x24>
 8008f1c:	6824      	ldr	r4, [r4, #0]
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	d1f7      	bne.n	8008f12 <_fwalk_reent+0xe>
 8008f22:	4638      	mov	r0, r7
 8008f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f28:	89ab      	ldrh	r3, [r5, #12]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d907      	bls.n	8008f3e <_fwalk_reent+0x3a>
 8008f2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f32:	3301      	adds	r3, #1
 8008f34:	d003      	beq.n	8008f3e <_fwalk_reent+0x3a>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4630      	mov	r0, r6
 8008f3a:	47c0      	blx	r8
 8008f3c:	4307      	orrs	r7, r0
 8008f3e:	3568      	adds	r5, #104	; 0x68
 8008f40:	e7e9      	b.n	8008f16 <_fwalk_reent+0x12>

08008f42 <__retarget_lock_init_recursive>:
 8008f42:	4770      	bx	lr

08008f44 <__retarget_lock_acquire_recursive>:
 8008f44:	4770      	bx	lr

08008f46 <__retarget_lock_release_recursive>:
 8008f46:	4770      	bx	lr

08008f48 <__swhatbuf_r>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	460e      	mov	r6, r1
 8008f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f50:	2900      	cmp	r1, #0
 8008f52:	b096      	sub	sp, #88	; 0x58
 8008f54:	4614      	mov	r4, r2
 8008f56:	461d      	mov	r5, r3
 8008f58:	da08      	bge.n	8008f6c <__swhatbuf_r+0x24>
 8008f5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	061a      	lsls	r2, r3, #24
 8008f64:	d410      	bmi.n	8008f88 <__swhatbuf_r+0x40>
 8008f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6a:	e00e      	b.n	8008f8a <__swhatbuf_r+0x42>
 8008f6c:	466a      	mov	r2, sp
 8008f6e:	f000 f907 	bl	8009180 <_fstat_r>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	dbf1      	blt.n	8008f5a <__swhatbuf_r+0x12>
 8008f76:	9a01      	ldr	r2, [sp, #4]
 8008f78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f80:	425a      	negs	r2, r3
 8008f82:	415a      	adcs	r2, r3
 8008f84:	602a      	str	r2, [r5, #0]
 8008f86:	e7ee      	b.n	8008f66 <__swhatbuf_r+0x1e>
 8008f88:	2340      	movs	r3, #64	; 0x40
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	b016      	add	sp, #88	; 0x58
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f94 <__smakebuf_r>:
 8008f94:	898b      	ldrh	r3, [r1, #12]
 8008f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f98:	079d      	lsls	r5, r3, #30
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	d507      	bpl.n	8008fb0 <__smakebuf_r+0x1c>
 8008fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	6163      	str	r3, [r4, #20]
 8008fac:	b002      	add	sp, #8
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	ab01      	add	r3, sp, #4
 8008fb2:	466a      	mov	r2, sp
 8008fb4:	f7ff ffc8 	bl	8008f48 <__swhatbuf_r>
 8008fb8:	9900      	ldr	r1, [sp, #0]
 8008fba:	4605      	mov	r5, r0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7ff f9cf 	bl	8008360 <_malloc_r>
 8008fc2:	b948      	cbnz	r0, 8008fd8 <__smakebuf_r+0x44>
 8008fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc8:	059a      	lsls	r2, r3, #22
 8008fca:	d4ef      	bmi.n	8008fac <__smakebuf_r+0x18>
 8008fcc:	f023 0303 	bic.w	r3, r3, #3
 8008fd0:	f043 0302 	orr.w	r3, r3, #2
 8008fd4:	81a3      	strh	r3, [r4, #12]
 8008fd6:	e7e3      	b.n	8008fa0 <__smakebuf_r+0xc>
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <__smakebuf_r+0x7c>)
 8008fda:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	6020      	str	r0, [r4, #0]
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	6163      	str	r3, [r4, #20]
 8008fea:	9b01      	ldr	r3, [sp, #4]
 8008fec:	6120      	str	r0, [r4, #16]
 8008fee:	b15b      	cbz	r3, 8009008 <__smakebuf_r+0x74>
 8008ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f000 f8d5 	bl	80091a4 <_isatty_r>
 8008ffa:	b128      	cbz	r0, 8009008 <__smakebuf_r+0x74>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	f043 0301 	orr.w	r3, r3, #1
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	89a0      	ldrh	r0, [r4, #12]
 800900a:	4305      	orrs	r5, r0
 800900c:	81a5      	strh	r5, [r4, #12]
 800900e:	e7cd      	b.n	8008fac <__smakebuf_r+0x18>
 8009010:	08008da1 	.word	0x08008da1

08009014 <__malloc_lock>:
 8009014:	4801      	ldr	r0, [pc, #4]	; (800901c <__malloc_lock+0x8>)
 8009016:	f7ff bf95 	b.w	8008f44 <__retarget_lock_acquire_recursive>
 800901a:	bf00      	nop
 800901c:	20000394 	.word	0x20000394

08009020 <__malloc_unlock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_unlock+0x8>)
 8009022:	f7ff bf90 	b.w	8008f46 <__retarget_lock_release_recursive>
 8009026:	bf00      	nop
 8009028:	20000394 	.word	0x20000394

0800902c <_raise_r>:
 800902c:	291f      	cmp	r1, #31
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	d904      	bls.n	8009040 <_raise_r+0x14>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009042:	b112      	cbz	r2, 800904a <_raise_r+0x1e>
 8009044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009048:	b94b      	cbnz	r3, 800905e <_raise_r+0x32>
 800904a:	4620      	mov	r0, r4
 800904c:	f000 f830 	bl	80090b0 <_getpid_r>
 8009050:	462a      	mov	r2, r5
 8009052:	4601      	mov	r1, r0
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800905a:	f000 b817 	b.w	800908c <_kill_r>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00a      	beq.n	8009078 <_raise_r+0x4c>
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	d103      	bne.n	800906e <_raise_r+0x42>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2001      	movs	r0, #1
 800906c:	e7e7      	b.n	800903e <_raise_r+0x12>
 800906e:	2400      	movs	r4, #0
 8009070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009074:	4628      	mov	r0, r5
 8009076:	4798      	blx	r3
 8009078:	2000      	movs	r0, #0
 800907a:	e7e0      	b.n	800903e <_raise_r+0x12>

0800907c <raise>:
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <raise+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f7ff bfd3 	b.w	800902c <_raise_r>
 8009086:	bf00      	nop
 8009088:	20000058 	.word	0x20000058

0800908c <_kill_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	; (80090ac <_kill_r+0x20>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f9 fea3 	bl	8002de4 <_kill>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_kill_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_kill_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	20000398 	.word	0x20000398

080090b0 <_getpid_r>:
 80090b0:	f7f9 be90 	b.w	8002dd4 <_getpid>

080090b4 <__sread>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090bc:	f000 f894 	bl	80091e8 <_read_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	bfab      	itete	ge
 80090c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090c6:	89a3      	ldrhlt	r3, [r4, #12]
 80090c8:	181b      	addge	r3, r3, r0
 80090ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090ce:	bfac      	ite	ge
 80090d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80090d2:	81a3      	strhlt	r3, [r4, #12]
 80090d4:	bd10      	pop	{r4, pc}

080090d6 <__swrite>:
 80090d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090da:	461f      	mov	r7, r3
 80090dc:	898b      	ldrh	r3, [r1, #12]
 80090de:	05db      	lsls	r3, r3, #23
 80090e0:	4605      	mov	r5, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	4616      	mov	r6, r2
 80090e6:	d505      	bpl.n	80090f4 <__swrite+0x1e>
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	2302      	movs	r3, #2
 80090ee:	2200      	movs	r2, #0
 80090f0:	f000 f868 	bl	80091c4 <_lseek_r>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	4632      	mov	r2, r6
 8009102:	463b      	mov	r3, r7
 8009104:	4628      	mov	r0, r5
 8009106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910a:	f000 b817 	b.w	800913c <_write_r>

0800910e <__sseek>:
 800910e:	b510      	push	{r4, lr}
 8009110:	460c      	mov	r4, r1
 8009112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009116:	f000 f855 	bl	80091c4 <_lseek_r>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	bf15      	itete	ne
 8009120:	6560      	strne	r0, [r4, #84]	; 0x54
 8009122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800912a:	81a3      	strheq	r3, [r4, #12]
 800912c:	bf18      	it	ne
 800912e:	81a3      	strhne	r3, [r4, #12]
 8009130:	bd10      	pop	{r4, pc}

08009132 <__sclose>:
 8009132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009136:	f000 b813 	b.w	8009160 <_close_r>
	...

0800913c <_write_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d07      	ldr	r5, [pc, #28]	; (800915c <_write_r+0x20>)
 8009140:	4604      	mov	r4, r0
 8009142:	4608      	mov	r0, r1
 8009144:	4611      	mov	r1, r2
 8009146:	2200      	movs	r2, #0
 8009148:	602a      	str	r2, [r5, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f7f9 fe81 	bl	8002e52 <_write>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_write_r+0x1e>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_write_r+0x1e>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	20000398 	.word	0x20000398

08009160 <_close_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4d06      	ldr	r5, [pc, #24]	; (800917c <_close_r+0x1c>)
 8009164:	2300      	movs	r3, #0
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	f7f9 fe8d 	bl	8002e8a <_close>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_close_r+0x1a>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_close_r+0x1a>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20000398 	.word	0x20000398

08009180 <_fstat_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	; (80091a0 <_fstat_r+0x20>)
 8009184:	2300      	movs	r3, #0
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	4611      	mov	r1, r2
 800918c:	602b      	str	r3, [r5, #0]
 800918e:	f7f9 fe88 	bl	8002ea2 <_fstat>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	d102      	bne.n	800919c <_fstat_r+0x1c>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	b103      	cbz	r3, 800919c <_fstat_r+0x1c>
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	bd38      	pop	{r3, r4, r5, pc}
 800919e:	bf00      	nop
 80091a0:	20000398 	.word	0x20000398

080091a4 <_isatty_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d06      	ldr	r5, [pc, #24]	; (80091c0 <_isatty_r+0x1c>)
 80091a8:	2300      	movs	r3, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	f7f9 fe87 	bl	8002ec2 <_isatty>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_isatty_r+0x1a>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_isatty_r+0x1a>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20000398 	.word	0x20000398

080091c4 <_lseek_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	; (80091e4 <_lseek_r+0x20>)
 80091c8:	4604      	mov	r4, r0
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f9 fe80 	bl	8002ed8 <_lseek>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_lseek_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_lseek_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20000398 	.word	0x20000398

080091e8 <_read_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d07      	ldr	r5, [pc, #28]	; (8009208 <_read_r+0x20>)
 80091ec:	4604      	mov	r4, r0
 80091ee:	4608      	mov	r0, r1
 80091f0:	4611      	mov	r1, r2
 80091f2:	2200      	movs	r2, #0
 80091f4:	602a      	str	r2, [r5, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	f7f9 fe0e 	bl	8002e18 <_read>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_read_r+0x1e>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_read_r+0x1e>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	20000398 	.word	0x20000398

0800920c <sqrt>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	ed2d 8b02 	vpush	{d8}
 8009212:	ec55 4b10 	vmov	r4, r5, d0
 8009216:	f000 f825 	bl	8009264 <__ieee754_sqrt>
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	eeb0 8a40 	vmov.f32	s16, s0
 8009226:	eef0 8a60 	vmov.f32	s17, s1
 800922a:	f7f7 fc7f 	bl	8000b2c <__aeabi_dcmpun>
 800922e:	b990      	cbnz	r0, 8009256 <sqrt+0x4a>
 8009230:	2200      	movs	r2, #0
 8009232:	2300      	movs	r3, #0
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 fc50 	bl	8000adc <__aeabi_dcmplt>
 800923c:	b158      	cbz	r0, 8009256 <sqrt+0x4a>
 800923e:	f7fe ff7b 	bl	8008138 <__errno>
 8009242:	2321      	movs	r3, #33	; 0x21
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f7f7 fafd 	bl	800084c <__aeabi_ddiv>
 8009252:	ec41 0b18 	vmov	d8, r0, r1
 8009256:	eeb0 0a48 	vmov.f32	s0, s16
 800925a:	eef0 0a68 	vmov.f32	s1, s17
 800925e:	ecbd 8b02 	vpop	{d8}
 8009262:	bd38      	pop	{r3, r4, r5, pc}

08009264 <__ieee754_sqrt>:
 8009264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009268:	ec55 4b10 	vmov	r4, r5, d0
 800926c:	4e55      	ldr	r6, [pc, #340]	; (80093c4 <__ieee754_sqrt+0x160>)
 800926e:	43ae      	bics	r6, r5
 8009270:	ee10 0a10 	vmov	r0, s0
 8009274:	ee10 3a10 	vmov	r3, s0
 8009278:	462a      	mov	r2, r5
 800927a:	4629      	mov	r1, r5
 800927c:	d110      	bne.n	80092a0 <__ieee754_sqrt+0x3c>
 800927e:	ee10 2a10 	vmov	r2, s0
 8009282:	462b      	mov	r3, r5
 8009284:	f7f7 f9b8 	bl	80005f8 <__aeabi_dmul>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4620      	mov	r0, r4
 800928e:	4629      	mov	r1, r5
 8009290:	f7f6 fffc 	bl	800028c <__adddf3>
 8009294:	4604      	mov	r4, r0
 8009296:	460d      	mov	r5, r1
 8009298:	ec45 4b10 	vmov	d0, r4, r5
 800929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a0:	2d00      	cmp	r5, #0
 80092a2:	dc10      	bgt.n	80092c6 <__ieee754_sqrt+0x62>
 80092a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80092a8:	4330      	orrs	r0, r6
 80092aa:	d0f5      	beq.n	8009298 <__ieee754_sqrt+0x34>
 80092ac:	b15d      	cbz	r5, 80092c6 <__ieee754_sqrt+0x62>
 80092ae:	ee10 2a10 	vmov	r2, s0
 80092b2:	462b      	mov	r3, r5
 80092b4:	ee10 0a10 	vmov	r0, s0
 80092b8:	f7f6 ffe6 	bl	8000288 <__aeabi_dsub>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	f7f7 fac4 	bl	800084c <__aeabi_ddiv>
 80092c4:	e7e6      	b.n	8009294 <__ieee754_sqrt+0x30>
 80092c6:	1512      	asrs	r2, r2, #20
 80092c8:	d074      	beq.n	80093b4 <__ieee754_sqrt+0x150>
 80092ca:	07d4      	lsls	r4, r2, #31
 80092cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80092d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80092d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80092d8:	bf5e      	ittt	pl
 80092da:	0fda      	lsrpl	r2, r3, #31
 80092dc:	005b      	lslpl	r3, r3, #1
 80092de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80092e2:	2400      	movs	r4, #0
 80092e4:	0fda      	lsrs	r2, r3, #31
 80092e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80092ea:	107f      	asrs	r7, r7, #1
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	2516      	movs	r5, #22
 80092f0:	4620      	mov	r0, r4
 80092f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80092f6:	1886      	adds	r6, r0, r2
 80092f8:	428e      	cmp	r6, r1
 80092fa:	bfde      	ittt	le
 80092fc:	1b89      	suble	r1, r1, r6
 80092fe:	18b0      	addle	r0, r6, r2
 8009300:	18a4      	addle	r4, r4, r2
 8009302:	0049      	lsls	r1, r1, #1
 8009304:	3d01      	subs	r5, #1
 8009306:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800930a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800930e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009312:	d1f0      	bne.n	80092f6 <__ieee754_sqrt+0x92>
 8009314:	462a      	mov	r2, r5
 8009316:	f04f 0e20 	mov.w	lr, #32
 800931a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800931e:	4281      	cmp	r1, r0
 8009320:	eb06 0c05 	add.w	ip, r6, r5
 8009324:	dc02      	bgt.n	800932c <__ieee754_sqrt+0xc8>
 8009326:	d113      	bne.n	8009350 <__ieee754_sqrt+0xec>
 8009328:	459c      	cmp	ip, r3
 800932a:	d811      	bhi.n	8009350 <__ieee754_sqrt+0xec>
 800932c:	f1bc 0f00 	cmp.w	ip, #0
 8009330:	eb0c 0506 	add.w	r5, ip, r6
 8009334:	da43      	bge.n	80093be <__ieee754_sqrt+0x15a>
 8009336:	2d00      	cmp	r5, #0
 8009338:	db41      	blt.n	80093be <__ieee754_sqrt+0x15a>
 800933a:	f100 0801 	add.w	r8, r0, #1
 800933e:	1a09      	subs	r1, r1, r0
 8009340:	459c      	cmp	ip, r3
 8009342:	bf88      	it	hi
 8009344:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009348:	eba3 030c 	sub.w	r3, r3, ip
 800934c:	4432      	add	r2, r6
 800934e:	4640      	mov	r0, r8
 8009350:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009354:	f1be 0e01 	subs.w	lr, lr, #1
 8009358:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800935c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009360:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009364:	d1db      	bne.n	800931e <__ieee754_sqrt+0xba>
 8009366:	430b      	orrs	r3, r1
 8009368:	d006      	beq.n	8009378 <__ieee754_sqrt+0x114>
 800936a:	1c50      	adds	r0, r2, #1
 800936c:	bf13      	iteet	ne
 800936e:	3201      	addne	r2, #1
 8009370:	3401      	addeq	r4, #1
 8009372:	4672      	moveq	r2, lr
 8009374:	f022 0201 	bicne.w	r2, r2, #1
 8009378:	1063      	asrs	r3, r4, #1
 800937a:	0852      	lsrs	r2, r2, #1
 800937c:	07e1      	lsls	r1, r4, #31
 800937e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009382:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009386:	bf48      	it	mi
 8009388:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800938c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009390:	4614      	mov	r4, r2
 8009392:	e781      	b.n	8009298 <__ieee754_sqrt+0x34>
 8009394:	0ad9      	lsrs	r1, r3, #11
 8009396:	3815      	subs	r0, #21
 8009398:	055b      	lsls	r3, r3, #21
 800939a:	2900      	cmp	r1, #0
 800939c:	d0fa      	beq.n	8009394 <__ieee754_sqrt+0x130>
 800939e:	02cd      	lsls	r5, r1, #11
 80093a0:	d50a      	bpl.n	80093b8 <__ieee754_sqrt+0x154>
 80093a2:	f1c2 0420 	rsb	r4, r2, #32
 80093a6:	fa23 f404 	lsr.w	r4, r3, r4
 80093aa:	1e55      	subs	r5, r2, #1
 80093ac:	4093      	lsls	r3, r2
 80093ae:	4321      	orrs	r1, r4
 80093b0:	1b42      	subs	r2, r0, r5
 80093b2:	e78a      	b.n	80092ca <__ieee754_sqrt+0x66>
 80093b4:	4610      	mov	r0, r2
 80093b6:	e7f0      	b.n	800939a <__ieee754_sqrt+0x136>
 80093b8:	0049      	lsls	r1, r1, #1
 80093ba:	3201      	adds	r2, #1
 80093bc:	e7ef      	b.n	800939e <__ieee754_sqrt+0x13a>
 80093be:	4680      	mov	r8, r0
 80093c0:	e7bd      	b.n	800933e <__ieee754_sqrt+0xda>
 80093c2:	bf00      	nop
 80093c4:	7ff00000 	.word	0x7ff00000

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
